[{"categories":["mysql","golang","net"],"content":"mysql数据表分析 最近再研究数据库数据安全时需要分析mysql数据库的认证流程，获取到认证信息中的用户名来作为用户的唯一标识。 ","date":"2023-12-07","objectID":"/mysql-packet/:0:0","tags":["mysql"],"title":"mysql数据包分析","uri":"/mysql-packet/"},{"categories":["mysql","golang","net"],"content":"认证数据包 Auth packet //4 + 4 + 1 + 23 func (packet *Packet) GetDBUser() string { offset := 4 + 4 + 1 + 23 data := packet.data[offset:] return string(data[0:bytes.IndexByte(data, 0)]) } ","date":"2023-12-07","objectID":"/mysql-packet/:1:0","tags":["mysql"],"title":"mysql数据包分析","uri":"/mysql-packet/"},{"categories":["mysql","golang","net"],"content":"参考 https://www.jianshu.com/p/76a078e308f8 ","date":"2023-12-07","objectID":"/mysql-packet/:2:0","tags":["mysql"],"title":"mysql数据包分析","uri":"/mysql-packet/"},{"categories":["vim","golang"],"content":"Vim配置vim-go插件 Vim安装了vim-go插件后语法高亮默认不会高亮函数，可以添加一些配置 ","date":"2023-12-05","objectID":"/vim-go/:0:0","tags":["vim","golang"],"title":"Vim配置vim-go","uri":"/vim-go/"},{"categories":["vim","golang"],"content":"配置文件中加入vim-go插件并安装 Plug 'fatih/vim-go' ","date":"2023-12-05","objectID":"/vim-go/:1:0","tags":["vim","golang"],"title":"Vim配置vim-go","uri":"/vim-go/"},{"categories":["vim","golang"],"content":"配置文件中加入vim-go相关配置 \" 自动补全 let g:go_auto_sameids = 1 let g:go_auto_type_info = 1 let g:go_auto_unimported = 1 \" 代码格式化 autocmd BufWritePre *.go :silent! call go#fmt#Fmt() \" 调试支持 let g:go_gdb_enabled = 1 let g:go_debug_breakpoint_style = 'condition' let g:go_debug_adapter = 'dlv' \"golang高亮 let g:go_highlight_types = 1 let g:go_highlight_fields = 1 let g:go_highlight_functions = 1 let g:go_highlight_function_calls = 1 let g:go_highlight_operators = 1 let g:go_highlight_extra_types = 1 ","date":"2023-12-05","objectID":"/vim-go/:2:0","tags":["vim","golang"],"title":"Vim配置vim-go","uri":"/vim-go/"},{"categories":["golang"],"content":"Golang GoFrame框架 最近又一个项目后面需要做Web后台，之前有一个项目的Web后台是使用C++写的，这次的项目用的是Golang来做，后台web相关的api就准备用golang来写。 ","date":"2023-12-05","objectID":"/gf/:0:0","tags":["golang","web"],"title":"Golang GoFrame框架","uri":"/gf/"},{"categories":["golang"],"content":"golang的web框架 golang的web框架也有不少选择,下面是其中的一些: Gin GoFrame:https://github.com/gogf/gf Hertz:https://github.com/cloudwego/hertz https://github.com/gin-gonic/gin ","date":"2023-12-05","objectID":"/gf/:1:0","tags":["golang","web"],"title":"Golang GoFrame框架","uri":"/gf/"},{"categories":["golang"],"content":"例子 这里我测试了一下focus-single这个例子感觉还不错。 https://goframe.org/pages/viewpage.action?pageId=57183756 https://github.com/gogf/focus-single ","date":"2023-12-05","objectID":"/gf/:2:0","tags":["golang","web"],"title":"Golang GoFrame框架","uri":"/gf/"},{"categories":["golang"],"content":"总结 现在还没有深入使用GoFrame,这里先记录一下… ","date":"2023-12-05","objectID":"/gf/:3:0","tags":["golang","web"],"title":"Golang GoFrame框架","uri":"/gf/"},{"categories":["硬件"],"content":"S905l3a安装armbian 上周末把家里二手的电视盒子刷成了armbian,再安装上docker,docker上可以安装轻量级的nas和很多工具比如Home Assistant。 ","date":"2023-12-04","objectID":"/s905l3a_armbian/:0:0","tags":["电视盒子"],"title":"S905l3a YST 安装armbian","uri":"/s905l3a_armbian/"},{"categories":["硬件"],"content":"安装遇到问题 ","date":"2023-12-04","objectID":"/s905l3a_armbian/:1:0","tags":["电视盒子"],"title":"S905l3a YST 安装armbian","uri":"/s905l3a_armbian/"},{"categories":["硬件"],"content":"更新系统后无法进入系统了 这个问题很搞人，解决方案就是别更新armbian就可以了。 ","date":"2023-12-04","objectID":"/s905l3a_armbian/:1:1","tags":["电视盒子"],"title":"S905l3a YST 安装armbian","uri":"/s905l3a_armbian/"},{"categories":["硬件"],"content":"设置网络 用nmtui ","date":"2023-12-04","objectID":"/s905l3a_armbian/:1:2","tags":["电视盒子"],"title":"S905l3a YST 安装armbian","uri":"/s905l3a_armbian/"},{"categories":["硬件"],"content":"安装portainer root@armbian:~# cat install_portainer.sh #这个可不执行，搜索portainer镜像，我选portainer-ce docker search portainer #拉取portainer镜像 docker pull portainer/portainer-ce #创建一个名称为portainerTV端口为9000的容器，并运行。 docker run -d -p 9000:9000 --restart=always \\ -v /var/run/docker.sock:/var/run/docker.sock \\ --name portainerTV portainer/portainer-ce ","date":"2023-12-04","objectID":"/s905l3a_armbian/:1:3","tags":["电视盒子"],"title":"S905l3a YST 安装armbian","uri":"/s905l3a_armbian/"},{"categories":["硬件"],"content":"参考 https://www.right.com.cn/forum/thread-8246642-1-1.html ","date":"2023-12-04","objectID":"/s905l3a_armbian/:2:0","tags":["电视盒子"],"title":"S905l3a YST 安装armbian","uri":"/s905l3a_armbian/"},{"categories":["net"],"content":"零信任网络访问–ZTNA ","date":"2023-11-29","objectID":"/ztna/:0:0","tags":["ZTNA"],"title":"零信任网络访问--ZTNA","uri":"/ztna/"},{"categories":["net"],"content":"概念 零信任网络访问（Zero Trust Network Access，ZTNA）是一种安全模型和策略，旨在提供更严格、更精细的访问控制，以保护企业网络和资源免受未经授权的访问和攻击。 传统的网络安全模型通常基于边界防御，即在企业网络的边界上建立防火墙和访问控制策略，以限制外部用户对内部资源的访问。然而，随着移动办公、云计算和外部合作伙伴等趋势的兴起，企业网络变得更加复杂，边界变得模糊，传统的边界防御模型已经无法满足安全需求。 零信任网络访问模型采用了一种\"never trust, always verify\"（永不信任，始终验证）的原则。它将安全重心从网络边界转移到每个用户和设备级别，要求在用户访问企业资源之前进行身份验证、设备健康检查和访问权限控制。具体来说，ZTNA模型包括以下几个关键要素： 多因素身份验证：用户在访问企业资源之前需要进行强制的多因素身ä»½验证，以确保其身份的真实性。 设备健康检查：用户的设备需要通过安全性评估和健康检查，以确保其满足特定的安全标准和策略。 微分化访问权限：基于用户的身份、角色和上下文，为每个用户提供最小权限原则，只授予他们访问所需资源的权限。 实时访问监控和日志记录：对用户的访问行为进行实时监控和记录，以便及时检测异常活动，并进行适当的响应和取证。 ","date":"2023-11-29","objectID":"/ztna/:1:0","tags":["ZTNA"],"title":"零信任网络访问--ZTNA","uri":"/ztna/"},{"categories":["net"],"content":"作用 通过采用零信任网络访问模型，企业可以提高对网络资源的安全性和可见性，减少潜在的攻击面，并更好地保护敏感数据免受未经授权的访问。 这种安全模型适应了现代网络环境的变化和挑战，被广泛视为一种有效的安全实践。 ","date":"2023-11-29","objectID":"/ztna/:2:0","tags":["ZTNA"],"title":"零信任网络访问--ZTNA","uri":"/ztna/"},{"categories":["net"],"content":"软件定义广域网–SDWAN ","date":"2023-11-29","objectID":"/sdwan/:0:0","tags":["SDWAN"],"title":"软件定义广域网--SDWAN","uri":"/sdwan/"},{"categories":["net"],"content":"含义 SD-WAN是软件定义广域网（Software-Defined Wide Area Network）的缩写。 它是一种网络架构和技术，用于优化和管理企业的广域网连接。 传统的广域网架构通常使用专线和多协议标签交换（MPLS）等传统技术，但在现代企业中，面临着应用程序多样性、云计算和分布式办公等挑战。 SD-WAN旨在应对这些挑战，并提供更灵活、可靠和经济高效的广域网解决方案。 ","date":"2023-11-29","objectID":"/sdwan/:1:0","tags":["SDWAN"],"title":"软件定义广域网--SDWAN","uri":"/sdwan/"},{"categories":["net"],"content":"SD-WAN的关键特点和功能包括： 集中化管理：通过集中的控制器，管理员可以对整个广域网进行集中管理和配置，从而简化了网络管理任务。 动态路径选择：SD-WAN可以根据网络流量、延迟、带宽和应用程序要求等因素，智能地选择最佳的网络路径，以确保数据传输的性能和质量。 应用程序优化：SD-WAN可以识别和分类不同的应用程序流量，并对其进行优化，以提供更好的用户体验和应用程序性能。 安全性增强：SD-WAN可以提供安全加密隧道和防火墙功能，以保护数据在广域网中的传输安全。 云集成：SD-WAN可以与云服务提供商集成，并优化对云应用程序和云服务的访问，提供更好的性能和可靠性。 通过使用SD-WAN，企业可以降低广域网的复杂性和成本，提高网络的可用性和性能，并更好地适应不断变化的业务需求。它是一种灵活、可扩展和创新的网络解决方案，逐渐被企业广泛采用。 ","date":"2023-11-29","objectID":"/sdwan/:2:0","tags":["SDWAN"],"title":"软件定义广域网--SDWAN","uri":"/sdwan/"},{"categories":["net"],"content":"数据泄露防护–DLP ","date":"2023-11-29","objectID":"/dlp/:0:0","tags":["dlp"],"title":"数据泄露防护--DLP","uri":"/dlp/"},{"categories":["net"],"content":"含义 DLP代表数据丧失预防（Data Loss Prevention），也被称为数据泄露防护、数据泄漏预防等。 DLP是一种技术和策略的组合，旨在防止敏感数据在未经授权的情况下被意外泄露、遗失或盗取。 ","date":"2023-11-29","objectID":"/dlp/:1:0","tags":["dlp"],"title":"数据泄露防护--DLP","uri":"/dlp/"},{"categories":["net"],"content":"目标 DLP的目标是保护敏感数据，包括个人身份信息、财务数据、知识产权和其他机密信息，以防止其被恶意使用或不当处理。 它可以应用于各种数据形式，如文本文档、电子邮件、数据库记录、图像和音频等。 ","date":"2023-11-29","objectID":"/dlp/:2:0","tags":["dlp"],"title":"数据泄露防护--DLP","uri":"/dlp/"},{"categories":["net"],"content":"DLP技术通常包括以下方面： 内容检测与监测：使用各种方法和算法对数据进行扫描和分析，以识别敏感信息，例如社会安全号码、信用卡号码、银行账户信息等。这可以通过关键字匹配、正则表达式、机器学习和模式识别等技术来实现。 访问控制与策略管理：通过设定访问策略和权限控制，限制对敏感数据的访问，并确保只有经过授权的用户和应用程序可以处理该数据。 加密与数据保护：使用加密技术对敏感数据进行保护，以确保即使在数据泄露的情况下，也无法被未经授权的人员访问。 活动监测与审计：持续监测和记录数据处理活动，以便及时发现异常行为和追踪数据泄露事件的来源。 ","date":"2023-11-29","objectID":"/dlp/:3:0","tags":["dlp"],"title":"数据泄露防护--DLP","uri":"/dlp/"},{"categories":["net"],"content":"作用 实施DLP策略可以帮助组织保护其敏感数据，提高数据安全性和合规性。 它可以防止内部人员的意外错误、恶意行为和外部威胁导致的数据泄露。 此外，一些组织还使用DLP来满足法规和合规要求，如GDPR（通用数据保护条例）和HIPAA（美国医疗保险可移植性和责任法案）等。 需要注意的是，DLP技术和策略仅仅是数据安全保护的一部分，组织还应采取其他安全措施，如访问控制、身份验证、网络防火墙和安全培训等，以构建一个全面的数据保护体系。 ","date":"2023-11-29","objectID":"/dlp/:4:0","tags":["dlp"],"title":"数据泄露防护--DLP","uri":"/dlp/"},{"categories":["net"],"content":"安全访问服务边缘–SASE ","date":"2023-11-29","objectID":"/sase/:0:0","tags":["SASE"],"title":"安全访问服务边缘--SASE","uri":"/sase/"},{"categories":["net"],"content":"基础概念 SASE是Secure Access Service Edge的缩写，即安全访问服务边缘。它是一种新兴的网络架构，将网络安全与广域网（WAN）边缘服务集成在一起，以提供更安全、更快速和更可靠的网络连接。 SASE的设计理念是将网络安全功能（如防火墙、安全网关、入侵检测和预防等）与广域网连接功能（如SD-WAN、加速器、应用程序路由和负载均衡等）集成在一起，形成一个综合的网络边缘服务平台。 这种集成可以通过云服务提供商或网络服务提供商（NSP）来实现，用户可以通过云服务访问SASE平台。 ","date":"2023-11-29","objectID":"/sase/:1:0","tags":["SASE"],"title":"安全访问服务边缘--SASE","uri":"/sase/"},{"categories":["net"],"content":"优势 SASE可以带来以下优势： 更好的安全性：SASE将网络安全功能集中在边缘，可以为用户提供更全面、更实时的安全保护，包括数据加密、流量检测、恶意软件防御和访问控制等。 更高的可靠性：SASE可以通过多个数据中心和全球范围的边缘节点来提供服务，可以实现更高的容错性和可靠性，同时也能够提供更低的时延和更快的网络连接速度。 更高的灵活性：SASE可以根据不同用户的需求定制网络功能和安全策略，可以实现更灵活的网络架构和更快速的服务交付。 更低的成本：SASE使用云服务模式，可以在无需额外投资于基础设施和设备的情况下提供服务，从而降低了总体成本。 由于SASE平台的集成和部署需要大量的技术和资源，因此很多企业选择将SASE服务外包给云服务提供商或网络服务提供商。这种模式可以使企业专注于自己的业务，同时也可以获得更好的网络安全和更高的网络性能。 ","date":"2023-11-29","objectID":"/sase/:2:0","tags":["SASE"],"title":"安全访问服务边缘--SASE","uri":"/sase/"},{"categories":["net"],"content":"SaaS ","date":"2023-11-29","objectID":"/saas/:0:0","tags":["SAAS"],"title":"软件即服务--SaaS","uri":"/saas/"},{"categories":["net"],"content":"简介 SaaS是“软件即服务”（Software as a Service）的缩写，是一种基于云计算模式的软件交付模式。 在SaaS模式下，软件提供商将其应用程序部署在云基础设施上，并通过互联网向用户提供访问。 用户无需购买、安装和维护软件，而是通过订阅或按需付费的方式来使用软件服务。 ","date":"2023-11-29","objectID":"/saas/:1:0","tags":["SAAS"],"title":"软件即服务--SaaS","uri":"/saas/"},{"categories":["net"],"content":"SaaS的特点 SaaS模式具有以下特点： 订阅模式：用户通常以订阅或按需付费的方式来获得对SaaS应用程序的访问权限。这使得用户可以根据实际需求进行灵活的付费，并避免了大额的前期投资。 多租户架构：SaaS应用程序通常采用多租户架构，即多个用户共享同一套软件实例和基础设施。这使得软件提供商能够更高效地管理和维护软件，同时为用户提供可伸缩性和灵活性。 无需安装和维护：用户无需在本地安装、配置和维护软件，所有的应用程序逻辑和数据都存储在云端。这减轻了用户的IT管理负担，同时确保了软件的及时更新和维护。 全球性访问：由于SaaS应用程序基于互联网提供服务，用户可以通过任何联网设备和任何地点来访问应用程序，具有很强的灵活性和可访问性。 持续更新：软件提供商可以通过云端部署持续地更新和改进SaaS应用程序，用户无需手动进行更新，始终可以获得最新版本的功能和修复。 ","date":"2023-11-29","objectID":"/saas/:2:0","tags":["SAAS"],"title":"软件即服务--SaaS","uri":"/saas/"},{"categories":["net"],"content":"总结 常见的SaaS应用包括客户关系管理（CRM）、企业资源规划（ERP）、人力资源管理（HRM）、协作办公、项目管理和各种行业专用软件等。 总之，SaaS模式通过基于云计算的软件交付方式，为用户提供了一种便捷、灵活和经济高效的软件使用方式，已经成为现代企业和个人用户的常用选择。 ","date":"2023-11-29","objectID":"/saas/:3:0","tags":["SAAS"],"title":"软件即服务--SaaS","uri":"/saas/"},{"categories":["golang"],"content":"golang mutex用法 package main import ( \"fmt\" \"sync\" ) var ( counter int mutex sync.Mutex ) func incrementCounter() { mutex.Lock() // 获取互斥锁 defer mutex.Unlock() // 在函数返回时释放互斥锁 counter++ // 访问共享资源 } func main() { wg := sync.WaitGroup{} for i := 0; i \u003c 1000; i++ { wg.Add(1) go func() { incrementCounter() wg.Done() }() } wg.Wait() fmt.Println(\"Counter:\", counter) } 在上面的示例中， 首先定义了一个全局变量counter和一个互斥锁mutex。 然后编写了一个incrementCounter函数，该函数对counter进行递增操作。 在主函数main中，启动了1000个goroutine并发地调用incrementCounter函数来增加counter的值。 通过使用互斥锁，确保了对counter的安全访问，避免了竞争条件的发生。 需要注意的是，在使用互斥锁时，需要在临界区的开始处调用Lock方法获取锁，并在临界区结束时调用Unlock方法释放锁。 为了确保锁一定会被释放，可以使用defer语句来延迟执行Unlock方法。 ","date":"2023-11-27","objectID":"/golang-mutex/:0:0","tags":["golang"],"title":"golang mutex用法","uri":"/golang-mutex/"},{"categories":["net"],"content":"dnsmasq ","date":"2023-11-26","objectID":"/dnsmasq/:0:0","tags":["net"],"title":"dnsmasq","uri":"/dnsmasq/"},{"categories":["net"],"content":"什么是dnsmasq? dnsmasq是一个轻量级的、易于配置的DNS（Domain Name System）和DHCP（Dynamic Host Configuration Protocol）服务器软件。它可以在Linux和其他类Unix系统上运行，并提供DNS缓存、DHCP服务和网络引导功能。 作为DNS服务器，dnsmasq能够响应主机的DNS查询请求，并将这些查询发送到上游DNS服务器，从而帮助加快DNS解析速度并减轻上游DNS服务器的负载。此外，dnsmasq还可以通过本地缓存来改善网络性能，并支持将特定域名的解析请求重定向到指定的IP地址。 作为DHCP服务器，dnsmasq可以自动为连接到网络的计算机分配IP地址、网关和DNS服务器等网络配置信息，从而简化了网络管理和配置的工作。 除此之外，dnsmasq还具有透明代理、网络引导等功能，使其成为一个多功能的网络服务软件。由于其轻量级和易用性，dnsmasq经常被用于嵌入式系统、家庭网络路由器和小型办公室网络中。 总的来说，dnsmasq在网络环境中扮演着重要角色，为用户提供了简单而有效的DNS和DHCP服务，并在一定程度上提高了网络的性能和可管理性。 ","date":"2023-11-26","objectID":"/dnsmasq/:1:0","tags":["net"],"title":"dnsmasq","uri":"/dnsmasq/"},{"categories":["net"],"content":"ubuntu安装 sudo apt-get install dnsmasq ","date":"2023-11-26","objectID":"/dnsmasq/:2:0","tags":["net"],"title":"dnsmasq","uri":"/dnsmasq/"},{"categories":["net"],"content":"源码下载地址 https://thekelleys.org.uk/dnsmasq/ ","date":"2023-11-26","objectID":"/dnsmasq/:2:1","tags":["net"],"title":"dnsmasq","uri":"/dnsmasq/"},{"categories":["net"],"content":"云访问安全代理–CASB ","date":"2023-11-26","objectID":"/casb/:0:0","tags":["net"],"title":"云访问安全代理--CASB","uri":"/casb/"},{"categories":["net"],"content":"什么是CASB? CASB云访问安全代理 是介于企业用户和云服务提供商之间的安全策略执行点。CASB 可以结合多种不同的安全策略（从身份验证和凭据映射到加密、恶意软件检测等等），提供灵活的企业解决方案，帮助确保云应用在授权和未授权应用程序以及托管和非托管设备上的安全性。 ","date":"2023-11-26","objectID":"/casb/:1:0","tags":["net"],"title":"云访问安全代理--CASB","uri":"/casb/"},{"categories":["net"],"content":"CASB的4大基础 可见性 数据安全 威胁防护 合规性 ","date":"2023-11-26","objectID":"/casb/:2:0","tags":["net"],"title":"云访问安全代理--CASB","uri":"/casb/"},{"categories":["net"],"content":"CASB产品 微软CASB ","date":"2023-11-26","objectID":"/casb/:3:0","tags":["net"],"title":"云访问安全代理--CASB","uri":"/casb/"},{"categories":["net"],"content":"参考 CASB和SASE：有什么区别？ CASB用例 ","date":"2023-11-26","objectID":"/casb/:4:0","tags":["net"],"title":"云访问安全代理--CASB","uri":"/casb/"},{"categories":["golang"],"content":"Golang基础 ","date":"2023-11-22","objectID":"/golang-base/:0:0","tags":["golang"],"title":"Golang基础","uri":"/golang-base/"},{"categories":["golang"],"content":"安装最新版本的golang wget https://go.dev/dl/go1.21.4.linux-amd64.tar.gz tar -C /usr/local -xzf go1.21.4.linux-amd64.tar.gz vim ~/.bashrc export PATH=$PATH:/usr/local/go/bin export GOPROXY=https://goproxy.cn source ~/.bashrc go version ","date":"2023-11-22","objectID":"/golang-base/:1:0","tags":["golang"],"title":"Golang基础","uri":"/golang-base/"},{"categories":["golang"],"content":"基础语法 ","date":"2023-11-22","objectID":"/golang-base/:2:0","tags":["golang"],"title":"Golang基础","uri":"/golang-base/"},{"categories":["golang"],"content":"字符串 package main import \"fmt\" func main() { // 定义字符串变量 str1 := \"Hello, World!\" fmt.Println(\"str1:\", str1) // 字符串拼接 str2 := \"Hello, \" + \"Golang!\" fmt.Println(\"str2:\", str2) // 获取字符串长度 length := len(str1) fmt.Println(\"Length of str1:\", length) // 字符串索引访问 char := str1[0] fmt.Println(\"First character of str1:\", char) // 遍历字符串 for i := 0; i \u003c len(str1); i++ { fmt.Println(\"Character at index\", i, \":\", str1[i]) } // 使用反引号创建原始字符串 str3 := `This is a raw string \\n` fmt.Println(\"str3:\", str3) // 字符串切片 slice := str1[7:12] fmt.Println(\"Slice of str1:\", slice) // 字符串替换 str4 := \"Hello, Golang!\" newStr := replaceString(str4, \"Golang\", \"World\") fmt.Println(\"New string:\", newStr) } func replaceString(s, old, new string) string { return s[:5] + new + s[12:] } ","date":"2023-11-22","objectID":"/golang-base/:2:1","tags":["golang"],"title":"Golang基础","uri":"/golang-base/"},{"categories":["golang"],"content":"切片 package main import \"fmt\" func main() { // 创建一个切片 var slice1 []int fmt.Println(\"slice1:\", slice1) // 使用make函数创建切片 slice2 := make([]int, 3) fmt.Println(\"slice2:\", slice2) // 通过切片字面量创建切片 slice3 := []int{1, 2, 3, 4, 5} fmt.Println(\"slice3:\", slice3) // 对切片进行切割 slice4 := slice3[1:3] fmt.Println(\"slice4:\", slice4) // 修改切片中的元素 slice4[0] = 9 fmt.Println(\"slice3:\", slice3) // 原始切片的对应位置也被修改了 // 向切片追加元素 slice3 = append(slice3, 6) fmt.Println(\"slice3:\", slice3) // 复制切片 slice5 := make([]int, 3) copy(slice5, slice3) fmt.Println(\"slice5:\", slice5) } ","date":"2023-11-22","objectID":"/golang-base/:2:2","tags":["golang"],"title":"Golang基础","uri":"/golang-base/"},{"categories":["golang"],"content":"map package main import \"fmt\" func main() { // 创建一个空的map var m1 map[string]int fmt.Println(\"m1:\", m1) // 使用make函数创建一个map m2 := make(map[string]int) fmt.Println(\"m2:\", m2) // 添加键值对到map中 m2[\"apple\"] = 3 m2[\"banana\"] = 5 fmt.Println(\"m2:\", m2) // 使用字面量创建map m3 := map[string]int{\"apple\": 3, \"banana\": 5} fmt.Println(\"m3:\", m3) // 获取map中的值 quantity := m3[\"apple\"] fmt.Println(\"Quantity of apple:\", quantity) // 修改map中的值 m3[\"apple\"] = 10 fmt.Println(\"Updated m3:\", m3) // 删除map中的键值对 delete(m3, \"banana\") fmt.Println(\"After deletion:\", m3) // 遍历map for key, value := range m3 { fmt.Println(key, \":\", value) } // 检查map中是否存在某个键 _, exists := m3[\"apple\"] fmt.Println(\"Exists:\", exists) } ","date":"2023-11-22","objectID":"/golang-base/:2:3","tags":["golang"],"title":"Golang基础","uri":"/golang-base/"},{"categories":["golang"],"content":"chan package main import \"fmt\" func square(numbers []int, c chan int) { for _, num := range numbers { c \u003c- num * num // 将计算结果发送到通道 } close(c) // 关闭通道，表示没有更多的值会被发送 } func main() { numbers := []int{1, 2, 3, 4, 5} c := make(chan int) // 创建一个整数类型的通道 go square(numbers, c) // 启动一个goroutine来执行square函数 // 从通道接收数据，直到通道关闭 for result := range c { fmt.Println(result) } } ","date":"2023-11-22","objectID":"/golang-base/:2:4","tags":["golang"],"title":"Golang基础","uri":"/golang-base/"},{"categories":["golang"],"content":"goroutine package main import ( \"fmt\" \"time\" ) func sayHello() { for i := 0; i \u003c 5; i++ { fmt.Println(\"Hello, 世界\") time.Sleep(100 * time.Millisecond) } } func main() { // 启动一个新的 goroutine 执行 sayHello 函数 go sayHello() // main 函数继续执行自己的逻辑 for i := 0; i \u003c 3; i++ { fmt.Println(\"Main 函数\") time.Sleep(200 * time.Millisecond) } } ","date":"2023-11-22","objectID":"/golang-base/:2:5","tags":["golang"],"title":"Golang基础","uri":"/golang-base/"},{"categories":["golang"],"content":"go package context bytes net/http net/http/pprof logrus bolt flag os/signal sync go-redis ","date":"2023-11-22","objectID":"/golang-base/:3:0","tags":["golang"],"title":"Golang基础","uri":"/golang-base/"},{"categories":["firewall","net","opensource","golang"],"content":"acra ","date":"2023-11-21","objectID":"/acra/:0:0","tags":["acra"],"title":"开源的数据库加密解决方案--acra","uri":"/acra/"},{"categories":["firewall","net","opensource","golang"],"content":"基础概念 AcraCentor: AcraCentor是AcraServer的一个单独的防火墙模块，用于检查每个传入的SQL请求。 AcraWriter: 将明文加密为AcraStruct并发送到AcraServer的库。 AcraBlock: 它是一种加密格式 AcraStruct: 它是一种数据格式,由AcraWriter生成。 master key .acrakeys:key生成的默认目录 KMS(Key Management Service): ","date":"2023-11-21","objectID":"/acra/:1:0","tags":["acra"],"title":"开源的数据库加密解决方案--acra","uri":"/acra/"},{"categories":["firewall","net","opensource","golang"],"content":"tools acra-keymaker:用于生成相关的key ","date":"2023-11-21","objectID":"/acra/:2:0","tags":["acra"],"title":"开源的数据库加密解决方案--acra","uri":"/acra/"},{"categories":["firewall","net","opensource","golang"],"content":"目录结构 ","date":"2023-11-21","objectID":"/acra/:3:0","tags":["acra"],"title":"开源的数据库加密解决方案--acra","uri":"/acra/"},{"categories":["firewall","net","opensource","golang"],"content":"使用 sudo apt-get install git libssl-dev make build-essential git clone https://github.com/cossacklabs/themis.git cd themis make sudo make install git clone https://github.com/cossacklabs/acra.git ","date":"2023-11-21","objectID":"/acra/:4:0","tags":["acra"],"title":"开源的数据库加密解决方案--acra","uri":"/acra/"},{"categories":["firewall","net","opensource","golang"],"content":"make key acra-keymaker --keystore=v1 --generate_master_key=master.key root@ca96fb4df685:/opt/casb/acra/build/bin# export ACRA_MASTER_KEY=$(cat master.key | base64) root@ca96fb4df685:/opt/casb/acra/build/bin# echo $ACRA_MASTER_KEY N83aD76oJK4T0rvW213efyOeGUFl6O1bw4A9+JSYGCI= vim ~/.bashrc export ACRA_MASTER_KEY='N83aD76oJK4T0rvW213efyOeGUFl6O1bw4A9+JSYGCI=' source ~/.bashrc ./acra-keymaker --client_id=python1 --keystore=v1 ","date":"2023-11-21","objectID":"/acra/:4:1","tags":["acra"],"title":"开源的数据库加密解决方案--acra","uri":"/acra/"},{"categories":["firewall","net","opensource","golang"],"content":"github github: https://github.com/ACRA/acra ","date":"2023-11-21","objectID":"/acra/:5:0","tags":["acra"],"title":"开源的数据库加密解决方案--acra","uri":"/acra/"},{"categories":["docker"],"content":"Docker常见软件安装 nginx mysql redis portainer ","date":"2023-11-13","objectID":"/docker-soft/:0:0","tags":["docker"],"title":"Docker常见软件安装","uri":"/docker-soft/"},{"categories":["code"],"content":" google c++代码规范中文版 ","date":"2023-09-18","objectID":"/google-cpp-style/:0:0","tags":["c++"],"title":"google c++ 代码规范中文版","uri":"/google-cpp-style/"},{"categories":["firewall"],"content":"防火墙知识点汇总 ","date":"2023-08-25","objectID":"/firewall/:0:0","tags":["firewall"],"title":"防火墙知识点汇总","uri":"/firewall/"},{"categories":["firewall"],"content":"基本概念 NFV ASPF 接口/interface 安全策略/acl 路由表ip-route CASB SWG WAF SASE NGFW Link-Group IP-Link VRRP DNSmasq DNS服务器 ubunu下搭建DNS服务器 DHCP服务器 ubuntu下搭建DHCP服务器 ","date":"2023-08-25","objectID":"/firewall/:1:0","tags":["firewall"],"title":"防火墙知识点汇总","uri":"/firewall/"},{"categories":["firewall"],"content":"用户相关 portal认证 LDAP协议 用户管控 portal认证 portal认证服务器 ","date":"2023-08-25","objectID":"/firewall/:1:1","tags":["firewall"],"title":"防火墙知识点汇总","uri":"/firewall/"},{"categories":["firewall"],"content":"开源库 suricate VPP vtysh ","date":"2023-08-25","objectID":"/firewall/:2:0","tags":["firewall"],"title":"防火墙知识点汇总","uri":"/firewall/"},{"categories":["firewall"],"content":"工具 iperf3 HOW ","date":"2023-08-25","objectID":"/firewall/:3:0","tags":["firewall"],"title":"防火墙知识点汇总","uri":"/firewall/"},{"categories":["firewall"],"content":"参考资料 radius ","date":"2023-08-25","objectID":"/firewall/:4:0","tags":["firewall"],"title":"防火墙知识点汇总","uri":"/firewall/"},{"categories":["net","firewall"],"content":"ASPF ","date":"2023-08-19","objectID":"/aspf/:0:0","tags":["net"],"title":"应用层的特殊包过滤技术--ASPF","uri":"/aspf/"},{"categories":["net","firewall"],"content":"什么是ASPF? ASPF(Application SpecificPacket Filter) 针对应用层的特殊包过滤技术。 ","date":"2023-08-19","objectID":"/aspf/:1:0","tags":["net"],"title":"应用层的特殊包过滤技术--ASPF","uri":"/aspf/"},{"categories":["net","firewall"],"content":"ASPF的原理 检测通过设备的报文的应用层协议信息，记录临时商议的数据连接，使得某些在安全策略中没有明确定义要放行的豹纹也能够得到正常转发。 ","date":"2023-08-19","objectID":"/aspf/:2:0","tags":["net"],"title":"应用层的特殊包过滤技术--ASPF","uri":"/aspf/"},{"categories":["net","firewall"],"content":"相关概念 单通道协议 多通道协议 Server-map表：记录临时协商的数据连接的表项。 ","date":"2023-08-19","objectID":"/aspf/:3:0","tags":["net"],"title":"应用层的特殊包过滤技术--ASPF","uri":"/aspf/"},{"categories":["vim"],"content":"vim使用等号格式化代码 在Vim中，你可以使用equalprg选项来设置格式化C++代码时使用的外部程序。以下是一些常用的外部程序，可用于对齐和格式化C++代码： ","date":"2023-08-03","objectID":"/vim-codeformat/:0:0","tags":["vim","c++"],"title":"Vim使用clang-format等工具格式化c++代码","uri":"/vim-codeformat/"},{"categories":["vim"],"content":"clang-format 安装 apt install clang-format 配置:配置文件可以房子项目目录或者,家目录 # 支持LLVM, GNU, Google, Chromium, Microsoft, Mozilla, WebKit clang-format -style=google -dump-config \u003e .clang-format 配置说明文档:url clang-format: Clang格式化工具，可以自动对齐和格式化C++代码。你需要先安装Clang，并确保clang-format命令可用。在Vim配置文件（如.vimrc）中添加以下行来设置equalprg选项： set equalprg=clang-format vimrc配置使用等号格式化 set equalprg=clang-format\\ -style=file\\ --fallback-style=google ","date":"2023-08-03","objectID":"/vim-codeformat/:0:1","tags":["vim","c++"],"title":"Vim使用clang-format等工具格式化c++代码","uri":"/vim-codeformat/"},{"categories":["vim"],"content":"astyle astyle: 一个流行的源码格式化工具，支持多种编程语言，包括C++。你需要先安装AStyle，并确保astyle命令可用。在Vim配置文件中添加以下行来设置equalprg选项： set equalprg=astyle\\ --style=gnu\\ --indent=spaces=4 上述示例中的选项–style=gnu表示使用GNU风格的缩进和格式化规则，而–indent=spaces=4表示使用4个空格进行缩进。 ","date":"2023-08-03","objectID":"/vim-codeformat/:0:2","tags":["vim","c++"],"title":"Vim使用clang-format等工具格式化c++代码","uri":"/vim-codeformat/"},{"categories":["vim"],"content":"uncrustify uncrustify: 另一个流行的源码格式化工具，支持C++等多种语言。你需要先安装Uncrustify，并确保uncrustify命令可用。在Vim配置文件中添加以下行来设置equalprg选项： set equalprg=uncrustify\\ -c\\ /path/to/uncrustify.cfg 上述示例中的-c选项后面是一个指向Uncrustify配置文件的路径，你需要将其替换为实际的配置文件路径。 ","date":"2023-08-03","objectID":"/vim-codeformat/:0:3","tags":["vim","c++"],"title":"Vim使用clang-format等工具格式化c++代码","uri":"/vim-codeformat/"},{"categories":["net"],"content":"vpp ","date":"2023-07-30","objectID":"/vpp/:0:0","tags":["net"],"title":"vpp","uri":"/vpp/"},{"categories":["net"],"content":"vpp简介 Vector Packet Processor（VPP）是一个高性能数据包处理框架，用于构建网络功能虚拟化（NFV）和软件定义网络（SDN）应用。以下是一些学习资料，可帮助你了解和学习 VPP： 官方文档：VPP 的官方文档是学习 VPP 最全面的资源。你可以在官方文档中找到关于 VPP 的详细说明、配置指南、示例代码和使用案例等内容。 官方文档链接 命令手册 GitHub 仓库：VPP 的源代码托管在 GitHub 上，你可以通过查看源代码和示例来深入了解 VPP 的内部工作原理。 GitHub 仓库链接 社区讨论：VPP 有一个活跃的社区，可以在社区讨论中获取有关 VPP 的问题和解决方案。你可以加入 VPP 的邮件列表或订阅论坛来参与讨论。 社区讨论链接 ","date":"2023-07-30","objectID":"/vpp/:1:0","tags":["net"],"title":"vpp","uri":"/vpp/"},{"categories":["net"],"content":"vpp常用命令 vppctl show int show interface show int addr ","date":"2023-07-30","objectID":"/vpp/:2:0","tags":["net"],"title":"vpp","uri":"/vpp/"},{"categories":["linux","net"],"content":"常见的路由命令 ","date":"2023-07-30","objectID":"/ip-route/:0:0","tags":["linux","net"],"title":"常见的路由命令","uri":"/ip-route/"},{"categories":["linux","net"],"content":"ubuntu20.04 ","date":"2023-07-30","objectID":"/ip-route/:1:0","tags":["linux","net"],"title":"常见的路由命令","uri":"/ip-route/"},{"categories":["linux","net"],"content":"查看路由信息 ip route show ","date":"2023-07-30","objectID":"/ip-route/:1:1","tags":["linux","net"],"title":"常见的路由命令","uri":"/ip-route/"},{"categories":["linux","net"],"content":"添加一条路默认路由 如果机器缺少默认路由，就无法上网，添加一条路由就可以解决。 其中 192.168.1.1为网关地址 ip route add default via 192.168.1.1 ","date":"2023-07-30","objectID":"/ip-route/:1:2","tags":["linux","net"],"title":"常见的路由命令","uri":"/ip-route/"},{"categories":["os"],"content":"linux 消息队列 ","date":"2023-07-24","objectID":"/linux_queue/:0:0","tags":["ubuntu","linux","c","c++"],"title":"linux消息队列的使用","uri":"/linux_queue/"},{"categories":["os"],"content":"发送端 //q3.c #include \u003cpthread.h\u003e #include \u003cmqueue.h\u003e #include \u003cstdio.h\u003e #include \u003cstdlib.h\u003e #include \u003cunistd.h\u003e #include \u003cfcntl.h\u003e /* For O_* constants */ #include \u003csys/stat.h\u003e /* For mode constants */ #include \u003cstring.h\u003e int main(int argc, char *argv[]) { mqd_t mq_cmd; struct mq_attr attr; char msgbuffer[1000] = {0}; memcpy(msgbuffer,\"boots\",5); /* Open the message queue for reading */ attr.mq_flags = 0; attr.mq_maxmsg = 10; attr.mq_msgsize = 1000; attr.mq_curmsgs = 0; mq_cmd = mq_open(\"/mq_test\", O_WRONLY|O_CREAT, 0666, \u0026attr); //为什么要加 / ，否则打开失败 if (mq_cmd \u003c 0){ printf(\"mq_open error: %d \\n\",mq_cmd); }else{ printf(\"mq_open success: %d \\n\",mq_cmd); } int nbytes = mq_send(mq_cmd, (char *)msgbuffer, sizeof(msgbuffer), 0); if (nbytes \u003c 0){ printf(\"mq_send error: %d \\n\",nbytes); }else{ printf(\"mq_send success: %d \\n\",nbytes); } if (mq_close(mq_cmd) \u003c 0){ printf(\"mq_close error! \\n\"); }else{ printf(\"mq_close success! \\n\"); } //mq_unlink(\"/mq_test\"); } make gcc q3.c -o q3 -lrt ","date":"2023-07-24","objectID":"/linux_queue/:1:0","tags":["ubuntu","linux","c","c++"],"title":"linux消息队列的使用","uri":"/linux_queue/"},{"categories":["os"],"content":"接收端 //q4.c #include \u003cpthread.h\u003e #include \u003cmqueue.h\u003e #include \u003cstdio.h\u003e #include \u003cstdlib.h\u003e #include \u003cunistd.h\u003e #include \u003cfcntl.h\u003e /* For O_* constants */ #include \u003csys/stat.h\u003e /* For mode constants */ int main(int argc, char *argv[]) { mqd_t mq_cmd; struct mq_attr attr; char msgbuffer[1000] = {0}; /* Open the message queue for reading */ attr.mq_flags = 0; attr.mq_maxmsg = 10; attr.mq_msgsize = 1000; attr.mq_curmsgs = 0; mq_cmd = mq_open(\"/mq_test\", O_RDONLY|O_CREAT, 0666, \u0026attr); //为什么要加 / ，否则打开失败 if (mq_cmd \u003c 0){ printf(\"mq_open error: %d \\n\",mq_cmd); }else{ printf(\"mq_open success: %d \\n\",mq_cmd); } int nbytes = mq_receive(mq_cmd,msgbuffer, 1000, NULL); //这里的20, 表示长度大于或等于mq_msgsize，否则返回 -1 if (nbytes \u003c 0){ printf(\"mq_receive error: %d \\n\",nbytes); }else{ printf(\"mq_receive success: %s\\n\",msgbuffer); } if (mq_close(mq_cmd) \u003c 0){ printf(\"mq_close error! \\n\"); }else{ printf(\"mq_close success! \\n\"); } } make gcc q4.c -o q4 -lrt ","date":"2023-07-24","objectID":"/linux_queue/:2:0","tags":["ubuntu","linux","c","c++"],"title":"linux消息队列的使用","uri":"/linux_queue/"},{"categories":["os"],"content":"c++ 读取消息队列 #include \u003ciostream\u003e #include \u003cthread\u003e #include \u003csys/types.h\u003e #include \u003csys/ipc.h\u003e #include \u003csys/msg.h\u003e // 定义消息队列的键值 const key_t queueKey = 1234; // 定义消息结构体 struct Message { long mtype; // 消息类型 char mtext[1024]; // 消息内容 }; // 读取消息队列的线程函数 void ReadMessageQueue() { // 创建或连接到消息队列 int queueId = msgget(queueKey, IPC_CREAT | 0666); if (queueId == -1) { std::cerr \u003c\u003c \"Failed to create or connect to the message queue.\" \u003c\u003c std::endl; return; } // 循环读取消息队列 while (true) { // 接收消息 Message message; int ret = msgrcv(queueId, \u0026message, sizeof(message.mtext), 0, 0); if (ret == -1) { std::cerr \u003c\u003c \"Failed to receive message from the message queue.\" \u003c\u003c std::endl; break; } // 处理消息（这里只简单打印） std::cout \u003c\u003c \"Received message: \" \u003c\u003c message.mtext \u003c\u003c std::endl; } // 删除消息队列 if (msgctl(queueId, IPC_RMID, NULL) == -1) { std::cerr \u003c\u003c \"Failed to remove the message queue.\" \u003c\u003c std::endl; } } int main() { // 创建读取消息队列的线程 std::thread readerThread(ReadMessageQueue); // 等待线程结束 readerThread.join(); return 0; } ","date":"2023-07-24","objectID":"/linux_queue/:3:0","tags":["ubuntu","linux","c","c++"],"title":"linux消息队列的使用","uri":"/linux_queue/"},{"categories":["c++","opensource"],"content":"如何使用c++发送邮件？ 这个库使用了一段时间后，发现异常处理做得不太好，改成了一个简单的python脚本，不推荐使用。 github-CSmtp ","date":"2023-07-22","objectID":"/cpp_mail/:0:0","tags":["c","c++","cpp","mail"],"title":"如何使用c++发送邮件？","uri":"/cpp_mail/"},{"categories":["ubuntu","vim"],"content":"ubuntu20.04安装最新版本的clangd ","date":"2023-07-12","objectID":"/clangd/:0:0","tags":["clangd"],"title":"clangd如何使用？","uri":"/clangd/"},{"categories":["ubuntu","vim"],"content":"添加LLVM官方存储库 wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add - sudo add-apt-repository \"deb http://apt.llvm.org/focal/ llvm-toolchain-focal main\" ","date":"2023-07-12","objectID":"/clangd/:1:0","tags":["clangd"],"title":"clangd如何使用？","uri":"/clangd/"},{"categories":["ubuntu","vim"],"content":"更新软件包列表 sudo apt update ","date":"2023-07-12","objectID":"/clangd/:2:0","tags":["clangd"],"title":"clangd如何使用？","uri":"/clangd/"},{"categories":["ubuntu","vim"],"content":"安装clangd root@VM-8-10-ubuntu:~# sudo apt install clangd Reading package lists... Done Building dependency tree Reading state information... Done The following packages were automatically installed and are no longer required: golang-1.13 golang-1.13-doc golang-1.13-go golang-1.13-race-detector-runtime golang-1.13-src golang-doc golang-go golang-race-detector-runtime golang-src libsass1 Use 'sudo apt autoremove' to remove them. The following additional packages will be installed: clangd-17 lib32gcc-s1 lib32stdc++6 libc6-i386 libclang-common-17-dev libclang-cpp17 libclang-rt-17-dev libllvm17 The following NEW packages will be installed: clangd clangd-17 lib32gcc-s1 lib32stdc++6 libc6-i386 libclang-common-17-dev libclang-cpp17 libclang-rt-17-dev libllvm17 0 upgraded, 9 newly installed, 0 to remove and 77 not upgraded. Need to get 48.3 MB of archives. ","date":"2023-07-12","objectID":"/clangd/:3:0","tags":["clangd"],"title":"clangd如何使用？","uri":"/clangd/"},{"categories":["ubuntu","vim"],"content":"查看clangd版本 clangd --version Ubuntu clangd version 17.0.0 (++20230711053010+0b66b3417c02-1~exp1~20230711173124.695) Features: linux Platform: x86_64-pc-linux-gnu ","date":"2023-07-12","objectID":"/clangd/:4:0","tags":["clangd"],"title":"clangd如何使用？","uri":"/clangd/"},{"categories":["ubuntu","vim"],"content":"vim如何配置使用clangd 将替换为您机器上的LLVM版本号，\u003cpath_to_clang_resource_dir\u003e替换为您机器上的clang资源目录路径 Plug 'vim-scripts/clang_complete' Plug 'rhysd/vim-clang-format' let g:clang_library_path = '/usr/lib/llvm-\u003cversion\u003e/lib' let g:clang_user_options = '-resource-dir=\u003cpath_to_clang_resource_dir\u003e' let g:clang_periodic_quickfix = 0 let g:clang_complete_auto = 1 let g:clang_complete_copen = 1 let g:clang_wp_auto_open = 1 如何查看resource_dir root@VM-8-10-ubuntu:/opt/proj/7505/skynet/service-src# clang --print-resource-dir /usr/lib/llvm-17/lib/clang/17 ","date":"2023-07-12","objectID":"/clangd/:5:0","tags":["clangd"],"title":"clangd如何使用？","uri":"/clangd/"},{"categories":["ubuntu","vim"],"content":"vim-scripts/clang_complete插件如何使用？ vim-scripts/clang_complete插件为Vim提供了自动补全功能，并支持使用clang作为后端。 - 手动触发自动补全：在编辑C++代码时，按下Ctrl+X，然后再按下Ctrl+U即可触发自动补全功能。此时，插件将使用clang作为后端查找可能的补全项。 - 选择补全项：在自动补全列表中，使用Tab键选择所需的补全项。可以在多个候选项之间切换。 / - 上下选择补全项：在自动补全列表中，按下Ctrl+N向下选择下一个补全项，按下Ctrl+P向上选择上一个补全项。 - 确定补全项：在自动补全列表中，按下Enter键即可确认当前选择的补全项并插入到代码中。 - 强制触发智能提示：在输入代码时，可以按下Ctrl+X，然后再按下Ctrl+O以强制触发智能提示功能。 ","date":"2023-07-12","objectID":"/clangd/:6:0","tags":["clangd"],"title":"clangd如何使用？","uri":"/clangd/"},{"categories":["ubuntu","vim"],"content":"clang与clangd有什么区别？ ","date":"2023-07-12","objectID":"/clangd/:7:0","tags":["clangd"],"title":"clangd如何使用？","uri":"/clangd/"},{"categories":["ubuntu","vim"],"content":"如何安装clang sudo apt install build-essential ","date":"2023-07-12","objectID":"/clangd/:8:0","tags":["clangd"],"title":"clangd如何使用？","uri":"/clangd/"},{"categories":["ubuntu","vim"],"content":"添加存储库 wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add - sudo apt-add-repository \"deb http://apt.llvm.org/focal/ llvm-toolchain-focal main\" sudo apt update sudo apt install clang clang --version clangd vim插件vim-lsp Plug 'prabirshrestha/vim-lsp' \" 启用 vim-lsp \" 如果您使用的是 Windows，请将 lsp 路径更新为正确的可执行文件路径 if executable('clangd') au User lsp_setup call lsp#register_server({ \\ 'name': 'clangd', \\ 'cmd': {server_info-\u003e['clangd', '--background-index']}, \\ 'whitelist': ['c', 'cpp'], \\ }) endif \"设置 LSP 自动完成 autocmd FileType c,cpp,python,nvim,lua call lsp#auto() \" 启用 LSP 具体支持的文件类型 autocmd FileType c setlocal omnifunc=lsp#complete autocmd FileType cpp setlocal omnifunc=lsp#complete autocmd FileType python setlocal omnifunc=lsp#complete autocmd FileType nvim setlocal omnifunc=lsp#complete autocmd FileType lua setlocal omnifunc=lsp#complete ","date":"2023-07-12","objectID":"/clangd/:9:0","tags":["clangd"],"title":"clangd如何使用？","uri":"/clangd/"},{"categories":["vim"],"content":"vim配置使用cscope ","date":"2023-07-09","objectID":"/cscope/:0:0","tags":["cscope","vim","ubuntu","c++","c"],"title":"vim配置使用cscope","uri":"/cscope/"},{"categories":["vim"],"content":"ubuntu20.04 安装cscope apt install cscope ","date":"2023-07-09","objectID":"/cscope/:1:0","tags":["cscope","vim","ubuntu","c++","c"],"title":"vim配置使用cscope","uri":"/cscope/"},{"categories":["vim"],"content":"cscope 生成索引文件 find `pwd` -name \"*.h\" -o -name \"*.hpp\" -o -name \"*.cpp\" -o -name \"*.cc\" -o -name \"*.c\" \u003e cscope.files cscope -Rbq -i cscope.files 或者 cscope -Rbq // cscope 默认在当前路径查找cscope.files ","date":"2023-07-09","objectID":"/cscope/:2:0","tags":["cscope","vim","ubuntu","c++","c"],"title":"vim配置使用cscope","uri":"/cscope/"},{"categories":["vim"],"content":"cscopt.vim 快捷键配置 Below is the minimum key mappings. nnoremap \u003cleader\u003efa :call cscope#findInteractive(expand('\u003ccword\u003e'))\u003cCR\u003e nnoremap \u003cleader\u003el :call ToggleLocationList()\u003cCR\u003e Some optional key mappings to search directly. \" s: Find this C symbol nnoremap \u003cleader\u003efs :call cscope#find('s', expand('\u003ccword\u003e'))\u003cCR\u003e \" g: Find this definition nnoremap \u003cleader\u003efg :call cscope#find('g', expand('\u003ccword\u003e'))\u003cCR\u003e \" d: Find functions called by this function nnoremap \u003cleader\u003efd :call cscope#find('d', expand('\u003ccword\u003e'))\u003cCR\u003e \" c: Find functions calling this function nnoremap \u003cleader\u003efc :call cscope#find('c', expand('\u003ccword\u003e'))\u003cCR\u003e \" t: Find this text string nnoremap \u003cleader\u003eft :call cscope#find('t', expand('\u003ccword\u003e'))\u003cCR\u003e \" e: Find this egrep pattern nnoremap \u003cleader\u003efe :call cscope#find('e', expand('\u003ccword\u003e'))\u003cCR\u003e \" f: Find this file nnoremap \u003cleader\u003eff :call cscope#find('f', expand('\u003ccword\u003e'))\u003cCR\u003e \" i: Find files #including this file nnoremap \u003cleader\u003efi :call cscope#find('i', expand('\u003ccword\u003e'))\u003cCR\u003e ","date":"2023-07-09","objectID":"/cscope/:3:0","tags":["cscope","vim","ubuntu","c++","c"],"title":"vim配置使用cscope","uri":"/cscope/"},{"categories":["vim"],"content":"vim 配置 Plug 'vim-scripts/cscope.vim' \"cscope set cscopequickfix=s-,c-,d-,i-,t-,e- nnoremap \u003cleader\u003esa :call cscope#findInteractive(expand('\u003ccword\u003e'))\u003cCR\u003e nnoremap \u003cleader\u003esl :call ToggleLocationList()\u003cCR\u003e \" s: Find this C symbol nnoremap \u003cleader\u003ess :call cscope#find('s', expand('\u003ccword\u003e'))\u003cCR\u003e \" \" g: Find this definition nnoremap \u003cleader\u003esg :call cscope#find('g', expand('\u003ccword\u003e'))\u003cCR\u003e \" \" d: Find functions called by this function nnoremap \u003cleader\u003esd :call cscope#find('d', expand('\u003ccword\u003e'))\u003cCR\u003e \" \" c: Find functions calling this function nnoremap \u003cleader\u003esc :call cscope#find('c', expand('\u003ccword\u003e'))\u003cCR\u003e \" t: Find this text string nnoremap \u003cleader\u003est :call cscope#find('t', expand('\u003ccword\u003e'))\u003cCR\u003e \" e: Find this egrep pattern nnoremap \u003cleader\u003ese :call cscope#find('e', expand('\u003ccword\u003e'))\u003cCR\u003e \" f: Find this file nnoremap \u003cleader\u003esf :call cscope#find('f', expand('\u003ccword\u003e'))\u003cCR\u003e \" i: Find files #including this file nnoremap \u003cleader\u003esi :call cscope#find('i', expand('\u003ccword\u003e'))\u003cCR\u003e if has(\"cscope\") set csprg=/usr/bin/cscope set csto=0 set cst set nocsverb \" add any database in current directory if filereadable(\"cscope.out\") cs add cscope.out \" else add database pointed to by environment elseif $CSCOPE_DB != \"\" cs add $CSCOPE_DB endif set csverb endif \"map g\u003cC-]\u003e :cs find 3 \u003cC-R\u003e=expand(“\u003ccword\u003e”)\u003cCR\u003e\u003cCR\u003e \"map g\u003cC-/\u003e :cs find 0 \u003cC-R\u003e=expand(“\u003ccword\u003e”)\u003cCR\u003e\u003cCR\u003e \" \"nmap \u003cC-_\u003es :cs find s \u003cC-R\u003e=expand(\"\u003ccword\u003e\")\u003cCR\u003e\u003cCR\u003e \"nmap \u003cC-_\u003eg :cs find g \u003cC-R\u003e=expand(\"\u003ccword\u003e\")\u003cCR\u003e\u003cCR\u003e \"nmap \u003cC-_\u003ec :cs find c \u003cC-R\u003e=expand(\"\u003ccword\u003e\")\u003cCR\u003e\u003cCR\u003e \"nmap \u003cC-_\u003et :cs find t \u003cC-R\u003e=expand(\"\u003ccword\u003e\")\u003cCR\u003e\u003cCR\u003e \"nmap \u003cC-_\u003ee :cs find e \u003cC-R\u003e=expand(\"\u003ccword\u003e\")\u003cCR\u003e\u003cCR\u003e \"nmap \u003cC-_\u003ef :cs find f \u003cC-R\u003e=expand(\"\u003ccfile\u003e\")\u003cCR\u003e\u003cCR\u003e \"nmap \u003cC-_\u003ei :cs find i \u003cC-R\u003e=expand(\"\u003ccfile\u003e\")\u003cCR\u003e\u003cCR\u003e \"nmap \u003cC-_\u003ed :cs find d \u003cC-R\u003e=expand(\"\u003ccword\u003e\")\u003cCR\u003e\u003cCR\u003e \"设定是否使用 quickfix 窗口来显示 cscope 结果 \"set cscopequickfix=s-,c-,d-,i-,t-,e- \"生成数据库 \"cscope -Rbkq \"R 表示把所有子目录里的文件也建立索引 \"b 表示cscope不启动自带的用户界面，而仅仅建立符号数据库 \"q生成cscope.in.out和cscope.po.out文件，加快cscope的索引速度 \"k在生成索引文件时，不搜索/usr/include目录 \"end cscope config ","date":"2023-07-09","objectID":"/cscope/:4:0","tags":["cscope","vim","ubuntu","c++","c"],"title":"vim配置使用cscope","uri":"/cscope/"},{"categories":["vim"],"content":"参考 参考1 参考2 https://zhuanlan.zhihu.com/p/504862247 https://blog.csdn.net/ywgdk/article/details/53607874 cscop.vim https://www.cnblogs.com/willsonli/p/6561398.html ","date":"2023-07-09","objectID":"/cscope/:5:0","tags":["cscope","vim","ubuntu","c++","c"],"title":"vim配置使用cscope","uri":"/cscope/"},{"categories":["ubuntu"],"content":"ubuntu20.04中source .bashrc后在tmux中无效？ ","date":"2023-07-02","objectID":"/tmux-source-bashrc-invalid/:0:0","tags":["ubuntu"],"title":"ubuntu20.04中source .bashrc后在tmux中无效？","uri":"/tmux-source-bashrc-invalid/"},{"categories":["ubuntu"],"content":"使用场景 最近使用nvim比较多，想在.bashrc中加一条 alias vim='nvim' 加完之后bash中source一下 source ~/.bashrc 把所有的tmux全部关闭，重新进去，发现.bashrc中的配置不生效，需要再source一下.bashrc，每次打开一个新的窗口都需要重新source一下。 ","date":"2023-07-02","objectID":"/tmux-source-bashrc-invalid/:1:0","tags":["ubuntu"],"title":"ubuntu20.04中source .bashrc后在tmux中无效？","uri":"/tmux-source-bashrc-invalid/"},{"categories":["ubuntu"],"content":"解决方案 如果你在Ubuntu 20.04上使用Bash作为默认Shell，那么它会首先加载.bash_profile（如果存在），如果没有.bash_profile，则加载.bashrc 如果存在.bash_profile文件，在文件中加入如下配置 if [ -f ~/.bashrc ]; then . ~/.bashrc fi ","date":"2023-07-02","objectID":"/tmux-source-bashrc-invalid/:2:0","tags":["ubuntu"],"title":"ubuntu20.04中source .bashrc后在tmux中无效？","uri":"/tmux-source-bashrc-invalid/"},{"categories":["game"],"content":"gimp的使用 ","date":"2023-07-01","objectID":"/gimp/:0:0","tags":["image,gimp"],"title":"gimp的使用","uri":"/gimp/"},{"categories":["game"],"content":"如果在 Windows 10 中启动 GIMP 2.10.34 时遇到 “fatal error: unhandled exception\"如何处理？ AIJ建议 如果在 Windows 10 中启动 GIMP 2.10.34 时遇到 \"fatal error: unhandled exception\" 错误，你可以尝试以下方法进行解决： 安装 Microsoft Visual C++ Redistributable：GIMP 2.10.34 可能依赖于某些 Microsoft Visual C++ Redistributable 组件。尝试下载并安装最新版本的 Visual C++ Redistributable。你可以在 Microsoft 的官方网站上找到这些组件。 禁用图形加速：有些显卡驱动程序与 GIMP 2.10.34 不兼容，可能导致启动错误。尝试禁用图形加速功能，然后重新启动 GIMP。要禁用图形加速，请右键点击桌面上的空白区域，选择 \"显示设置\"（Display settings），然后滚动到屏幕底部的 \"高级显示设置\"（Advanced display settings）。在 \"高级显示设置\" 对话框中，选择 \"显示适配器属性\"（Display adapter properties），然后切换到 \"驱动程序\"（Driver）选项卡，最后点击 \"属性\"（Properties）。在弹出的对话框中，选择 \"驱动程序\"（Driver），然后禁用 \"启用硬件加速\"（Enable hardware acceleration）选项。 兼容性模式：尝试将 GIMP 2.10.34 设置为与较旧版本的 Windows 兼容的模式。右键点击 GIMP 2.10.34 的可执行文件，选择 \"属性\"，切换到 \"兼容性\" 选项卡，并勾选 \"以兼容模式运行此程序\"（Run this program in compatibility mode for）选项。从下拉菜单中选择较旧的 Windows 版本，例如 Windows 7 或 Windows 8，然后点击 \"应用\" 和 \"确定\" 保存更改。 检查错误日志：GIMP 2.10.34 可能生成错误日志，其中记录了启动过程中的详细信息。你可以尝试查找并检查 GIMP 的日志文件，该文件通常位于用户目录下的隐藏文件夹中（例如，在 Windows 上，路径可能是 C:\\Users\\YourUsername.gimp-2.10\\session.log）。查找其中的错误消息，这可能有助于确定问题所在。 完全卸载和重新安装：如果上述方法均无效，尝试完全卸载 GIMP 2.10.34，并重新下载安装最新版本的 GIMP。确保在卸载之前备份你的工作文件和设置。 如果问题仍然存在，建议向 GIMP 官方论坛或社区寻求帮助。他们可能能够提供更具体的解决方案或调试步骤来解决启动错误。 实际解决方案:修改为win7兼容模式运行。 ","date":"2023-07-01","objectID":"/gimp/:1:0","tags":["image,gimp"],"title":"gimp的使用","uri":"/gimp/"},{"categories":["net"],"content":"arp协议 ","date":"2023-07-01","objectID":"/arp/:0:0","tags":["net"],"title":"arp协议","uri":"/arp/"},{"categories":["net"],"content":"arp协议的概念 ARP（地址解析协议）是一种用于在局域网中将IP地址解析为对应的物理MAC地址的协议。在计算机网络中，每个设备（如计算机、路由器等）都有一个唯一的MAC地址和一个IP地址。IP地址用于在网络层进行通信，而MAC地址则用于在数据链路层进行通信。 arp协议将IP地址—\u003eMAC地址。 IP地址用于网络层。 MAC地址用于数据链路层。 ","date":"2023-07-01","objectID":"/arp/:1:0","tags":["net"],"title":"arp协议","uri":"/arp/"},{"categories":["net"],"content":"arp协议的作用 ARP协议的作用是通过发送特定的ARP请求广播消息，来查询目标设备的MAC地址。 当一个设备需要与局域网内的另一个设备通信时， 它首先会检查自己的ARP缓存表， 如果找不到对应的MAC地址， 则会发送一个ARP请求广播消息，询问该IP地址对应的设备的MAC地址。 接收到该广播消息的设备会回复一个ARP响应消息，其中包含目标设备的MAC地址。 发送方设备接收到响应消息后，将目标设备的MAC地址与IP地址进行映射，并将该映射关系添加到自己的ARP缓存表中，以便下次快速查询。 ","date":"2023-07-01","objectID":"/arp/:2:0","tags":["net"],"title":"arp协议","uri":"/arp/"},{"categories":["net"],"content":"在 Ubuntu 中，你可以使用以下命令来查看和管理 ARP 协议： 查看当前的 ARP 表： arp -n 这个命令将显示当前计算机上的 ARP 表，其中包含已解析的 IP 地址和对应的 MAC 地址。 清除或删除 ARP 表中的条目： sudo arp -d \u003cip_address\u003e 使用此命令来删除指定 IP 地址的 ARP 表条目。你需要使用 sudo 提升权限来执行此操作。 添加静态 ARP 条目： sudo arp -s \u003cip_address\u003e \u003cmac_address\u003e 使用此命令可以手动添加静态 ARP 条目，将指定的 IP 地址与相应的 MAC 地址关联起来。同样，你需要使用 sudo 提升权限。 查看内核 ARP 缓存： cat /proc/net/arp 这个命令将显示内核维护的 ARP 缓存，包含了当前解析的 IP 地址和对应的 MAC 地址。 ","date":"2023-07-01","objectID":"/arp/:3:0","tags":["net"],"title":"arp协议","uri":"/arp/"},{"categories":["ubuntu","linux"],"content":"rsync ","date":"2023-06-24","objectID":"/rsync/:0:0","tags":["rsync"],"title":"rsync用法demo","uri":"/rsync/"},{"categories":["ubuntu","linux"],"content":"demo rsync -av /usr/local/src/ server:/usr/local/src/ help: https://www.ruanyifeng.com/blog/2020/08/rsync.html ","date":"2023-06-24","objectID":"/rsync/:1:0","tags":["rsync"],"title":"rsync用法demo","uri":"/rsync/"},{"categories":["golang","game","opensource"],"content":"go语言的实名认证库wlc github:https://github.com/smartwalle/wlc.git ","date":"2023-06-24","objectID":"/idcards_verify-wlc/:0:0","tags":["golang"],"title":"go语言的实名认证库wlc","uri":"/idcards_verify-wlc/"},{"categories":["c","c++","ubuntu"],"content":"ubuntu c/c++如何获取cpu使用率？ ","date":"2023-06-23","objectID":"/cpp_cpuusage/:0:0","tags":["c","c++"],"title":"ubuntu c/c++如何获取cpu内存使用率？","uri":"/cpp_cpuusage/"},{"categories":["c","c++","ubuntu"],"content":"编写cpu使用率的函数 #include \u003ciostream\u003e #include \u003cfstream\u003e #include \u003csstream\u003e #include \u003cstring\u003e #include \u003cunistd.h\u003e double getCPUUsage() { std::ifstream statFile(\"/proc/stat\"); if (!statFile) { std::cerr \u003c\u003c \"Failed to open /proc/stat.\" \u003c\u003c std::endl; return 0.0; } std::string line; std::getline(statFile, line); // 读取第一行，即总体 CPU 统计信息 std::istringstream iss(line); std::string cpuLabel; unsigned long long user, nice, system, idle, iowait, irq, softirq, steal, guest, guest_nice; iss \u003e\u003e cpuLabel \u003e\u003e user \u003e\u003e nice \u003e\u003e system \u003e\u003e idle \u003e\u003e iowait \u003e\u003e irq \u003e\u003e softirq \u003e\u003e steal \u003e\u003e guest \u003e\u003e guest_nice; unsigned long long totalTime = user + nice + system + idle + iowait + irq + softirq + steal; unsigned long long totalIdle = idle + iowait; // 等待一段时间以获取下一个时间戳 sleep(1); // 可根据需要调整时间间隔 statFile.seekg(std::ios_base::beg); // 将文件指针返回开头，准备读取下一个时间戳的数据 std::getline(statFile, line); // 再次读取第一行，即新的 CPU 统计信息 std::istringstream iss2(line); std::string cpuLabel2; unsigned long long user2, nice2, system2, idle2, iowait2, irq2, softirq2, steal2, guest2, guest_nice2; iss2 \u003e\u003e cpuLabel2 \u003e\u003e user2 \u003e\u003e nice2 \u003e\u003e system2 \u003e\u003e idle2 \u003e\u003e iowait2 \u003e\u003e irq2 \u003e\u003e softirq2 \u003e\u003e steal2 \u003e\u003e guest2 \u003e\u003e guest_nice2; unsigned long long totalTime2 = user2 + nice2 + system2 + idle2 + iowait2 + irq2 + softirq2 + steal2; unsigned long long totalIdle2 = idle2 + iowait2; // 计算 CPU 使用率 double usagePercentage = static_cast\u003cdouble\u003e(totalTime2 - totalTime) / (totalTime2 + totalIdle2 - totalTime - totalIdle) * 100.0; return usagePercentage; } ","date":"2023-06-23","objectID":"/cpp_cpuusage/:1:0","tags":["c","c++"],"title":"ubuntu c/c++如何获取cpu内存使用率？","uri":"/cpp_cpuusage/"},{"categories":["c","c++","ubuntu"],"content":"包含必要的头文件 #include \u003csys/sysinfo.h\u003e #include \u003ciostream\u003e ","date":"2023-06-23","objectID":"/cpp_cpuusage/:2:0","tags":["c","c++"],"title":"ubuntu c/c++如何获取cpu内存使用率？","uri":"/cpp_cpuusage/"},{"categories":["c","c++","ubuntu"],"content":"编写获取内存使用率的函数： double getMemoryUsage() { struct sysinfo memInfo; if (sysinfo(\u0026memInfo) == -1) { std::cerr \u003c\u003c \"Failed to get memory info.\" \u003c\u003c std::endl; return 0.0; } unsigned long totalMemory = memInfo.totalram; unsigned long freeMemory = memInfo.freeram; unsigned long usedMemory = totalMemory - freeMemory; double usagePercentage = (static_cast\u003cdouble\u003e(usedMemory) / static_cast\u003cdouble\u003e(totalMemory)) * 100.0; return usagePercentage; } ","date":"2023-06-23","objectID":"/cpp_cpuusage/:3:0","tags":["c","c++"],"title":"ubuntu c/c++如何获取cpu内存使用率？","uri":"/cpp_cpuusage/"},{"categories":["c","c++","ubuntu"],"content":"该函数使用 sysinfo 结构和 sysinfo() 函数从系统获取内存信息，然后计算出内存使用率。 在主程序中调用该函数并打印结果： int main() { double memoryUsage = getMemoryUsage(); std::cout \u003c\u003c \"Memory Usage: \" \u003c\u003c memoryUsage \u003c\u003c \"%\" \u003c\u003c std::endl; return 0; } ","date":"2023-06-23","objectID":"/cpp_cpuusage/:4:0","tags":["c","c++"],"title":"ubuntu c/c++如何获取cpu内存使用率？","uri":"/cpp_cpuusage/"},{"categories":["c","c++","ubuntu"],"content":"注意 需要注意的是，sysinfo() 函数返回的内存值以字节为单位。如果你想要以其他单位表示，比如兆字节（MB），可以进行相应的转换。此外，这种方法获取的是整个系统的内存使用率，如果你需要获取某个特定进程的内存使用率，需要使用其他 API 或工具来实现。 ","date":"2023-06-23","objectID":"/cpp_cpuusage/:5:0","tags":["c","c++"],"title":"ubuntu c/c++如何获取cpu内存使用率？","uri":"/cpp_cpuusage/"},{"categories":["mac"],"content":"mac使用rename进行批量重命名 ","date":"2023-06-17","objectID":"/mac-rename/:0:0","tags":["mac"],"title":"mac使用rename进行批量重命名","uri":"/mac-rename/"},{"categories":["mac"],"content":"场景 遇到有大量文件有相同前缀，想把前缀替换掉例如 abc_xxx1.txt 换成 def_xxx2.txt abc_xxx2.txt 换成 def_xxx2.txt ","date":"2023-06-17","objectID":"/mac-rename/:1:0","tags":["mac"],"title":"mac使用rename进行批量重命名","uri":"/mac-rename/"},{"categories":["mac"],"content":"安装使用rename命令 brew install rename rename 's/abc/def/' *.txt ","date":"2023-06-17","objectID":"/mac-rename/:2:0","tags":["mac"],"title":"mac使用rename进行批量重命名","uri":"/mac-rename/"},{"categories":["ubuntu"],"content":"如何生成内网可用的https证书？ ","date":"2023-06-16","objectID":"/openssl-https/:0:0","tags":["openssl","https"],"title":"如何生成内网可用的https证书？","uri":"/openssl-https/"},{"categories":["ubuntu"],"content":"生成https证书方案 这里主要说说其中的2种： openssl mkcert ","date":"2023-06-16","objectID":"/openssl-https/:1:0","tags":["openssl","https"],"title":"如何生成内网可用的https证书？","uri":"/openssl-https/"},{"categories":["ubuntu"],"content":"openssl 生成SSL证书 生成一个2048位的RSA私钥 openssl genrsa -out server.key 2048 创建证书请求（CSR） openssl req -new -key server.key -out server.csr 生成自签名证书 openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt ","date":"2023-06-16","objectID":"/openssl-https/:2:0","tags":["openssl","https"],"title":"如何生成内网可用的https证书？","uri":"/openssl-https/"},{"categories":["ubuntu"],"content":"wfrest 生成证书脚本 openssl genrsa -out server.key 2048 openssl req -new -x509 -key server.key -out server.crt -days 3650 ./19_https cert/server.crt cert/server.key ","date":"2023-06-16","objectID":"/openssl-https/:3:0","tags":["openssl","https"],"title":"如何生成内网可用的https证书？","uri":"/openssl-https/"},{"categories":["ubuntu"],"content":"做出的证书会提示不安全 ","date":"2023-06-16","objectID":"/openssl-https/:3:1","tags":["openssl","https"],"title":"如何生成内网可用的https证书？","uri":"/openssl-https/"},{"categories":["ubuntu"],"content":"使用mkcert制作证书 mkcert github ","date":"2023-06-16","objectID":"/openssl-https/:4:0","tags":["openssl","https"],"title":"如何生成内网可用的https证书？","uri":"/openssl-https/"},{"categories":["ubuntu"],"content":"生成客户端CA证书(pem/crt) ./mkcert --install ./mkcert -CAROOT /root/.local/share/mkcert/ #查看证书 ls /root/.local/share/mkcert/ rootCA-key.pem rootCA.pem ","date":"2023-06-16","objectID":"/openssl-https/:4:1","tags":["openssl","https"],"title":"如何生成内网可用的https证书？","uri":"/openssl-https/"},{"categories":["ubuntu"],"content":"mac导入证书 参考 ","date":"2023-06-16","objectID":"/openssl-https/:4:2","tags":["openssl","https"],"title":"如何生成内网可用的https证书？","uri":"/openssl-https/"},{"categories":["language","golang"],"content":"go build提示timeout如何解决？ ","date":"2023-06-15","objectID":"/go-build-timeout/:0:0","tags":["golang"],"title":"go build提示timeout如何解决？","uri":"/go-build-timeout/"},{"categories":["language","golang"],"content":"场景 今天想用go写一个简单的工具，github下载了一个库，go build 编译时报错了 ","date":"2023-06-15","objectID":"/go-build-timeout/:1:0","tags":["golang"],"title":"go build提示timeout如何解决？","uri":"/go-build-timeout/"},{"categories":["language","golang"],"content":"解决办法 go env -w GOPROXY=https://goproxy.io,direct ","date":"2023-06-15","objectID":"/go-build-timeout/:2:0","tags":["golang"],"title":"go build提示timeout如何解决？","uri":"/go-build-timeout/"},{"categories":["language","golang"],"content":"参考 https://zhuanlan.zhihu.com/p/312031216 ","date":"2023-06-15","objectID":"/go-build-timeout/:3:0","tags":["golang"],"title":"go build提示timeout如何解决？","uri":"/go-build-timeout/"},{"categories":["c++","ubuntu","redis"],"content":"ubuntu20.04中使用redis-plus-plus-1.3.8 ","date":"2023-06-11","objectID":"/redis-plus-plus/:0:0","tags":["c++","ubuntu"],"title":"ubuntu20.04中使用redis-plus-plus-1.3.8","uri":"/redis-plus-plus/"},{"categories":["c++","ubuntu","redis"],"content":"安装hiredis cd /usr/local/src/ proxychains wget https://github.com/redis/hiredis/archive/refs/tags/v1.1.0.tar.gz tar -xzvf v1.1.0.tar.gz cd hiredis-1.1.0/ make \u0026\u0026 make install ","date":"2023-06-11","objectID":"/redis-plus-plus/:1:0","tags":["c++","ubuntu"],"title":"ubuntu20.04中使用redis-plus-plus-1.3.8","uri":"/redis-plus-plus/"},{"categories":["c++","ubuntu","redis"],"content":"安装redis-plus-plus-1.3.8 cd /usr/local/src/ proxychains wget https://github.com/sewenew/redis-plus-plus/archive/refs/tags/1.3.8.tar.gz mv 1.3.8.tar.gz redis-plus-plus-1.3.8.tar.gz tar -xzvf redis-plus-plus-1.3.8.tar.gz cd redis-plus-plus-1.3.8/ mkdir build cd build/ cmake .. make \u0026\u0026 make install ","date":"2023-06-11","objectID":"/redis-plus-plus/:2:0","tags":["c++","ubuntu"],"title":"ubuntu20.04中使用redis-plus-plus-1.3.8","uri":"/redis-plus-plus/"},{"categories":["c++","ubuntu","redis"],"content":"编写demo程序 #include \u003ciostream\u003e #include \u003csw/redis++/redis++.h\u003e using namespace sw::redis; // https://github.com/sewenew/redis-plus-plus/tree/1.3.8#use-redis-plus-plus-in-your-project int main() { try { auto redis = Redis(\"tcp://127.0.0.1:6379\"); redis.set(\"config\",\"/etc/redis.conf\"); auto val = redis.get(\"config\"); if (val) { std::cout \u003c\u003c \"config:\" \u003c\u003c * val\u003c\u003c std::endl; } } catch (...) { std::cout \u003c\u003c \"exception\" \u003c\u003c std::endl; } return 0; } ","date":"2023-06-11","objectID":"/redis-plus-plus/:3:0","tags":["c++","ubuntu"],"title":"ubuntu20.04中使用redis-plus-plus-1.3.8","uri":"/redis-plus-plus/"},{"categories":["c++","ubuntu","redis"],"content":"编译 use static-lib g++ -std=c++17 -o demo_static_lib.exe demo.cpp -I/usr/local/include/ /usr/local/lib/libredis++.a /usr/local/lib/libhiredis.a -pthread use share-lib g++ -std=c++17 -o demo_share_lib.exe demo.cpp -lredis++ -lhiredis -pthread ","date":"2023-06-11","objectID":"/redis-plus-plus/:4:0","tags":["c++","ubuntu"],"title":"ubuntu20.04中使用redis-plus-plus-1.3.8","uri":"/redis-plus-plus/"},{"categories":["vim"],"content":"Vim保存的时候提示Read only如何解决? :w !sudo tee % ","date":"2023-06-03","objectID":"/vim-readonly/:0:0","tags":["vim","nvim"],"title":"Vim保存的时候提示Read only如何解决?","uri":"/vim-readonly/"},{"categories":["ubuntu"],"content":"sudo echo file permmition denied如何解决？ cat ./open_core.sh sudo echo \"alias vim=nvim\" \u003e\u003e /etc/profile ./open_core.sh: line 1: /etc/profile: Permission denied ","date":"2023-06-03","objectID":"/sudo-echo-file-permmition-denied/:0:0","tags":["ubuntu","shell"],"title":"使用sudo echo 写入文件提示 permmition denied如何解决？","uri":"/sudo-echo-file-permmition-denied/"},{"categories":["ubuntu"],"content":"解决方法 方法1 echo \"alias vim=nvim\" |sudo tee -a /etc/profile 方法2 sudo sh -c 'echo \"alias vim=nvim\" \u003e\u003e /etc/profile' ","date":"2023-06-03","objectID":"/sudo-echo-file-permmition-denied/:1:0","tags":["ubuntu","shell"],"title":"使用sudo echo 写入文件提示 permmition denied如何解决？","uri":"/sudo-echo-file-permmition-denied/"},{"categories":["ubuntu"],"content":"参考 https://blog.csdn.net/change_can/article/details/115128218 ","date":"2023-06-03","objectID":"/sudo-echo-file-permmition-denied/:2:0","tags":["ubuntu","shell"],"title":"使用sudo echo 写入文件提示 permmition denied如何解决？","uri":"/sudo-echo-file-permmition-denied/"},{"categories":["ubuntu"],"content":"初始化ubuntu开发环境脚本 ubuntu@VM-8-10-ubuntu:~/linux_note/config/ubuntu/script$ cat init_ubuntu.sh sudo apt install silversearcher-ag sudo apt install tmux sudo apt install fdclone sudo apt install ripgrep sudo apt install git sudo apt install tig sudo apt install ranger sudo apt install global -y sudo apt install fzf -y sudo apt install git-ftp -y sudo apt install gdb -y sudo apt install cmake -y sudo apt install unzip -y sudo apt install proxychains4 -y #./install_mdbook.sh #wget https://github.com/gohugoio/hugo/releases/download/v0.101.0/hugo_extended_0.101.0_Linux-64bit.tar.gz #tar -xzvf hugo_extended_0.101.0_Linux-64bit.tar.gz sudo snap install hugo ## tmux init cp ./.tmux.conf ~/ echo alias tmux=\\\"TERM=screen-256color-bce tmux\\\" \u003e\u003e ~/.bashrc ## gitconfig cp ./.gitconfig ~/ ## vim config rm ~/.vimrc touch ~/.vimrc echo \"inoremap jk \u003cESC\u003e\" \u003e\u003e ~/.vimrc ","date":"2023-06-03","objectID":"/script-init-ubuntu-dev/:0:0","tags":["ubuntu","script"],"title":"初始化ubuntu开发环境脚本","uri":"/script-init-ubuntu-dev/"},{"categories":["linux"],"content":"Linux 中如何让ls目录、可执行文件等显示不同的颜色？ ","date":"2023-06-03","objectID":"/ls-color/:0:0","tags":["linux"],"title":"Linux 中如何让ls目录、可执行文件等显示不同的颜色？","uri":"/ls-color/"},{"categories":["linux"],"content":"ubuntu 20.04配置方法 echo alias ls='ls --color=auto' \u003e\u003e ~/.bashrc source ~/.bashrc ","date":"2023-06-03","objectID":"/ls-color/:1:0","tags":["linux"],"title":"Linux 中如何让ls目录、可执行文件等显示不同的颜色？","uri":"/ls-color/"},{"categories":["linux"],"content":"mac m1配置方法 vim ~/.bash_profile export LS_OPTIONS='--color=auto' # 如果没有指定，则自动选择颜色 export CLICOLOR='Yes' #是否输出颜色 export LSCOLORS='CxfxcxdxbxegedabagGxGx' #指定颜色 source ~/.bash_profile ","date":"2023-06-03","objectID":"/ls-color/:2:0","tags":["linux"],"title":"Linux 中如何让ls目录、可执行文件等显示不同的颜色？","uri":"/ls-color/"},{"categories":["c++","c","vim"],"content":"ctags基本用法 生成c++ tags 排除bin,build目录 ctags -R --c++-kinds=+p --fields=+iaS --extra=+q --exclude=bin --exclude=build vim中跳转快捷键 ctrl +] 跳转到定义 ctrl +o 返回 排除某些目录 ctags -R --c++-kinds=+p --fields=+iaS --extra=+q --exclude=bin --exclude=build --exclude=cache --exclude=static ctags 配置文件 # cat ~/.ctags.d/local.ctags --recurse=yes --exclude=.git --exclude=build/ --exclude=.svn --exclude=vendor/* --exclude=node_modules/* --exclude=public/webpack/* --exclude=db/* --exclude=log/* --exclude=test/* --exclude=tests/* --exclude=\\*.min.\\* --exclude=\\*.swp --exclude=\\*.bak --exclude=\\*.pyc --exclude=\\*.class --exclude=\\*.cache ","date":"2023-05-20","objectID":"/ctags/:0:0","tags":["ctags"],"title":"ctags基本用法","uri":"/ctags/"},{"categories":["c++","c","vim"],"content":"如何安装 在 Ubuntu 上安装 Universal Ctags（UCTags） sudo apt install gcc make autoconf pkg-config git clone https://github.com/universal-ctags/ctags.git cd ctags ./autogen.sh ./configure make sudo make install ","date":"2023-05-20","objectID":"/ctags/:1:0","tags":["ctags"],"title":"ctags基本用法","uri":"/ctags/"},{"categories":["linux"],"content":"find的替代命令fd ","date":"2023-05-20","objectID":"/fd/:0:0","tags":["fd"],"title":"find的替代命令fd","uri":"/fd/"},{"categories":["linux"],"content":"ubuntu20.04 如何安装 apt install fdfind ln -s /usr/bin/fdfind /usr/bin/fd ","date":"2023-05-20","objectID":"/fd/:1:0","tags":["fd"],"title":"find的替代命令fd","uri":"/fd/"},{"categories":["linux"],"content":"fd用法 ecs-123:/data/linux_dev_blog# fd --help fd 7.4.0 USAGE: fd [FLAGS/OPTIONS] [\u003cpattern\u003e] [\u003cpath\u003e...] FLAGS: -H, --hidden Include hidden directories and files in the search results (default: hidden files and directories are skipped). Files and directories are considered to be hidden if their name starts with a `.` sign (dot). -I, --no-ignore Show search results from files and directories that would otherwise be ignored by '.gitignore', '.ignore' or '.fdignore' files. --no-ignore-vcs Show search results from files and directories that would otherwise be ignored by '.gitignore' files. -s, --case-sensitive Perform a case-sensitive search. By default, fd uses case-insensitive searches, unless the pattern contains an uppercase character (smart case). -i, --ignore-case Perform a case-insensitive search. By default, fd uses case-insensitive searches, unless the pattern contains an uppercase character (smart case). -g, --glob Perform a glob-based search instead of a regular expression search. --regex Perform a regular-expression based seach (default). This can be used to override --glob. -F, --fixed-strings Treat the pattern as a literal string instead of a regular expression. -a, --absolute-path Shows the full path starting from the root as opposed to relative paths. -L, --follow By default, fd does not descend into symlinked directories. Using this flag, symbolic links are also traversed. -p, --full-path By default, the search pattern is only matched against the filename (or directory name). Using this flag, the pattern is matched against the full path. -0, --print0 Separate search results by the null character (instead of newlines). Useful for piping results to 'xargs'. --show-errors Enable the display of filesystem errors for situations such as insufficient permissions or dead symlinks. -h, --help Prints help information -V, --version Prints version information ","date":"2023-05-20","objectID":"/fd/:2:0","tags":["fd"],"title":"find的替代命令fd","uri":"/fd/"},{"categories":["linux"],"content":"fzf配置fd vim ~/.bashrc export FZF_DEFAULT_COMMAND='fd --type file --follow --hidden --exclude .git --color=always' export FZF_DEFAULT_OPTS=\"--ansi\" ","date":"2023-05-20","objectID":"/fd/:3:0","tags":["fd"],"title":"find的替代命令fd","uri":"/fd/"},{"categories":["linux"],"content":"参考 fd github地址: https://github.com/sharkdp/fd ","date":"2023-05-20","objectID":"/fd/:4:0","tags":["fd"],"title":"find的替代命令fd","uri":"/fd/"},{"categories":["c++"],"content":"c++ nlohmann/json库 ","date":"2023-05-13","objectID":"/nlohmann-json/:0:0","tags":["c++","json"],"title":"c++ nlohmann/json库","uri":"/nlohmann-json/"},{"categories":["c++"],"content":"demo https://blog.csdn.net/WHEgqing/article/details/121181848 ","date":"2023-05-13","objectID":"/nlohmann-json/:1:0","tags":["c++","json"],"title":"c++ nlohmann/json库","uri":"/nlohmann-json/"},{"categories":["c","c++"],"content":"ubuntu20.04如何配置生成core文件？ 在平时的开发过程中很有必要配置生成core文件方便快速定位问题。 ","date":"2023-05-13","objectID":"/cpp_core/:0:0","tags":["c","c++"],"title":"ubuntu20.04如何配置生成core文件？","uri":"/cpp_core/"},{"categories":["c","c++"],"content":"如何查看是否开启生成core文件？ 如果值是0说明没有开启 ulimit -c 0 开启方法 vim /etc/profile ulimit -c unlimited 更新配置 source /etc/profile 修改生产core文件路径与名称 mkdir /var/core echo \"/var/core/core_%e_%p\" \u003e /proc/sys/kernel/core_pattern 关闭apport自动转储,修改配置文件，enabled 设置为0 vim /etc/default/apport enabled=0 ","date":"2023-05-13","objectID":"/cpp_core/:1:0","tags":["c","c++"],"title":"ubuntu20.04如何配置生成core文件？","uri":"/cpp_core/"},{"categories":["c","c++"],"content":"脚本 echo \"ulimit -c unlimited\" | sudo tee -a /etc/profile sudo source /etc/profile sudo cp /etc/sysctl.conf /etc/sysctl.conf.bak echo \"kernel.core_pattern=core-%e-%p-%s\" | sudo tee -a /etc/sysctl.conf sudo /sbin/sysctl -p sudo systemctl disable apport.service sudo systemctl stop apport.service ","date":"2023-05-13","objectID":"/cpp_core/:2:0","tags":["c","c++"],"title":"ubuntu20.04如何配置生成core文件？","uri":"/cpp_core/"},{"categories":["c","c++"],"content":"如果是非root用户可能会设置失败，可以参考下面这篇文章 https://blog.csdn.net/weixin_54178481/article/details/125089769 ","date":"2023-05-13","objectID":"/cpp_core/:3:0","tags":["c","c++"],"title":"ubuntu20.04如何配置生成core文件？","uri":"/cpp_core/"},{"categories":["c","c++"],"content":"参考 https://blog.csdn.net/Xiao_brother/article/details/125546025 https://blog.csdn.net/hejinjing_tom_com/article/details/121908482 ","date":"2023-05-13","objectID":"/cpp_core/:4:0","tags":["c","c++"],"title":"ubuntu20.04如何配置生成core文件？","uri":"/cpp_core/"},{"categories":["c++"],"content":"c++ wfrest网络框架 github地址:https://github.com/wfrest/wfrest gitee地址:https://gitee.com/wfrest/wfrest ","date":"2023-05-13","objectID":"/wfrest/:0:0","tags":["c++","http"],"title":"c++ wfrest网络框架","uri":"/wfrest/"},{"categories":["c++"],"content":"workflow框架 github:https://github.com/sogou/workflow demo:https://blog.51cto.com/u_15175878/2739149 ","date":"2023-05-13","objectID":"/wfrest/:1:0","tags":["c++","http"],"title":"c++ wfrest网络框架","uri":"/wfrest/"},{"categories":["c++"],"content":"编译wfrest库 cd wfrest make sudo make install ","date":"2023-05-13","objectID":"/wfrest/:2:0","tags":["c++","http"],"title":"c++ wfrest网络框架","uri":"/wfrest/"},{"categories":["c++"],"content":"编译workflow库 cd wfrest/workflow mkdir build cd build cmake .. make sudo make install ","date":"2023-05-13","objectID":"/wfrest/:3:0","tags":["c++","http"],"title":"c++ wfrest网络框架","uri":"/wfrest/"},{"categories":["c++"],"content":"使用wfrest库和workflow库 mkdir wfrest_demo cp example/01_basic.cc touch CMakeList.txt ","date":"2023-05-13","objectID":"/wfrest/:4:0","tags":["c++","http"],"title":"c++ wfrest网络框架","uri":"/wfrest/"},{"categories":["c++"],"content":"编写CMakeList.txt cmake_minimum_required(VERSION 3.6) set(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING \"build type\") project(wfrest_demo LANGUAGES C CXX) include_directories( /usr/local/include/workflow /usr/local/include/wfrest ) link_directories(/usr/local/lib) set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wall -fPIC -pipe -std=gnu90\") set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -fPIC -pipe -std=c++11 -fno-exceptions\") add_executable(01_basic 01_basic.cc) target_link_libraries(01_basic wfrest workflow) ","date":"2023-05-13","objectID":"/wfrest/:5:0","tags":["c++","http"],"title":"c++ wfrest网络框架","uri":"/wfrest/"},{"categories":["c++"],"content":"编译 mkdir build cd build cmake .. make ","date":"2023-05-13","objectID":"/wfrest/:6:0","tags":["c++","http"],"title":"c++ wfrest网络框架","uri":"/wfrest/"},{"categories":["c++"],"content":"测试脚本 curl 127.0.0.1:8888/hello curl 127.0.0.1:8888/data curl 127.0.0.1:8888/multi curl 127.0.0.1:8888/post ","date":"2023-05-13","objectID":"/wfrest/:7:0","tags":["c++","http"],"title":"c++ wfrest网络框架","uri":"/wfrest/"},{"categories":["c++"],"content":"ubuntu20.04中升级gcc,g++到gcc-11,g++11 ","date":"2023-05-10","objectID":"/cpp-ubuntu2004-gcc11/:0:0","tags":["gcc","g++","c++"],"title":"ubuntu20.04中升级gcc,g++到gcc-11,g++11","uri":"/cpp-ubuntu2004-gcc11/"},{"categories":["c++"],"content":"添加工具链 sudo add-apt-repository ppa:ubuntu-toolchain-r/test sudo apt update sudo apt upgrade ","date":"2023-05-10","objectID":"/cpp-ubuntu2004-gcc11/:1:0","tags":["gcc","g++","c++"],"title":"ubuntu20.04中升级gcc,g++到gcc-11,g++11","uri":"/cpp-ubuntu2004-gcc11/"},{"categories":["c++"],"content":"安装 sudo apt install gcc-11 g++-11 ","date":"2023-05-10","objectID":"/cpp-ubuntu2004-gcc11/:2:0","tags":["gcc","g++","c++"],"title":"ubuntu20.04中升级gcc,g++到gcc-11,g++11","uri":"/cpp-ubuntu2004-gcc11/"},{"categories":["c++"],"content":"降低旧版本优先级 sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 10 sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 10 ","date":"2023-05-10","objectID":"/cpp-ubuntu2004-gcc11/:3:0","tags":["gcc","g++","c++"],"title":"ubuntu20.04中升级gcc,g++到gcc-11,g++11","uri":"/cpp-ubuntu2004-gcc11/"},{"categories":["c++"],"content":"给予新版本更高的优先级 sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 20 sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 20 参考：https://www.cnblogs.com/airchip/p/16280320.html ","date":"2023-05-10","objectID":"/cpp-ubuntu2004-gcc11/:4:0","tags":["gcc","g++","c++"],"title":"ubuntu20.04中升级gcc,g++到gcc-11,g++11","uri":"/cpp-ubuntu2004-gcc11/"},{"categories":["opensource"],"content":"Ant Design Pro 官网: https://pro.ant.design/zh-CN umijs: https://v3.umijs.org/zh-CN/api ","date":"2023-05-09","objectID":"/ant-design-pro/:0:0","tags":["client"],"title":"Ant Design Pro","uri":"/ant-design-pro/"},{"categories":["c++"],"content":"clang-tidy https://clang.llvm.org/extra/clang-tidy/checks/list.html https://blog.csdn.net/weixin_43721070/article/details/122638851 ","date":"2023-05-07","objectID":"/clang-tidy/:0:0","tags":["c++"],"title":"clang-tidy","uri":"/clang-tidy/"},{"categories":["vim","ubuntu","c++"],"content":"ubuntu中为nvim安装coc插件支持c++ vim中安装coc插件添加languageserver进而实现补全，是目前vim比较好的一种实现方式。 ","date":"2023-05-07","objectID":"/nvim-coc/:0:0","tags":["vim"],"title":"ubuntu中为nvim安装coc插件支持c++","uri":"/nvim-coc/"},{"categories":["vim","ubuntu","c++"],"content":"安装 ","date":"2023-05-07","objectID":"/nvim-coc/:1:0","tags":["vim"],"title":"ubuntu中为nvim安装coc插件支持c++","uri":"/nvim-coc/"},{"categories":["vim","ubuntu","c++"],"content":"1. nodejs安装 nodejs安装可以参考这篇文章: https://blog.csdn.net/qq_37955704/article/details/113395046 安装coc先需要安装nodejs，这里使用直接下载二进制安装的方式 进入nodejs官网获取最新二进制的链接 官网地址: https://nodejs.org/zh-cn/download 下载二进制文件并解压 wget https://nodejs.org/dist/v18.16.0/node-v18.16.0-linux-x64.tar.xz 解压并创建软链接 root@ecs-168736:/# mkdir -p /usr/local/nodejs root@ecs-168736:/# mv node-v18.16.0-linux-x64 node-v18.16.0-linux-x64/ node-v18.16.0-linux-x64.tar.xz root@ecs-168736:/data/server/tools# mv node-v18.16.0-linux-x64/* /usr/local/nodejs/ ln -s /usr/local/nodejs/bin/node /usr/local/bin ln -s /usr/local/nodejs/bin/npm /usr/local/bin 配置nodejs npm config set registry https://registry.npm.taobao.org npm config list ; \"user\" config from /root/.npmrc registry = \"https://registry.npm.taobao.org/\" ; node bin location = /usr/local/nodejs/bin/node ; node version = v18.16.0 ; npm local prefix = /data/server/tools ; npm version = 9.5.1 ; cwd = /data/server/tools ; HOME = /root ; Run `npm config ls -l` to show all defaults. 验证安装结果 # node -v v18.16.0 # npm -v 9.5.1 ","date":"2023-05-07","objectID":"/nvim-coc/:1:1","tags":["vim"],"title":"ubuntu中为nvim安装coc插件支持c++","uri":"/nvim-coc/"},{"categories":["vim","ubuntu","c++"],"content":"2. coc安装 这里vim管理插件用的vim-plug,修改vim的配置文件，添加coc插件 # vim ~/.config/nvim/init.vim Plug 'neoclide/coc.nvim', {'branch': 'release'} 安装 :source % :PluginInstall 这一步如果慢的话，建议手动安装 cd ~/.config/nvim/plugged git clone https://git::@github.com/neoclide/coc.nvim.git coc添加后端c++支持 可以参考这篇文章: https://www.cnblogs.com/cniwoq/p/13272746.html coc安装coc-clangd :CocInstall coc-clangd 提示下面的错误，按提示执行即可 [coc.nvim] clangd was not found on your PATH. :CocCommand clangd.install will install 16.0.2. 安装clangd16.0.2 安装过程正常，但是运行报错,提示无法连接服务器等，后来发现了原因是下载的clangd不完整，真是无语… 手动下载后解决问题 报错信息 UnhandledRejection: write EPIPE #或 [coc.nvim] clangd client: couldn't create connection to server :CocCommand clangd.install 手动下载地址: https://github.com/clangd/clangd/releases/tag/16.0.2 wget https://github.com/clangd/clangd/releases/download/16.0.2/clangd-linux-16.0.2.zip 文件保存路径 ~/.config/coc/extensions/coc-clangd-data/install/16.0.2/clangd_16.0.2/bin 相关文档看这里: https://github.com/neoclide/coc.nvim/wiki/Language-servers#ccobjective-c \"languageserver\": { \"clangd\": { \"command\": \"clangd\", \"rootPatterns\": [\"compile_flags.txt\", \"compile_commands.json\"], \"filetypes\": [\"c\", \"cc\", \"cpp\", \"c++\", \"objc\", \"objcpp\"] } } 解决vim 中clangd-tidy找不到cmake项目中头文件的方法 让cmake能够生成compile_commonads.json文件: cd build cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 ../ 或者给cmake配置别名,简单粗暴 # vim .bashrc alias cmake='cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1' vim关联多个tags文件 https://blog.huati365.com/2eb30e87f6e67dbe ","date":"2023-05-07","objectID":"/nvim-coc/:1:2","tags":["vim"],"title":"ubuntu中为nvim安装coc插件支持c++","uri":"/nvim-coc/"},{"categories":["golang","opensource"],"content":"Golang轻量级服务端框架zinx 这个框架是在自己偶然发现的，有源码，文档和视频，作为golang的学习资料还不错，这里记录一下。 ","date":"2023-05-07","objectID":"/golang-zinx/:0:0","tags":["golang"],"title":"Golang轻量级服务端框架zinx","uri":"/golang-zinx/"},{"categories":["golang","opensource"],"content":"学习资料 网站: http://zinx.me/ 视频教程: https://www.bilibili.com/video/av71067087 ","date":"2023-05-07","objectID":"/golang-zinx/:1:0","tags":["golang"],"title":"Golang轻量级服务端框架zinx","uri":"/golang-zinx/"},{"categories":["game"],"content":"如何使用gimp压缩图片大小? 最近在给一个unity项目添加了几张图片后发现打出的包大小由几十M变成了上百M。看了一下图片都比较大。需要把图片压缩一下。 ","date":"2023-05-06","objectID":"/gimp-img-change-size/:0:0","tags":["gimp"],"title":"如何使用gimp压缩图片大小?","uri":"/gimp-img-change-size/"},{"categories":["game"],"content":"gimp简介 gimp是一个开源的图片处理工具，是PS的开源替代品。具体怎么用可以去看一下官方文档。 下载地址: https://www.gimp.org/downloads/thanks.html ","date":"2023-05-06","objectID":"/gimp-img-change-size/:1:0","tags":["gimp"],"title":"如何使用gimp压缩图片大小?","uri":"/gimp-img-change-size/"},{"categories":["game"],"content":"如何压缩图片大小 打开文件 选择菜单–\u003e图像–\u003e缩放图像 在弹出界面中可以修改图像的宽度、高度和分辨率 文件–\u003e导出为–\u003e导出–\u003e如果是jpg还可以调整图片质量 ","date":"2023-05-06","objectID":"/gimp-img-change-size/:2:0","tags":["gimp"],"title":"如何使用gimp压缩图片大小?","uri":"/gimp-img-change-size/"},{"categories":["unity","git","game"],"content":"Untiy gitignore模板 ","date":"2023-05-05","objectID":"/unity-gitignore/:0:0","tags":["unity","git"],"title":"Unity gitignore模板","uri":"/unity-gitignore/"},{"categories":["unity","git","game"],"content":"这里有一个unity .gitignore模板分享给大家 作者 walter lv 原文地址：https://blog.csdn.net/WPwalter/article/details/107033279 # This .gitignore file should be placed at the root of your Unity project directory # # Get latest from https://github.com/github/gitignore/blob/master/Unity.gitignore # /[Ll]ibrary/ /[Tt]emp/ /[Oo]bj/ /[Bb]uild/ /[Bb]uilds/ /[Ll]ogs/ /[Uu]ser[Ss]ettings/ # MemoryCaptures can get excessive in size. # They also could contain extremely sensitive data /[Mm]emoryCaptures/ # Asset meta data should only be ignored when the corresponding asset is also ignored !/[Aa]ssets/**/*.meta # Uncomment this line if you wish to ignore the asset store tools plugin # /[Aa]ssets/AssetStoreTools* # Autogenerated Jetbrains Rider plugin /[Aa]ssets/Plugins/Editor/JetBrains* # Visual Studio cache directory .vs/ # Gradle cache directory .gradle/ # Autogenerated VS/MD/Consulo solution and project files ExportedObj/ .consulo/ *.csproj *.unityproj *.sln *.suo *.tmp *.user *.userprefs *.pidb *.booproj *.svd *.pdb *.mdb *.opendb *.VC.db # Unity3D generated meta files *.pidb.meta *.pdb.meta *.mdb.meta # Unity3D generated file on crash reports sysinfo.txt # Builds *.apk *.unitypackage # Crashlytics generated file crashlytics-build.properties # Packed Addressables /[Aa]ssets/[Aa]ddressable[Aa]ssets[Dd]ata/*/*.bin* # Temporary auto-generated Android Assets /[Aa]ssets/[Ss]treamingAssets/aa.meta /[Aa]ssets/[Ss]treamingAssets/aa/* ","date":"2023-05-05","objectID":"/unity-gitignore/:1:0","tags":["unity","git"],"title":"Unity gitignore模板","uri":"/unity-gitignore/"},{"categories":["git"],"content":"如何使用.gitignore文件删除掉已经提交的文件 ","date":"2023-05-05","objectID":"/git-gitignore/:0:0","tags":["git"],"title":"Git如何使用.gitignore文件删除掉已经提交的文件","uri":"/git-gitignore/"},{"categories":["git"],"content":"问题描述 最近在整理一个老项目的时候发现项目中有一些无用的文件被提交到代码管理仓库了，于是我加了.gitignore文件，但是已经提交的文件就不会受到.gitignore文件约束了，解决办法是把已经提交的删除掉。 ","date":"2023-05-05","objectID":"/git-gitignore/:1:0","tags":["git"],"title":"Git如何使用.gitignore文件删除掉已经提交的文件","uri":"/git-gitignore/"},{"categories":["git"],"content":"具体操作步骤 首先如果本次有没提交的修改先提交。 依次执行下面3个命令: git rm -r --cache . git add . git commit -m \"rm laji\" 经过上面几步后垃圾文件就被清理了。但是本地文件不会被删除,但是也不会提交到版本库中。 ","date":"2023-05-05","objectID":"/git-gitignore/:2:0","tags":["git"],"title":"Git如何使用.gitignore文件删除掉已经提交的文件","uri":"/git-gitignore/"},{"categories":["mac"],"content":"mac平铺式桌面管理器yabai ","date":"2023-05-05","objectID":"/mac-yabai/:0:0","tags":["yabai","mac","m1"],"title":"mac平铺式桌面管理器yabai","uri":"/mac-yabai/"},{"categories":["mac"],"content":"介绍 之前自己用的一台低配置的笔记本本来是装了i3自己用的，后来装回windows系统给家人用了，最近自己入手了一台mac,因为想用平铺式的桌面管理器于是关注了一下yabai。有空折腾一下，这里先记录一下。 ","date":"2023-05-05","objectID":"/mac-yabai/:1:0","tags":["yabai","mac","m1"],"title":"mac平铺式桌面管理器yabai","uri":"/mac-yabai/"},{"categories":["mac"],"content":"安装步骤 ","date":"2023-05-05","objectID":"/mac-yabai/:2:0","tags":["yabai","mac","m1"],"title":"mac平铺式桌面管理器yabai","uri":"/mac-yabai/"},{"categories":["mac"],"content":"关闭完整性保护 查看完整性保护状态 csrutil status ","date":"2023-05-05","objectID":"/mac-yabai/:2:1","tags":["yabai","mac","m1"],"title":"mac平铺式桌面管理器yabai","uri":"/mac-yabai/"},{"categories":["mac"],"content":"安装 brew install koekeishiya/formulae/yabai ","date":"2023-05-05","objectID":"/mac-yabai/:2:2","tags":["yabai","mac","m1"],"title":"mac平铺式桌面管理器yabai","uri":"/mac-yabai/"},{"categories":["mac"],"content":"设置 echo \"$(whoami) ALL=(root) NOPASSWD: sha256:$(shasum -a 256 $(which yabai) | cut -d \" \" -f 1) $(which yabai) --load-sa\" zp ALL=(root) NOPASSWD: sha256:0c054aec0f8eeb0ba2328aa91654f5354eeacc53e9e679250afb7db1eaf062b3 /usr/local/bin/yabai --load-sa ","date":"2023-05-05","objectID":"/mac-yabai/:2:3","tags":["yabai","mac","m1"],"title":"mac平铺式桌面管理器yabai","uri":"/mac-yabai/"},{"categories":["mac"],"content":"修改配置文件/etc/sudoers sudo vim /etc/sudoers zp ALL=(root) NOPASSWD: sha256:0c054aec0f8eeb0ba2328aa91654f5354eeacc53e9e679250afb7db1eaf062b3 /usr/local/bin/yabai --load-sa ","date":"2023-05-05","objectID":"/mac-yabai/:2:4","tags":["yabai","mac","m1"],"title":"mac平铺式桌面管理器yabai","uri":"/mac-yabai/"},{"categories":["mac"],"content":"修改配置文件 vim ~/.yabairc yabai -m signal --add event=dock_did_restart action=\"sudo yabai --load-sa\" sudo yabai --load-sa ","date":"2023-05-05","objectID":"/mac-yabai/:2:5","tags":["yabai","mac","m1"],"title":"mac平铺式桌面管理器yabai","uri":"/mac-yabai/"},{"categories":["mac"],"content":"开启调试日志 yabai -m config debug_output on 下载skhd的配置demo curl https://raw.githubusercontent.com/koekeishiya/yabai/master/examples/yabairc --output ~/.yabairc_demo ","date":"2023-05-05","objectID":"/mac-yabai/:2:6","tags":["yabai","mac","m1"],"title":"mac平铺式桌面管理器yabai","uri":"/mac-yabai/"},{"categories":["mac"],"content":"安装键盘快捷键工具 brew install koekeishiya/formulae/skhd skhd --start-service skhd用法 https://github.com/koekeishiya/skhd 下载skhd的配置demo curl https://raw.githubusercontent.com/koekeishiya/yabai/master/examples/skhdrc --output ~/.skhdrc # 推荐 curl wget https://raw.githubusercontent.com/pseudoyu/dotfiles/master/skhd/skhdrc --output ~/.skhrc 参考:https://github.com/pseudoyu/dotfiles/blob/master/skhd/skhdrc # 窗口聚焦 alt - h : yabai -m window --focus west alt - j : yabai -m window --focus south alt - k : yabai -m window --focus north alt - l : yabai -m window --focus east # 交换窗口 shift + alt - h : yabai -m window --swap west shift + alt - j : yabai -m window --swap south shift + alt - k : yabai -m window --swap north shift + alt - l : yabai -m window --swap east # 移动窗口 shift + alt + ctrl - h : yabai -m window --warp west shift + alt + ctrl - h : yabai -m window --warp south shift + alt + ctrl - h : yabai -m window --warp north shift + alt + ctrl - h : yabai -m window --warp east # 旋转窗口布局 alt - r : yabai -m space --rotate 90 # 全屏 alt -f : yabai -m window --toggle zoom-fullscreen # 设置/取消窗口 space alt - g : yabai -m space --toggle padding; yabai -m space --toggle gap # 挂起窗口至屏幕中央/取消挂起窗口 alt - t : yabai -m window --toggle float;\\ yabai -m window --grid 4:4:1:1:2:2 # 修改窗口切分方式 alt - e : yabai -m window --toggle split # 重置窗口布局 shift + alt - 0 : yabai -m space --balance # 移动窗口至特定桌面 shift + alt - 1 : yabai -m window --space 1; yabai -m space --focus 1 shift + alt - 2 : yabai -m window --space 2; yabai -m space --focus 2 shift + alt - 3 : yabai -m window --space 3; yabai -m space --focus 3 shift + alt - 4 : yabai -m window --space 4; yabai -m space --focus 4 shift + alt - 5 : yabai -m window --space 5; yabai -m space --focus 5 shift + alt - 6 : yabai -m window --space 6; yabai -m space --focus 6 shift + alt - 7 : yabai -m window --space 7; yabai -m space --focus 7 shift + alt - 8 : yabai -m window --space 8; yabai -m space --focus 8 shift + alt - 9 : yabai -m window --space 9; yabai -m space --focus 9 # 增加窗口大小 shift + alt - w : yabai -m window --resize top:0:-20 shift + alt - d : yabai -m window --resize left:-20:0 # 减少窗口大小 shift + alt - s : yabai -m window --resize bottom:0:-20 shift + alt - a : yabai -m window --resize top:0:20 ","date":"2023-05-05","objectID":"/mac-yabai/:2:7","tags":["yabai","mac","m1"],"title":"mac平铺式桌面管理器yabai","uri":"/mac-yabai/"},{"categories":["mac"],"content":"启动 yabai --start-service ","date":"2023-05-05","objectID":"/mac-yabai/:2:8","tags":["yabai","mac","m1"],"title":"mac平铺式桌面管理器yabai","uri":"/mac-yabai/"},{"categories":["mac"],"content":"关闭 yabai --stop-service ","date":"2023-05-05","objectID":"/mac-yabai/:2:9","tags":["yabai","mac","m1"],"title":"mac平铺式桌面管理器yabai","uri":"/mac-yabai/"},{"categories":["mac"],"content":"参考 https://blog.csdn.net/yuanzhenwei521/article/details/123311427 github: https://github.com/koekeishiya/yabai https://sspai.com/post/73620 ","date":"2023-05-05","objectID":"/mac-yabai/:3:0","tags":["yabai","mac","m1"],"title":"mac平铺式桌面管理器yabai","uri":"/mac-yabai/"},{"categories":["unity","vim","game"],"content":"把Vim作为Unity开发的编辑器 ","date":"2023-05-05","objectID":"/unity-vim/:0:0","tags":["unity","vim"],"title":"把Vim作为Unity开发的编辑器","uri":"/unity-vim/"},{"categories":["unity","vim","game"],"content":"介绍 一直在使用Vim作为自己的主力开发工具，最近在使用unity发现默认使用vscode虽然可以用vim插件，但是感觉还是没有直接用vim用着舒服。于是想配置一下开发环境。具体配置过程可以参考下面的视频。后续有空了会完善一下这个笔记。这里先记录一下。 ","date":"2023-05-05","objectID":"/unity-vim/:1:0","tags":["unity","vim"],"title":"把Vim作为Unity开发的编辑器","uri":"/unity-vim/"},{"categories":["unity","vim","game"],"content":"参考链接 https://www.bilibili.com/video/BV1FJ411t7Uw/?vd_source=5cbf24b674b5b4183e6f626cd037b179 ","date":"2023-05-05","objectID":"/unity-vim/:2:0","tags":["unity","vim"],"title":"把Vim作为Unity开发的编辑器","uri":"/unity-vim/"},{"categories":["deploy"],"content":"使用nginx搭建一个简单的下载服务 有时候为了方便局域网内共享下载一些工具可以搭建一个ftp服务器，也可以用nginx搭建一个简单的下载网站。 ","date":"2023-05-05","objectID":"/nginx-download-server/:0:0","tags":["nginx"],"title":"使用nginx搭建一个简单的下载服务","uri":"/nginx-download-server/"},{"categories":["deploy"],"content":"nginx相关配置 添加如下配置 server { listen 80; server_name localhost; location /{ root /data/soft/; autoindex on; # 打开目录浏览功能 autoindex_localtime on; # 显示文件时间 autoindex_exact_size on; # 显示文件确切大小 } } 检查配置 nginx -t 重新加载配置 nginx -s reload ","date":"2023-05-05","objectID":"/nginx-download-server/:1:0","tags":["nginx"],"title":"使用nginx搭建一个简单的下载服务","uri":"/nginx-download-server/"},{"categories":["unity","game"],"content":"Unity小游戏适配笔记 最近在学习使用unity做一些小游戏，小工具，咨询了一下自己的伙伴一些基础问题。这里记录一下。 ","date":"2023-05-05","objectID":"/unity-2d-adapter/:0:0","tags":["unity"],"title":"Unity小游戏适配笔记","uri":"/unity-2d-adapter/"},{"categories":["unity","game"],"content":"环境 这里用到的unity版本为：2021.03 ","date":"2023-05-05","objectID":"/unity-2d-adapter/:1:0","tags":["unity"],"title":"Unity小游戏适配笔记","uri":"/unity-2d-adapter/"},{"categories":["unity","game"],"content":"Player Setting设置 在player setting–\u003eConfiguration–\u003eScripting Backend设置为ILCPP 对ILCPP不了解的同学可以看看这篇文章: https://zhuanlan.zhihu.com/p/141748334 ","date":"2023-05-05","objectID":"/unity-2d-adapter/:2:0","tags":["unity"],"title":"Unity小游戏适配笔记","uri":"/unity-2d-adapter/"},{"categories":["unity","game"],"content":"相机Camero 相机删除默认的Main Camero然后自己创建一个Camero,这种做法的原因暂时没有去纠结。 projection 选正交orthographic ","date":"2023-05-05","objectID":"/unity-2d-adapter/:3:0","tags":["unity"],"title":"Unity小游戏适配笔记","uri":"/unity-2d-adapter/"},{"categories":["unity","game"],"content":"画布Canvas UI Scale Mode 选Scale With Screen Size Screen Match Mode 选Expand ","date":"2023-05-05","objectID":"/unity-2d-adapter/:4:0","tags":["unity"],"title":"Unity小游戏适配笔记","uri":"/unity-2d-adapter/"},{"categories":["vim","mac"],"content":"解决mac系统中vscode中使用vim插件，按下某个键不连续输入的问题 ","date":"2023-05-04","objectID":"/vscode-vim-key-fix/:0:0","tags":["vim","vscode","devtools","mac"],"title":"解决mac系统中vscode中使用vim插件，按下某个键不连续输入的问题","uri":"/vscode-vim-key-fix/"},{"categories":["vim","mac"],"content":"问题 在mac系统中,如果给vscode中安装vim插件，按下某个键不放下会发现无法连续输入，或移动光标。如果是这个效果的话，插件就是个鸡肋了。 ","date":"2023-05-04","objectID":"/vscode-vim-key-fix/:1:0","tags":["vim","vscode","devtools","mac"],"title":"解决mac系统中vscode中使用vim插件，按下某个键不连续输入的问题","uri":"/vscode-vim-key-fix/"},{"categories":["vim","mac"],"content":"解决办法 查了一些资料后发现解决方法也很简单 # Disable Mac's \"Press\u0026Hold\" feature $ defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false 恢复 # Re-enable this feature $ defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool true 注意需要重启vscode才会生效 ","date":"2023-05-04","objectID":"/vscode-vim-key-fix/:2:0","tags":["vim","vscode","devtools","mac"],"title":"解决mac系统中vscode中使用vim插件，按下某个键不连续输入的问题","uri":"/vscode-vim-key-fix/"},{"categories":["vim","mac"],"content":"参考 https://www.jianshu.com/p/75cc293ae399 ","date":"2023-05-04","objectID":"/vscode-vim-key-fix/:3:0","tags":["vim","vscode","devtools","mac"],"title":"解决mac系统中vscode中使用vim插件，按下某个键不连续输入的问题","uri":"/vscode-vim-key-fix/"},{"categories":["code"],"content":"数据结构 《数据结构》(耿国华) 学习笔记 ","date":"2023-04-25","objectID":"/data-structure/:0:0","tags":["数据结构"],"title":"数据结构学习笔记","uri":"/data-structure/"},{"categories":["code"],"content":"数据结构的基本概念 数据结构包括数据的逻辑结构、存储结构和运算集合这三个部分。 数据的逻辑包括线性结构（线性表、栈、队列、字符串、数组、广义表）和非线性结构（树、图）。 数据的存储结构包括：顺序存储和非顺序存储。 ","date":"2023-04-25","objectID":"/data-structure/:1:0","tags":["数据结构"],"title":"数据结构学习笔记","uri":"/data-structure/"},{"categories":["code"],"content":"线性表 线性表是n个类型相同的数据元素的有限序列，对n\u003e0,除了第一元素无直接前驱、最后一个元素无直接后继外，其余的每个数据元素只有一个直接前驱和一个直接后继。 ","date":"2023-04-25","objectID":"/data-structure/:2:0","tags":["数据结构"],"title":"数据结构学习笔记","uri":"/data-structure/"},{"categories":["code"],"content":"线性表的特点 同一性 有穷性 有序性 线性表是一种最简单的数据结构。 ","date":"2023-04-25","objectID":"/data-structure/:2:1","tags":["数据结构"],"title":"数据结构学习笔记","uri":"/data-structure/"},{"categories":["code"],"content":"顺序表 采用顺序存储结构存放的线性表通常简称为顺序表。 线性表的顺序存储结构 #define MAXSIZE 100 typedef struct { ElemType elem[MAXSIZE]; int last; } SeqList; 未完待续。。。 ","date":"2023-04-25","objectID":"/data-structure/:2:2","tags":["数据结构"],"title":"数据结构学习笔记","uri":"/data-structure/"},{"categories":["code"],"content":"平衡二叉树 ","date":"2023-04-24","objectID":"/balanced-binary-tree/:0:0","tags":["数据结构与算法"],"title":"平衡二叉树","uri":"/balanced-binary-tree/"},{"categories":["code"],"content":"什么是平衡二叉树？ 左右子树都是平衡二叉树，左右子树的深度差值的绝对值不大于1。 ","date":"2023-04-24","objectID":"/balanced-binary-tree/:1:0","tags":["数据结构与算法"],"title":"平衡二叉树","uri":"/balanced-binary-tree/"},{"categories":["code"],"content":"平衡二叉树的应用场景 红黑树是一种特殊的平衡二叉树。 C++ STL中的set、map，以及Linux虚拟内存的管理，都是通过红黑树去实现的。 ","date":"2023-04-24","objectID":"/balanced-binary-tree/:2:0","tags":["数据结构与算法"],"title":"平衡二叉树","uri":"/balanced-binary-tree/"},{"categories":["redis"],"content":"redis缓存击穿,缓存穿透以及缓存雪崩问题 ","date":"2023-04-24","objectID":"/redis-nocache/:0:0","tags":["redis","性能优化"],"title":"redis缓存击穿,缓存穿透以及缓存雪崩问题","uri":"/redis-nocache/"},{"categories":["redis"],"content":"什么是redis缓存击穿？ title: “redis缓存击穿,缓存穿透以及缓存雪崩问题” redis缓存击穿指的是某个key在redis中的值在某个点过期了或之前没人访问过，导致请求被转移到数据库层。这样会使数据的压力过大。 ","date":"2023-04-24","objectID":"/redis-nocache/:1:0","tags":["redis","性能优化"],"title":"redis缓存击穿,缓存穿透以及缓存雪崩问题","uri":"/redis-nocache/"},{"categories":["redis"],"content":"如何解决redis缓存击穿问题？ 可以通过互斥锁来解决。使并发的请求串行化。 public String get(key) { String value = redis.get(key); if (value == null) { //代表缓存值过期 //设置3min的超时，防止del操作失败的时候，下次缓存过期一直不能load db if (redis.setnx(key_mutex, 1, 3 * 60) == 1) { //代表设置成功 value = db.get(key); redis.set(key, value, expire_secs); redis.del(key_mutex); } else { //这个时候代表同时候的其他线程已经load db并回设到缓存了，这时候重试获取缓存值即可 sleep(50); get(key); //重试 } } return value; } 可以利用逻辑过期解决问题。 ","date":"2023-04-24","objectID":"/redis-nocache/:2:0","tags":["redis","性能优化"],"title":"redis缓存击穿,缓存穿透以及缓存雪崩问题","uri":"/redis-nocache/"},{"categories":["redis"],"content":"与缓存穿透的区别 缓存穿透是数据库里面没有这个数据，而缓存击穿是数据库里有数据。 缓存穿透解决方案是使用布隆过滤器来解决。 ","date":"2023-04-24","objectID":"/redis-nocache/:3:0","tags":["redis","性能优化"],"title":"redis缓存击穿,缓存穿透以及缓存雪崩问题","uri":"/redis-nocache/"},{"categories":["redis"],"content":"redis缓存雪崩 redis缓存雪崩时指，redis里的key在某一时间大量失效，导致大量请求打到数据库上。 解决方案是让key设置不同的过期时间，让它在不同的时间点过期。 ","date":"2023-04-24","objectID":"/redis-nocache/:4:0","tags":["redis","性能优化"],"title":"redis缓存击穿,缓存穿透以及缓存雪崩问题","uri":"/redis-nocache/"},{"categories":["redis"],"content":"参考 https://www.cnblogs.com/lvdeyinBlog/p/15774412.html https://blog.csdn.net/weixin_53604412/article/details/129057686 https://blog.csdn.net/m0_57116438/article/details/122899810 ","date":"2023-04-24","objectID":"/redis-nocache/:5:0","tags":["redis","性能优化"],"title":"redis缓存击穿,缓存穿透以及缓存雪崩问题","uri":"/redis-nocache/"},{"categories":["code"],"content":"RESTful API 关于RESTful API是什么一句话似乎说不明白，可以看看阮一峰的这2篇文章 理解RESTful架构 RESTful API设计指南 ","date":"2023-04-24","objectID":"/restful-api/:0:0","tags":["http"],"title":"RESTful API","uri":"/restful-api/"},{"categories":["mysql"],"content":"mysql修改编码支持utf8mb4 ","date":"2023-04-21","objectID":"/mysql-charsets/:0:0","tags":["mysql"],"title":"mysql修改编码支持utf8mb4","uri":"/mysql-charsets/"},{"categories":["mysql"],"content":"utf8mb4支持 如果要支持特殊表情就必须支持utf8mb4 ","date":"2023-04-21","objectID":"/mysql-charsets/:1:0","tags":["mysql"],"title":"mysql修改编码支持utf8mb4","uri":"/mysql-charsets/"},{"categories":["mysql"],"content":"修改配置文件my.cnf [client] default-character-set=utf8mb4 [mysql] default-character-set=utf8mb4 [mysqld] character-set-client-handshake=FALSE character-set-server=utf8mb4 #collation-server=utf8mb4_general_ci collation-server=utf8mb4_unicode_ci init_connect='SET NAMES utf8mb4' ","date":"2023-04-21","objectID":"/mysql-charsets/:1:1","tags":["mysql"],"title":"mysql修改编码支持utf8mb4","uri":"/mysql-charsets/"},{"categories":["mysql"],"content":"查看数据库编码 use mysql; show variables like 'char%'; +--------------------------+----------------------------+ | Variable_name | Value | +--------------------------+----------------------------+ | character_set_client | utf8mb4 | | character_set_connection | utf8mb4 | | character_set_database | utf8mb4 | | character_set_filesystem | binary | | character_set_results | utf8mb4 | | character_set_server | utf8mb4 | | character_set_system | utf8 | | character_sets_dir | /usr/share/mysql/charsets/ | +--------------------------+----------------------------+ ","date":"2023-04-21","objectID":"/mysql-charsets/:2:0","tags":["mysql"],"title":"mysql修改编码支持utf8mb4","uri":"/mysql-charsets/"},{"categories":["mysql"],"content":"mysql配置外网访问权限 ","date":"2023-04-21","objectID":"/mysql-login/:0:0","tags":["mysql"],"title":"mysql配置外网访问权限","uri":"/mysql-login/"},{"categories":["mysql"],"content":"修改配置文件 [mysqld] bind-address=0.0.0.0 ","date":"2023-04-21","objectID":"/mysql-login/:1:0","tags":["mysql"],"title":"mysql配置外网访问权限","uri":"/mysql-login/"},{"categories":["mysql"],"content":"登录mysql并修改数据库权限 mysql -u root -p mysql\u003e use mysql; mysql\u003e select user,host from user; mysql\u003e update user set host='%' where user='root'; mysql\u003e flush privileges; mysql\u003e GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION; mysql\u003e flush privileges; ","date":"2023-04-21","objectID":"/mysql-login/:2:0","tags":["mysql"],"title":"mysql配置外网访问权限","uri":"/mysql-login/"},{"categories":["ubuntu","mysql"],"content":"ubuntu安装mysql ","date":"2023-04-21","objectID":"/ubuntu-mysql/:0:0","tags":["ubuntu","mysql"],"title":"ubuntu安装mysql","uri":"/ubuntu-mysql/"},{"categories":["ubuntu","mysql"],"content":"ubuntu 安装mysql5.6.51 wget https://downloads.mysql.com/archives/get/p/23/file/mysql-server_5.6.51-1debian9_amd64.deb-bundle.tar tar -xvf mysql-server_5.6.51-1debian9_amd64.deb-bundle.tar sudo dpkg -i mysql-common_5.6.51-1debian9_amd64.deb sudo dpkg -i libmysqlclient18_5.6.51-1debian9_amd64.deb sudo dpkg -i libmysqlclient-dev_5.6.51-1debian9_amd64.deb sudo dpkg -i libmysqld-dev_5.6.51-1debian9_amd64.deb sudo dpkg -i mysql-community-client_5.6.51-1debian9_amd64.deb sudo dpkg -i mysql-client_5.6.51-1debian9_amd64.deb sudo dpkg -i mysql-community-server_5.6.51-1debian9_amd64.deb sudo dpkg -i mysql-server_5.6.51-1debian9_amd64.deb sudo dpkg -i mysql-community-bench_5.6.51-1debian9_amd64.deb sudo dpkg -i mysql-community-source_5.6.51-1debian9_amd64.deb sudo dpkg -i mysql-community-test_5.6.51-1debian9_amd64.deb sudo dpkg -i mysql-testsuite_5.6.51-1debian9_amd64.deb ","date":"2023-04-21","objectID":"/ubuntu-mysql/:1:0","tags":["ubuntu","mysql"],"title":"ubuntu安装mysql","uri":"/ubuntu-mysql/"},{"categories":["tools"],"content":"视频剪辑软件shotcut基本用法 ","date":"2023-04-21","objectID":"/shotcut/:0:0","tags":["视频"],"title":"视频剪辑软件shotcut基本用法","uri":"/shotcut/"},{"categories":["tools"],"content":"安装 ","date":"2023-04-21","objectID":"/shotcut/:1:0","tags":["视频"],"title":"视频剪辑软件shotcut基本用法","uri":"/shotcut/"},{"categories":["tools"],"content":"mac安装 官网地址：https://www.shotcut.org/ M1下载arm64的包 wget https://www.fosshub.com/Shotcut.html?dwl=shotcut-macos-ARM64-221221.dmg ","date":"2023-04-21","objectID":"/shotcut/:1:1","tags":["视频"],"title":"视频剪辑软件shotcut基本用法","uri":"/shotcut/"},{"categories":["tools"],"content":"使用注意事项 项目面板展示的才是剪辑的视频，源展示的是素材资源的视频。 ","date":"2023-04-21","objectID":"/shotcut/:2:0","tags":["视频"],"title":"视频剪辑软件shotcut基本用法","uri":"/shotcut/"},{"categories":["tools"],"content":"视频教程 https://www.bilibili.com/video/BV1J44y1L7qd/?spm_id_from=333.337.search-card.all.click\u0026vd_source=5cbf24b674b5b4183e6f626cd037b179 ","date":"2023-04-21","objectID":"/shotcut/:3:0","tags":["视频"],"title":"视频剪辑软件shotcut基本用法","uri":"/shotcut/"},{"categories":["language","golang"],"content":"Go语言中pprof的使用 pprof时go程序性能分析工具,可以分析CPU，内存，阻塞，互斥锁。 ","date":"2023-04-21","objectID":"/go-pprof/:0:0","tags":["golang"],"title":"Go语言中pprof的使用","uri":"/go-pprof/"},{"categories":["language","golang"],"content":"使用demo https://www.jianshu.com/p/01a333a29288 ","date":"2023-04-21","objectID":"/go-pprof/:1:0","tags":["golang"],"title":"Go语言中pprof的使用","uri":"/go-pprof/"},{"categories":["language","golang"],"content":"参考 https://www.zhihu.com/tardis/zm/art/371713134?source_id=1005 ","date":"2023-04-21","objectID":"/go-pprof/:2:0","tags":["golang"],"title":"Go语言中pprof的使用","uri":"/go-pprof/"},{"categories":["unity","game"],"content":"mac m1 安装Unity ","date":"2023-04-20","objectID":"/unity3d-install/:0:0","tags":["unity","mac","m1"],"title":"mac m1 安装Unity","uri":"/unity3d-install/"},{"categories":["unity","game"],"content":"下载Unity Hub https://unity.cn/releases 这里下载的版本默认是Unity Hub 3.3.0-c8 ","date":"2023-04-20","objectID":"/unity3d-install/:1:0","tags":["unity","mac","m1"],"title":"mac m1 安装Unity","uri":"/unity3d-install/"},{"categories":["devtools"],"content":"百度文心一言体验 今天收到了百度文心一言测试申请通过的短信，就体验了一把，问了几个问题。 ","date":"2023-04-17","objectID":"/chatgpt-baidu/:0:0","tags":["文心一言"],"title":"百度文心一言体验","uri":"/chatgpt-baidu/"},{"categories":["devtools"],"content":"短信内容 【百度】文心一言：你现在可以体验了，快来向我提问吧。访问链接https://yiyan.baidu.com ","date":"2023-04-17","objectID":"/chatgpt-baidu/:1:0","tags":["文心一言"],"title":"百度文心一言体验","uri":"/chatgpt-baidu/"},{"categories":["devtools"],"content":"问题 提问1：文心一言是什么？ 答: 我就是文心一言，是百度研发的知识增强大语言模型，我能够与人对话互动，回答问题，协助创作，高效便捷地帮助人们获取信息、知识和灵感。 这个回答真是简洁。 提问2：程序员如何规划个人职业生涯更好？ 答: 程序员规划个人职业生涯可以考虑以下几个方面： 了解自己的技能和兴趣：程序员需要清楚自己的技能和兴趣，这有助于他们在职业生涯中做出明智的决策。可以通过参加一些职业规划的课程或者咨询专业人士来帮助自己了解自己的技能和兴趣。 规划职业生涯：根据自己的技能和兴趣，程序员可以制定一个详细的职业生涯规划，包括职业目标、职业发展路径、学习和成长计划等。 学习新技能：程序员需要不断学习新技能，以适应行业的变化和需求。可以通过参加培训课程、自学、参加编程竞赛等方式来提高自己的技能。 建立人际关系：程序员需要建立良好的人际关系，这有助于他们获得职业机会和资源。可以通过参加技术社区、参加行业会议、加入专业组织等方式来扩展人际关系。 管理职业生涯：程序员需要管理自己的职业生涯，包括制定职业发展计划、制定目标、评估进展等。可以通过学习职业规划和管理的知识来帮助自己更好地管理职业生涯。 保持灵活性：程序员需要保持灵活性，以适应职业生涯中的变化和挑战。可以通过定期审视自己的职业规划、接受新的挑战和机会来保持职业生涯的稳定性和灵活性。 总之，程序员规划个人职业生涯需要考虑多个方面，包括了解自己的技能和兴趣、制定职业生涯规划、学习新技能、建立人际关系、管理职业生涯、保持灵活性等。 提问3：有什么建议给中年程序员吗？ 答: 以下是一些中年程序员在职业生涯中可能需要的建议： 保持学习和更新知识：中年程序员可能需要不断学习和更新自己的技能和知识，以保持竞争力并应对技术的变化。建议定期参加培训、研讨会和在线课程，以保持对新技术和最新趋势的了解。 关注健康：中年程序员可能需要关注自己的健康状况，包括身体健康和心理健康。建议保持适量的锻炼、健康饮食和良好的睡眠习惯，以保持身体和心理健康。 管理压力：中年程序员可能会面临工作压力和挑战，建议学会管理压力，寻找减压方法，如冥想、深呼吸、瑜伽等。同时，也可以与同事、家人和朋友交流，寻求支持和帮助。 寻找新的机会：中年程序员可能需要考虑新的职业机会，以保持职业生涯的活力和动力。建议研究新兴领域、发掘自己的潜力、与其他行业的专业人士交流等。 建立人际关系：中年程序员可能需要建立新的人际关系，以扩展自己的社交圈子。建议积极参加社交活动、加入专业组织和俱乐部、与同行建立联系等。 总之，中年程序员需要关注自己的职业发展，并采取积极的措施来保持自己的竞争力和健康状况。 ","date":"2023-04-17","objectID":"/chatgpt-baidu/:2:0","tags":["文心一言"],"title":"百度文心一言体验","uri":"/chatgpt-baidu/"},{"categories":["devtools"],"content":"文心一言写程序 ","date":"2023-04-17","objectID":"/chatgpt-baidu/:3:0","tags":["文心一言"],"title":"百度文心一言体验","uri":"/chatgpt-baidu/"},{"categories":["devtools"],"content":"提问4：用c++写一个程序，使用折半查找法进行排序 以下是使用C++实现折半查找法进行排序的示例代码： #include \u003ciostream\u003e #include \u003cvector\u003e using namespace std; // 折半查找函数 int binarySearch(vector\u003cint\u003e\u0026 nums, int target) { int left = 0, right = nums.size() - 1; while (left \u003c= right) { int mid = left + (right - left) / 2; if (nums[mid] == target) { return mid; } else if (nums[mid] \u003c target) { left = mid + 1; } else { right = mid - 1; } } return -1; } int main() { vector\u003cint\u003e nums = {1, 3, 5, 7, 9}; int target = 7; int index = binarySearch(nums, target); if (index != -1) { cout \u003c\u003c \"Target found at index \" \u003c\u003c index \u003c\u003c endl; } else { cout \u003c\u003c \"Target not found\" \u003c\u003c endl; } return 0; } 在上面的代码中，我们定义了一个名为binarySearch的函数，用于实现折半查找法。该函数接受一个整数数组nums和一个目标整数target作为参数，返回目标整数在数组中的索引，如果目标整数不在数组中，则返回-1。 在main函数中，我们定义了一个整数数组nums和一个目标整数target，并调用binarySearch函数进行查找。如果目标整数在数组中，则输出其索引；否则输出\"Target not found\"。 需要注意的是，折半查找法的时间复杂度为O(log n)，其中n为数组的长度。在实际应用中，可以根据具体情况选择不同的排序算法，以提高程序的性能。 ","date":"2023-04-17","objectID":"/chatgpt-baidu/:3:1","tags":["文心一言"],"title":"百度文心一言体验","uri":"/chatgpt-baidu/"},{"categories":["devtools"],"content":"总结 简单地问了一些很抽象的问题，文心一言也回答得似乎是那么一回事，似乎在平时还是可以对自己思考问题起到一定的辅助作用。 chatgpt可以写程序，文心一言也是可以，通义千文也不用说，估计也可以，身为程序员的你，有没有担心会失业？不管怎么说，用好这个功能，许多代码逻辑是不是就有工具帮忙了？ ","date":"2023-04-17","objectID":"/chatgpt-baidu/:4:0","tags":["文心一言"],"title":"百度文心一言体验","uri":"/chatgpt-baidu/"},{"categories":["language"],"content":"使用python开发一个简单的邮件发送脚本 废话不多说，直接上代码demo # -*- coding: utf-8 -*- import time import socket import httplib import json import datetime import os import commands import subprocess import sys #========================================== # 导入smtplib和MIMEText #========================================== from email.mime.text import MIMEText import smtplib #========================================== # send to,split by',' #========================================== mailto_list=[\"xxx@qq.com\"] #========================================== #========================================== mail_host=\"smtp.qq.com\" mail_user=\"QQ number\" mail_pass=\"QQ pass key\" mail_postfix=\"qq.com\" #========================================== # 发送邮件 #========================================== def send_mail(to_list,sub,content): ''''' to_list:des email address sub:subject content:content send_mail(\"qq@qq.com\",\"sub\",\"content\") ''' me=mail_user+\"\u003c\"+mail_user+\"@\"+mail_postfix+\"\u003e\" msg = MIMEText(content) msg['Subject'] = sub msg['From'] = me msg['To'] = \";\".join(to_list) try: s = smtplib.SMTP() s.connect(mail_host) s.starttls() s.login(mail_user,mail_pass) s.sendmail(me, to_list, msg.as_string()) s.close() print(\"ok\") return True except Exception, e: print(e) return False if __name__ == \"__main__\": print os.path.abspath(os.curdir) argc = len(sys.argv) if argc != 3: print(\"argc:\",argc) sys.exit() title = sys.argv[1] body = sys.argv[2] print(\"title,body:\",title,body) if title != \"\" and body != \"\": send_mail(mailto_list,title,body) #send_mail(mailto_list,\"在线人数\",players.decode(\"ascii\").encode(\"utf-8\")) ","date":"2023-04-17","objectID":"/python_mail/:0:0","tags":["python","mail"],"title":"使用python开发一个简单的邮件发送脚本","uri":"/python_mail/"},{"categories":["mac","vim"],"content":"mac中安ctags取代原有ctags解决Vim报错问题 ","date":"2023-04-15","objectID":"/mac-vim-ctags/:0:0","tags":["mac","vim","ctags","m1"],"title":"mac中安ctags取代原有ctags解决Vim报错问题","uri":"/mac-vim-ctags/"},{"categories":["mac","vim"],"content":"报错提示 Tagbar: Ctags doesn't seem to be Exuberant Ctags! BSD ctags will NOT WORK. Please download Exuberant Ctags from ctags.sourceforge.net and install it in a directory in your $PATH or set g:tagbar_ctags_bin. Executed command: \"'/usr/bin/ctags' --version\" Command output: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ctags: illegal option -- - usage: ctags [-BFadtuwvx] [-f tagsfile] file ... Exit code: 1 Press ENTER or type command to continue ","date":"2023-04-15","objectID":"/mac-vim-ctags/:1:0","tags":["mac","vim","ctags","m1"],"title":"mac中安ctags取代原有ctags解决Vim报错问题","uri":"/mac-vim-ctags/"},{"categories":["mac","vim"],"content":"brew install brew install ctags ","date":"2023-04-15","objectID":"/mac-vim-ctags/:2:0","tags":["mac","vim","ctags","m1"],"title":"mac中安ctags取代原有ctags解决Vim报错问题","uri":"/mac-vim-ctags/"},{"categories":["mac","vim"],"content":"修改vim配置 let Tlist_Ctags_Cmd = '/opt/homebrew/bin/ctags' \"Tagbar let g:tagbar_ctags_bin = '/opt/homebrew/bin/ctags' ","date":"2023-04-15","objectID":"/mac-vim-ctags/:3:0","tags":["mac","vim","ctags","m1"],"title":"mac中安ctags取代原有ctags解决Vim报错问题","uri":"/mac-vim-ctags/"},{"categories":["mac","vim"],"content":"下载ctags(M1编译安装报错） mac m1安装包错这里不推荐这种方法了。喜欢折腾的同学可以深入研究一下。 访问下面的网站进行下载：https://ctags.sourceforge.net/ wget https://udomain.dl.sourceforge.net/project/ctags/ctags/5.8/ctags-5.8.tar.gz 安装报错提示 include/dirent.h:80:2: error: use of undeclared identifier 'unused' ","date":"2023-04-15","objectID":"/mac-vim-ctags/:4:0","tags":["mac","vim","ctags","m1"],"title":"mac中安ctags取代原有ctags解决Vim报错问题","uri":"/mac-vim-ctags/"},{"categories":["mac","vim"],"content":"参考 https://blog.csdn.net/Auris/article/details/93969343 ","date":"2023-04-15","objectID":"/mac-vim-ctags/:5:0","tags":["mac","vim","ctags","m1"],"title":"mac中安ctags取代原有ctags解决Vim报错问题","uri":"/mac-vim-ctags/"},{"categories":["c++"],"content":"c++17新特性 ","date":"2023-04-13","objectID":"/cpp17/:0:0","tags":["c++"],"title":"c++17新特性","uri":"/cpp17/"},{"categories":["c++"],"content":"构造函数模板推导 ","date":"2023-04-13","objectID":"/cpp17/:1:0","tags":["c++"],"title":"c++17新特性","uri":"/cpp17/"},{"categories":["c++"],"content":"结构化绑定 ","date":"2023-04-13","objectID":"/cpp17/:2:0","tags":["c++"],"title":"c++17新特性","uri":"/cpp17/"},{"categories":["c++"],"content":"if-switch语句初始化 ","date":"2023-04-13","objectID":"/cpp17/:3:0","tags":["c++"],"title":"c++17新特性","uri":"/cpp17/"},{"categories":["c++"],"content":"内联变量 ","date":"2023-04-13","objectID":"/cpp17/:4:0","tags":["c++"],"title":"c++17新特性","uri":"/cpp17/"},{"categories":["c++"],"content":"折叠表达式 ","date":"2023-04-13","objectID":"/cpp17/:5:0","tags":["c++"],"title":"c++17新特性","uri":"/cpp17/"},{"categories":["c++"],"content":"constexpr lambda表达式 ","date":"2023-04-13","objectID":"/cpp17/:6:0","tags":["c++"],"title":"c++17新特性","uri":"/cpp17/"},{"categories":["c++"],"content":"namespace嵌套 ","date":"2023-04-13","objectID":"/cpp17/:7:0","tags":["c++"],"title":"c++17新特性","uri":"/cpp17/"},{"categories":["c++"],"content":"____has_include预处理表达式 ","date":"2023-04-13","objectID":"/cpp17/:8:0","tags":["c++"],"title":"c++17新特性","uri":"/cpp17/"},{"categories":["c++"],"content":"在lambda表达式用*this捕获对象副本 ","date":"2023-04-13","objectID":"/cpp17/:9:0","tags":["c++"],"title":"c++17新特性","uri":"/cpp17/"},{"categories":["c++"],"content":"新增Attribute ","date":"2023-04-13","objectID":"/cpp17/:10:0","tags":["c++"],"title":"c++17新特性","uri":"/cpp17/"},{"categories":["c++"],"content":"字符串转换 ","date":"2023-04-13","objectID":"/cpp17/:11:0","tags":["c++"],"title":"c++17新特性","uri":"/cpp17/"},{"categories":["c++"],"content":"std::variant ","date":"2023-04-13","objectID":"/cpp17/:12:0","tags":["c++"],"title":"c++17新特性","uri":"/cpp17/"},{"categories":["c++"],"content":"std::optional ","date":"2023-04-13","objectID":"/cpp17/:13:0","tags":["c++"],"title":"c++17新特性","uri":"/cpp17/"},{"categories":["c++"],"content":"std::any ","date":"2023-04-13","objectID":"/cpp17/:14:0","tags":["c++"],"title":"c++17新特性","uri":"/cpp17/"},{"categories":["c++"],"content":"std::apply ","date":"2023-04-13","objectID":"/cpp17/:15:0","tags":["c++"],"title":"c++17新特性","uri":"/cpp17/"},{"categories":["c++"],"content":"std::make_from_tuple ","date":"2023-04-13","objectID":"/cpp17/:16:0","tags":["c++"],"title":"c++17新特性","uri":"/cpp17/"},{"categories":["c++"],"content":"as_const ","date":"2023-04-13","objectID":"/cpp17/:17:0","tags":["c++"],"title":"c++17新特性","uri":"/cpp17/"},{"categories":["c++"],"content":"std::string_view ","date":"2023-04-13","objectID":"/cpp17/:18:0","tags":["c++"],"title":"c++17新特性","uri":"/cpp17/"},{"categories":["c++"],"content":"file_system ","date":"2023-04-13","objectID":"/cpp17/:19:0","tags":["c++"],"title":"c++17新特性","uri":"/cpp17/"},{"categories":["c++"],"content":"std::shared_mutex ","date":"2023-04-13","objectID":"/cpp17/:20:0","tags":["c++"],"title":"c++17新特性","uri":"/cpp17/"},{"categories":["c++"],"content":"编译器支持情况 https://en.cppreference.com/w/cpp/compiler_support/17 ","date":"2023-04-13","objectID":"/cpp17/:21:0","tags":["c++"],"title":"c++17新特性","uri":"/cpp17/"},{"categories":["c++"],"content":"参考 https://zhuanlan.zhihu.com/p/165640868 ","date":"2023-04-13","objectID":"/cpp17/:22:0","tags":["c++"],"title":"c++17新特性","uri":"/cpp17/"},{"categories":["c++"],"content":"c++14新特性 ","date":"2023-04-13","objectID":"/cpp14/:0:0","tags":["c++"],"title":"c++14新特性","uri":"/cpp14/"},{"categories":["c++"],"content":"函数返回值推导 ","date":"2023-04-13","objectID":"/cpp14/:1:0","tags":["c++"],"title":"c++14新特性","uri":"/cpp14/"},{"categories":["c++"],"content":"lambda参数auto ","date":"2023-04-13","objectID":"/cpp14/:2:0","tags":["c++"],"title":"c++14新特性","uri":"/cpp14/"},{"categories":["c++"],"content":"变量模板 ","date":"2023-04-13","objectID":"/cpp14/:3:0","tags":["c++"],"title":"c++14新特性","uri":"/cpp14/"},{"categories":["c++"],"content":"别名模板 ","date":"2023-04-13","objectID":"/cpp14/:4:0","tags":["c++"],"title":"c++14新特性","uri":"/cpp14/"},{"categories":["c++"],"content":"constexpr的限制 ","date":"2023-04-13","objectID":"/cpp14/:5:0","tags":["c++"],"title":"c++14新特性","uri":"/cpp14/"},{"categories":["c++"],"content":"[[deprecated]]标记 ","date":"2023-04-13","objectID":"/cpp14/:6:0","tags":["c++"],"title":"c++14新特性","uri":"/cpp14/"},{"categories":["c++"],"content":"二进制字面量与整形字面量分隔符 ","date":"2023-04-13","objectID":"/cpp14/:7:0","tags":["c++"],"title":"c++14新特性","uri":"/cpp14/"},{"categories":["c++"],"content":"std::make_unique ","date":"2023-04-13","objectID":"/cpp14/:8:0","tags":["c++"],"title":"c++14新特性","uri":"/cpp14/"},{"categories":["c++"],"content":"std::shared_timed_mutex与std::shared_lock ","date":"2023-04-13","objectID":"/cpp14/:9:0","tags":["c++"],"title":"c++14新特性","uri":"/cpp14/"},{"categories":["c++"],"content":"std:integer_sequence ","date":"2023-04-13","objectID":"/cpp14/:10:0","tags":["c++"],"title":"c++14新特性","uri":"/cpp14/"},{"categories":["c++"],"content":"std:exchange ","date":"2023-04-13","objectID":"/cpp14/:11:0","tags":["c++"],"title":"c++14新特性","uri":"/cpp14/"},{"categories":["c++"],"content":"std:quoted ","date":"2023-04-13","objectID":"/cpp14/:12:0","tags":["c++"],"title":"c++14新特性","uri":"/cpp14/"},{"categories":["c++"],"content":"编译器支持情况 https://en.cppreference.com/w/cpp/compiler_support/14 ","date":"2023-04-13","objectID":"/cpp14/:13:0","tags":["c++"],"title":"c++14新特性","uri":"/cpp14/"},{"categories":["c++"],"content":"参考 https://zhuanlan.zhihu.com/p/165389083 ","date":"2023-04-13","objectID":"/cpp14/:14:0","tags":["c++"],"title":"c++14新特性","uri":"/cpp14/"},{"categories":["c++"],"content":"c++11新特性 ","date":"2023-04-13","objectID":"/cpp11/:0:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"auto auto类型推导使得代码更加简洁。 auto a = 11; ","date":"2023-04-13","objectID":"/cpp11/:1:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"decltype auto a = 11; decltype(a) b = 15; ","date":"2023-04-13","objectID":"/cpp11/:2:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"列表初始化 https://zhuanlan.zhihu.com/p/137851769 ","date":"2023-04-13","objectID":"/cpp11/:3:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"右值引用 ","date":"2023-04-13","objectID":"/cpp11/:4:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"std:function 头文件\u003cstd:functional\u003e https://en.cppreference.com/w/cpp/utility/functional/function #include\u003ciostream\u003e #include\u003cfunctional\u003e int add(int a,int b) { return a + b; } int main() { function\u003cint(int,int)\u003e fAdd = add; int c = fAdd(1,2); cout \u003c\u003c 1 \u003c\u003c \" + \" \u003c\u003c 2 \u003c\u003c \" = \" \u003c\u003c c; return 0; } ","date":"2023-04-13","objectID":"/cpp11/:5:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"std:bind 头文件\u003cstd:functional\u003e std::bind将可调用参数及其对象进行绑定。 绑定后的结果可以用std:function进行保存，并延迟调用到任何我们需要的时候。 学习资料1: https://zhuanlan.zhihu.com/p/354765449 学习资料2: https://en.cppreference.com/w/cpp/utility/functional/bind ","date":"2023-04-13","objectID":"/cpp11/:6:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"demo #include \u003ciostream\u003e #include \u003cvector\u003e #include \u003cfunctional\u003e using namespace std; int add(int a,int b) { return a + b; } void testBind() { auto f1 = std::bind(add,std::placeholders::_1,std::placeholders::_2); int c = f1(3,4); cout \u003c\u003c 3 \u003c\u003c \" + \" \u003c\u003c 4 \u003c\u003c \" = \" \u003c\u003c c \u003c\u003c endl; } int main() { testBind(); return 0; } ","date":"2023-04-13","objectID":"/cpp11/:6:1","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"lambda 学习资料: https://en.cppreference.com/w/cpp/language/lambda ","date":"2023-04-13","objectID":"/cpp11/:7:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"模版的改进 ","date":"2023-04-13","objectID":"/cpp11/:8:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"并发 c++11线程相关知识：https://zhuanlan.zhihu.com/p/137914574 ","date":"2023-04-13","objectID":"/cpp11/:9:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"std:thread 学习资源: https://zhuanlan.zhihu.com/p/389140084 重要函数 explicit thread(Fn\u0026\u0026fn, Args\u0026\u0026…args)：初始化构造函数，创建一个带函数调用参数的thread，这个线程是可joinable的； thread() noexcept：默认构造函数，创建一个空的thread执行对象; thread(const thread\u0026) = delete：拷贝构造函数被禁用，意味着thread对象不可拷贝构造； thread(thread\u0026\u0026 x) noexcept：移动构造函数，调用成功之后，x不代表任何thread执行对象； get_id()：获取线程的ID，它将返回一个类型为std:🧵:id的对象。 joinable()：检查线程是否可被join。 detach()：将当前线程对象所代表的执行实例与此线程对象分离，使得线程可以单独执行。 swap()：交换两个线程对象所代表的底层句柄，参数是两个线程对象； std::this_thread::getid()：获取当前线程的ID； std::this_thread::yield()：当前线程放弃执行，操作系统调度另一线程继续执行； sleep_until()：线程休眠至某个指定的时刻，才被重新唤醒； sleep_for()： 线程休眠某个指定的时间片，才被重新唤醒； thread中的互斥量 std:mutex 独占式的互斥量 std:recursive_mutex 递归式互斥量 std:timed_mutex 允许超时的独占式互斥量 std:recursive_timed_mutex 允许超时的递归式互斥量 ","date":"2023-04-13","objectID":"/cpp11/:9:1","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"std:mutex 学习资料: https://zhuanlan.zhihu.com/p/598993031 ","date":"2023-04-13","objectID":"/cpp11/:9:2","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"std:lock 学习资料 https://en.cppreference.com/w/cpp/thread/lock ","date":"2023-04-13","objectID":"/cpp11/:9:3","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"std:atomic https://en.cppreference.com/w/cpp/atomic/atomic ","date":"2023-04-13","objectID":"/cpp11/:9:4","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"std:call_once https://en.cppreference.com/w/cpp/thread/call_once https://blog.csdn.net/u012372584/article/details/96867805 ","date":"2023-04-13","objectID":"/cpp11/:9:5","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"volatile 学习资料: https://zhuanlan.zhihu.com/p/62060524 当要求使用 volatile 声明的变量的值的时候，系统总是重新从它所在的内存读取数据，即使它前面的指令刚刚从该处读取过数据。 volatile int a = 10; ","date":"2023-04-13","objectID":"/cpp11/:9:6","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"std:condition_variable ","date":"2023-04-13","objectID":"/cpp11/:9:7","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"std:future ","date":"2023-04-13","objectID":"/cpp11/:9:8","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"async 学习资料 https://zhuanlan.zhihu.com/p/349193932 https://blog.csdn.net/lijinqi1987/article/details/78909479 ","date":"2023-04-13","objectID":"/cpp11/:9:9","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"智能指针 c++新特性之智能指针：https://zhuanlan.zhihu.com/p/137958974 ","date":"2023-04-13","objectID":"/cpp11/:10:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"std:shared_ptr ","date":"2023-04-13","objectID":"/cpp11/:10:1","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"std:weak_ptr ","date":"2023-04-13","objectID":"/cpp11/:10:2","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"std:unique_ptr ","date":"2023-04-13","objectID":"/cpp11/:10:3","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"基于范围的for循环 void testFor() { cout \u003c\u003c endl \u003c\u003c \"2. testFor---start\" \u003c\u003c endl; vector\u003cint\u003e v; for (int i=0;i\u003c5;++i) { v.push_back(i); } for (auto it = v.begin();it != v.end(); it++) { cout\u003c\u003c \"*it:\" \u003c\u003c *it \u003c\u003c endl; } for(auto i:v) { cout \u003c\u003c \"newFor:\" \u003c\u003c i \u003c\u003c endl; } cout \u003c\u003c endl \u003c\u003c \"2. testFor---end\" \u003c\u003c endl; } ","date":"2023-04-13","objectID":"/cpp11/:11:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"委托构造函数 ","date":"2023-04-13","objectID":"/cpp11/:12:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"继承构造函数 ","date":"2023-04-13","objectID":"/cpp11/:13:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"nullptr ","date":"2023-04-13","objectID":"/cpp11/:14:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"final ","date":"2023-04-13","objectID":"/cpp11/:15:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"override ","date":"2023-04-13","objectID":"/cpp11/:16:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"default ","date":"2023-04-13","objectID":"/cpp11/:17:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"delete ","date":"2023-04-13","objectID":"/cpp11/:18:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"explicit ","date":"2023-04-13","objectID":"/cpp11/:19:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"const ","date":"2023-04-13","objectID":"/cpp11/:20:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"constexpr ","date":"2023-04-13","objectID":"/cpp11/:21:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"enum class ","date":"2023-04-13","objectID":"/cpp11/:22:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"非受限联合体 ","date":"2023-04-13","objectID":"/cpp11/:23:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"sizeof c++11 使用sizeof不用实例化一个对象就可以计算出大小了 truct A { int data[10]; int a; }; int main() { cout \u003c\u003c \"size \" \u003c\u003c sizeof(A::data) \u003c\u003c endl; return 0; } ","date":"2023-04-13","objectID":"/cpp11/:24:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"assertion c++11引入static_assert声明，用于在编译期间检查， 如果第一个参数值为false，则打印message，编译失败。 assert(true/false,message); ","date":"2023-04-13","objectID":"/cpp11/:25:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"自定义字面量 ","date":"2023-04-13","objectID":"/cpp11/:26:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"内存对齐 https://zhuanlan.zhihu.com/p/139520591 ","date":"2023-04-13","objectID":"/cpp11/:27:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"thread_local ","date":"2023-04-13","objectID":"/cpp11/:28:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"基础数值类型 c++11增加了几种数据类型: long long char16_t char32_t ","date":"2023-04-13","objectID":"/cpp11/:29:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"随机数功能 #include \u003ctime.h\u003e #include \u003ciostream\u003e #include \u003crandom\u003e using namespace std; int main() { std::default_random_engine random(time(nullptr)); std::uniform_int_distribution\u003cint\u003e int_dis(0, 100); // 整数均匀分布 std::uniform_real_distribution\u003cfloat\u003e real_dis(0.0, 1.0); // 浮点数均匀分布 for (int i = 0; i \u003c 10; ++i) { cout \u003c\u003c int_dis(random) \u003c\u003c ' '; } cout \u003c\u003c endl; for (int i = 0; i \u003c 10; ++i) { cout \u003c\u003c real_dis(random) \u003c\u003c ' '; } cout \u003c\u003c endl; return 0; } 输出 38 100 93 7 66 0 68 99 41 7 0.232202 0.617716 0.959241 0.970859 0.230406 0.430682 0.477359 0.971858 0.0171148 0.64863 代码中举例的是整数均匀分布和浮点数均匀分布 c++11提供的概率分布类型还有好多，例如伯努利分布、正态分布等，具体可以见最后的参考资料。 ","date":"2023-04-13","objectID":"/cpp11/:30:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"正则表达式 c++11引入了regex库，更好地支持正则表达式 ","date":"2023-04-13","objectID":"/cpp11/:31:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"chrono c++11关于时间引入了chrono库，功能强大，chrono主要有3点： duration time_point clocks ","date":"2023-04-13","objectID":"/cpp11/:32:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"新增数据结构 std::forward_list std:unordered_set std:unordered_map std:array 头文件 支持迭代器 https://blog.csdn.net/qq_38410730/article/details/102802239 std:tuple https://en.cppreference.com/w/cpp/utility/tuple ","date":"2023-04-13","objectID":"/cpp11/:33:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"新增加算法 all_of:：检测表达式是否对范围[first, last)中所有元素都返回true，如果都满足，则返回true std::vector\u003cint\u003e v(10, 2); if (std::all_of(v.cbegin(), v.cend(), [](int i) { return i % 2 == 0; })) { std::cout \u003c\u003c \"All numbers are even\\n\"; } any_of none_of find_if_not copy_if itoa:对容器内的元素按序递增。 ","date":"2023-04-13","objectID":"/cpp11/:34:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"c++11各个编译器的支持情况 https://en.cppreference.com/w/cpp/compiler_support/11 ","date":"2023-04-13","objectID":"/cpp11/:35:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"总结 这里知识简单罗列了c++11新增的一些特性，后续会专门测试并记录一些各个特性的具体使用情况。 ","date":"2023-04-13","objectID":"/cpp11/:36:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["c++"],"content":"参考 https://zhuanlan.zhihu.com/p/139515439 ","date":"2023-04-13","objectID":"/cpp11/:37:0","tags":["c++"],"title":"c++11新特性","uri":"/cpp11/"},{"categories":["git"],"content":"简单git服务器的搭建 ","date":"2023-04-12","objectID":"/git-server/:0:0","tags":["git"],"title":"简单git服务器的搭建","uri":"/git-server/"},{"categories":["git"],"content":"为什么要搭建自己的git服务器 github,gitee等等代码托管平台都是可以用的，但是也有他们的限制。如果只是自己用，完全可以自己搭建自己的git服务器。 ","date":"2023-04-12","objectID":"/git-server/:1:0","tags":["git"],"title":"简单git服务器的搭建","uri":"/git-server/"},{"categories":["git"],"content":"步骤 ","date":"2023-04-12","objectID":"/git-server/:2:0","tags":["git"],"title":"简单git服务器的搭建","uri":"/git-server/"},{"categories":["git"],"content":"创建用户和组 groupadd git useradd git -g git ","date":"2023-04-12","objectID":"/git-server/:2:1","tags":["git"],"title":"简单git服务器的搭建","uri":"/git-server/"},{"categories":["git"],"content":"创建用户ssh密钥权限目录及权限，并授权组和用户 mkdir /home/git/.ssh cd /home/git/ chown -R git:git .ssh cd .ssh/ cp ~/.ssh/authorized_keys ./ chown -R git:git authorized_keys ","date":"2023-04-12","objectID":"/git-server/:2:2","tags":["git"],"title":"简单git服务器的搭建","uri":"/git-server/"},{"categories":["git"],"content":"选择一个项目的目录，并创建一个测试的git仓库 这里指定为/srv目录 cd /srv git init --bare test.git chown -R git:git test.git/ ","date":"2023-04-12","objectID":"/git-server/:2:3","tags":["git"],"title":"简单git服务器的搭建","uri":"/git-server/"},{"categories":["git"],"content":"获取访问地址 假设ip为: 192.168.2.188,那么clone地址为: git clone git@192.168.2.188:/srv/test.git ","date":"2023-04-12","objectID":"/git-server/:2:4","tags":["git"],"title":"简单git服务器的搭建","uri":"/git-server/"},{"categories":["git"],"content":"禁用git账号的登录 修改文件/etc/passwd git❌1001:1001:git-user,,,:/home/git:/bin/bash 修改为 git❌1001:1001:git-user,,,:/home/git:/user/bin/git-shell ","date":"2023-04-12","objectID":"/git-server/:2:5","tags":["git"],"title":"简单git服务器的搭建","uri":"/git-server/"},{"categories":["git"],"content":"总结 如果自己有自己的开发服务器，不防搭建一个自己的git服务器,方便自己的开发工作，过程并不复杂。 ","date":"2023-04-12","objectID":"/git-server/:3:0","tags":["git"],"title":"简单git服务器的搭建","uri":"/git-server/"},{"categories":["devtools","code"],"content":"Mac M1中使用lldb调试c++ gdb命令的使用对于学习linux c/c++同学而言非常重要.最近准备在mac中使用gdb来调试c++程序时，发现m1不支持gdb取而代之的是lldb。于是收集了一下相关用法，记录了这个笔记。 ","date":"2023-04-11","objectID":"/mac-m1-lldb/:0:0","tags":["c++","lldb","m1"],"title":"Mac M1中使用lldb调试c++","uri":"/mac-m1-lldb/"},{"categories":["devtools","code"],"content":"使用-g参数 使用lldb之前,编译程序加-g参数,这样可以看到源码而不是汇编代码。 ","date":"2023-04-11","objectID":"/mac-m1-lldb/:1:0","tags":["c++","lldb","m1"],"title":"Mac M1中使用lldb调试c++","uri":"/mac-m1-lldb/"},{"categories":["devtools","code"],"content":"常用指令 ","date":"2023-04-11","objectID":"/mac-m1-lldb/:2:0","tags":["c++","lldb","m1"],"title":"Mac M1中使用lldb调试c++","uri":"/mac-m1-lldb/"},{"categories":["devtools","code"],"content":"break/b break/b 设置断点，也就是程序暂停的地方。 ","date":"2023-04-11","objectID":"/mac-m1-lldb/:2:1","tags":["c++","lldb","m1"],"title":"Mac M1中使用lldb调试c++","uri":"/mac-m1-lldb/"},{"categories":["devtools","code"],"content":"run/r run/r 启动目标程序，如果遇到断点则暂停。 ","date":"2023-04-11","objectID":"/mac-m1-lldb/:2:2","tags":["c++","lldb","m1"],"title":"Mac M1中使用lldb调试c++","uri":"/mac-m1-lldb/"},{"categories":["devtools","code"],"content":"step/s step/s 进入到下一条指令的函数内部。 ","date":"2023-04-11","objectID":"/mac-m1-lldb/:2:3","tags":["c++","lldb","m1"],"title":"Mac M1中使用lldb调试c++","uri":"/mac-m1-lldb/"},{"categories":["devtools","code"],"content":"backtrace/bt backtrace/bt 查看当前有效的函数 ","date":"2023-04-11","objectID":"/mac-m1-lldb/:2:4","tags":["c++","lldb","m1"],"title":"Mac M1中使用lldb调试c++","uri":"/mac-m1-lldb/"},{"categories":["devtools","code"],"content":"frame/f frame/f 查看道歉栈的内容，可以通过frame/f arg进入特定的frame ","date":"2023-04-11","objectID":"/mac-m1-lldb/:2:5","tags":["c++","lldb","m1"],"title":"Mac M1中使用lldb调试c++","uri":"/mac-m1-lldb/"},{"categories":["devtools","code"],"content":"next/n next/n 进入到箭头指向行 ","date":"2023-04-11","objectID":"/mac-m1-lldb/:2:6","tags":["c++","lldb","m1"],"title":"Mac M1中使用lldb调试c++","uri":"/mac-m1-lldb/"},{"categories":["devtools","code"],"content":"continue/c continue/c 继续运行直到遇到断点 ","date":"2023-04-11","objectID":"/mac-m1-lldb/:2:7","tags":["c++","lldb","m1"],"title":"Mac M1中使用lldb调试c++","uri":"/mac-m1-lldb/"},{"categories":["devtools","code"],"content":"参考 https://zhuanlan.zhihu.com/p/106415182 ","date":"2023-04-11","objectID":"/mac-m1-lldb/:3:0","tags":["c++","lldb","m1"],"title":"Mac M1中使用lldb调试c++","uri":"/mac-m1-lldb/"},{"categories":["code"],"content":"c++ STL 学习c++就没法绕过标准模版库STL。 ","date":"2023-04-11","objectID":"/cpp-stl/:0:0","tags":["c++"],"title":"c++ STL","uri":"/cpp-stl/"},{"categories":["code"],"content":"STL6大部件 容器（Containers） 分配器（Allocators） 算法（Algorithm） 迭代器（Iterators） 适配器（Adapters） 仿函数（Functors） ","date":"2023-04-11","objectID":"/cpp-stl/:1:0","tags":["c++"],"title":"c++ STL","uri":"/cpp-stl/"},{"categories":["code"],"content":"STL的基本使用 ","date":"2023-04-11","objectID":"/cpp-stl/:2:0","tags":["c++"],"title":"c++ STL","uri":"/cpp-stl/"},{"categories":["code"],"content":"vector vector是一种变长数组 vector\u003c类型\u003e 变量名; 类型名可以是int、double、char、string、struct,也可以是vector、set、queue等容器。 vector\u003cint\u003e name; vector\u003cdouble\u003e name; vector\u003cchar\u003e name; vector\u003cstring\u003e name; vector\u003cstruct node\u003e name; vector\u003cvector\u003cint\u003e \u003e name; vector\u003cvector\u003cint\u003e \u003e name;中\u003e\u003e之间要有空格 才行。 定义一个二维变长数组 vector\u003cint\u003e arr[10]; // 二维变长数组。 注意：低维是高维的地址。 二维数组的一维形式就是地址。 vector一般有2种访问形式 通过下标访问 #include \u003ciostream\u003e #include \u003cvector\u003e using namespace std; int main() { vector v; v.push_back(1); cout \u003c\u003c v[0] \u003c\u003c endl; return 0; } 通过迭代器访问 void testVectorIterator() { vector\u003cint\u003e v; for (int i=0;i\u003c5;++i) { v.push_back(i+10); } vector\u003cint\u003e::iterator it = v.begin(); // it[i] 等价于*(it + i) for (int i=0;i\u003cv.size();++i) { cout \u003c\u003c \"vector::it-\" \u003c\u003c i \u003c\u003c \":\" \u003c\u003c it[i] \u003c\u003c endl; } // 优雅写法 for (vector\u003cint\u003e::iterator it2 = v.begin(); it2 != v.end();it2++) { cout \u003c\u003c *it2 \u003c\u003c \" \"; } cout \u003c\u003c endl \u003c\u003c \"c++11:\"; for (auto it2 = v.begin(); it2 != v.end();it2++) { cout \u003c\u003c *it2 \u003c\u003c \" \"; } } vector常用函数 push_back() 以前还要为定长数组内存分配而苦恼时，现在只需要无脑push_back() pop_back() size() 返回元素个数,时间复杂度为O(1) clear() 一键清空vector中的所有元素时间复杂度为O(N),其中N为vector中元素个数。 insert() 在指定位置插入元素 v.insert(v.begin()+2,-1); //将-1插入v[2]的位置 erase() //删除v[3] v.erase(v.begin()+3); //删除v[1]-v[4] v.erase(v.begin()+1,v.begin()+4); vector常见用途 存储数据 用邻接表存储图 ","date":"2023-04-11","objectID":"/cpp-stl/:2:1","tags":["c++"],"title":"c++ STL","uri":"/cpp-stl/"},{"categories":["code"],"content":"set 定义 是一个内部有序，不存在重复元素的容器。 头文件 #include\u003cset\u003e using namespace std; set的定义 set\u003c类型名\u003e变量名; set容器内元素的访问 只能通过迭代器来访问。 set\u003cint\u003e::iterator it; set\u003cchar\u003e::iterator it; 注意：除了vector和string之外的STL容器都不支持*(it+i)的访问方式 set常用函数 insert(value) set\u003cchar\u003e st; st.insert('A'); st.insert('B'); st.insert('C'); find(value) find(value)返回的是set中value对应的迭代器，也就是value的指针（地址）。 set\u003cchar\u003e st; st.insert('A'); st.insert('B'); st.insert('C'); set\u003cchar\u003e::iterator it = st.find('B'); cout \u003c\u003c *it \u003c\u003c endl; erase(it) 删除单个元素 set\u003cchar\u003e st; st.insert('A'); st.insert('B'); st.insert('C'); set\u003cchar\u003e::iterator it = st.find('B'); cout \u003c\u003c *it \u003c\u003c endl; st.erase(it); erase(beginIt,endIt) 删除一个区间类的元素 set\u003cchar\u003e st; st.insert('A'); st.insert('B'); st.insert('C'); set\u003cchar\u003e::iterator it = st.find('B'); cout \u003c\u003c *it \u003c\u003c endl; st.erase(it,st.end()); size() 返回set内的元素个数目 ","date":"2023-04-11","objectID":"/cpp-stl/:2:2","tags":["c++"],"title":"c++ STL","uri":"/cpp-stl/"},{"categories":["code"],"content":"string ","date":"2023-04-11","objectID":"/cpp-stl/:2:3","tags":["c++"],"title":"c++ STL","uri":"/cpp-stl/"},{"categories":["code"],"content":"map ","date":"2023-04-11","objectID":"/cpp-stl/:2:4","tags":["c++"],"title":"c++ STL","uri":"/cpp-stl/"},{"categories":["code"],"content":"queue ","date":"2023-04-11","objectID":"/cpp-stl/:2:5","tags":["c++"],"title":"c++ STL","uri":"/cpp-stl/"},{"categories":["code"],"content":"priority_queue ","date":"2023-04-11","objectID":"/cpp-stl/:2:6","tags":["c++"],"title":"c++ STL","uri":"/cpp-stl/"},{"categories":["code"],"content":"stack ","date":"2023-04-11","objectID":"/cpp-stl/:2:7","tags":["c++"],"title":"c++ STL","uri":"/cpp-stl/"},{"categories":["code"],"content":"pair ","date":"2023-04-11","objectID":"/cpp-stl/:2:8","tags":["c++"],"title":"c++ STL","uri":"/cpp-stl/"},{"categories":["code"],"content":"algrithm ","date":"2023-04-11","objectID":"/cpp-stl/:2:9","tags":["c++"],"title":"c++ STL","uri":"/cpp-stl/"},{"categories":["code"],"content":"参考 https://zhuanlan.zhihu.com/p/344558356 ","date":"2023-04-11","objectID":"/cpp-stl/:3:0","tags":["c++"],"title":"c++ STL","uri":"/cpp-stl/"},{"categories":["skynet"],"content":"skynet-stat使用 skynet的控制台中有一个命令为stat可以查看当前的某个skynet服务队列的状态以及当前请求的个数。最近通过这个命令，解决了一个线上问题。 ","date":"2023-04-10","objectID":"/skynet-stat/:0:0","tags":["skynet"],"title":"skynet-stat使用","uri":"/skynet-stat/"},{"categories":["skynet"],"content":"问题描述 线上问题的情况是玩家在游戏中破产时就会卡住，如果不破产，一切正常。 ","date":"2023-04-10","objectID":"/skynet-stat/:1:0","tags":["skynet"],"title":"skynet-stat使用","uri":"/skynet-stat/"},{"categories":["skynet"],"content":"问题分析 分析破产相关代码不难发现破产逻辑中有调用了另外一个进程中某个函数，而这个调用使用的是skynet.call阻塞的。如果整个流程不返回，那么就会阻塞在调用处。 ","date":"2023-04-10","objectID":"/skynet-stat/:2:0","tags":["skynet"],"title":"skynet-stat使用","uri":"/skynet-stat/"},{"categories":["skynet"],"content":"问题定位 使用console命令连接被调的进程 使用stat命令查看当前进程所有skynet服务的状态 发现有几个skynet服务中挂起了许多请求，不难发现这些请求正是破产时发送过来的请求被挂起了。 ","date":"2023-04-10","objectID":"/skynet-stat/:3:0","tags":["skynet"],"title":"skynet-stat使用","uri":"/skynet-stat/"},{"categories":["skynet"],"content":"解决问题 注释掉破产处的相关请求，发现破产后不再出现卡死情况。 ","date":"2023-04-10","objectID":"/skynet-stat/:4:0","tags":["skynet"],"title":"skynet-stat使用","uri":"/skynet-stat/"},{"categories":["skynet"],"content":"总结 上面的例子就是使用skynet stat命令查看服务的消息状态，进而帮助定位问题的一个例子。 上例为什么会出现挂起这么多的请求就不再本文的讨论范围之内了。 ","date":"2023-04-10","objectID":"/skynet-stat/:5:0","tags":["skynet"],"title":"skynet-stat使用","uri":"/skynet-stat/"},{"categories":["code"],"content":"C++排序算法 ","date":"2023-04-09","objectID":"/cpp-sort/:0:0","tags":["c++","算法"],"title":"C++排序算法","uri":"/cpp-sort/"},{"categories":["code"],"content":"1.冒泡排序 冒泡排序中，比较相邻的2项，交换顺序不对的项。 第一轮从首相开始比较，最后一轮只比较最后2个数。 时间复杂度为O(nxn)。 #include \u003ciostream\u003e #include \u003cvector\u003e using namespace std; // 冒泡排序 void sort_maopao() { // 将下面10个数从小到大排列 int a[] = {3,5,6,7,9,8,0,2,4,1}; for (int i=0;i\u003c10; ++i) { for (int j=0;j\u003c10-i-1; ++j) { if (a[j] \u003e a[j+1]) { int t = a[j]; a[j] = a[j+1]; a[j+1] = t; } } } for(int i=0;i\u003c10;i++) { cout \u003c\u003c \"a[\" \u003c\u003c i \u003c\u003c \"]=\" \u003c\u003c a[i] \u003c\u003c endl; } } void bubbleSort(vector\u003cint\u003e\u0026 arr) { int n = arr.size(); for(int i=0; i \u003c n-1; i++) { for(int j=0 ; j \u003c n-i-1; j++) { if (arr[j] \u003e arr[j+1]) { swap(arr[j],arr[j+1]); } } } } int main() { sort_maopao(); cout \u003c\u003c endl; vector\u003cint\u003e b = {1,3,5,10,6,9,2,7}; bubbleSort(b); for(int i=0;i\u003cb.size(); ++i) { cout \u003c\u003c \"b[\" \u003c\u003c i \u003c\u003c \"]:\" \u003c\u003c b[i] \u003c\u003c endl; } return 0; } // g++ -o demo_sort --std=c++11 demo_sort.cpp ","date":"2023-04-09","objectID":"/cpp-sort/:1:0","tags":["c++","算法"],"title":"C++排序算法","uri":"/cpp-sort/"},{"categories":["code"],"content":"2.选择排序 每次遍历只找出一个最大项。 找到最大项后把它放到正确的位置。 时间复杂度为O(nxn)。 void selectSort(vector\u003cint\u003e\u0026 arr) { int n = arr.size(); for (int i=0;i\u003cn;++i) { int index = 0; // 找处前面n-i项中的最大项的arr[index] for (int j=1;j\u003cn-i;++j) { if (arr[j] \u003e arr[index]) { index = j; } } // 将arr[index]放到正确的位置arr[n-i0] swap(arr[index],arr[n-i-1]); } } ","date":"2023-04-09","objectID":"/cpp-sort/:2:0","tags":["c++","算法"],"title":"C++排序算法","uri":"/cpp-sort/"},{"categories":["code"],"content":"3.插入排序 插入排序保证前面的已经排好了。 时间复杂度为O(nxn)。 void insertSort(vector\u003cint\u003e\u0026 arr) { int n = arr.size(); for (int i=1;i\u003cn;++i) { for(int j=i;j\u003e0;j--) { if (arr[j] \u003c arr[j-1]) { swap(arr[j],arr[j-1]); } else { break; } } } } ","date":"2023-04-09","objectID":"/cpp-sort/:3:0","tags":["c++","算法"],"title":"C++排序算法","uri":"/cpp-sort/"},{"categories":["code"],"content":"4.归并排序 void merge(vector\u003cint\u003e\u0026 v, int left, int mid, int right){ vector\u003cint\u003e temp = v; int i = left, j = mid + 1; int index = left; while(i \u003c= mid || j \u003c= right){ if(i \u003e mid){ v[index++] = temp[j]; j++; } else if(j \u003e right){ v[index++] = temp[i]; i++; } else if(temp[i] \u003c temp[j]){ v[index++] = temp[i]; i++; } else{ v[index++] = temp[j]; j++; } } } 递归将数据分割成2个部分 void merge_Sort(vector\u003cint\u003e\u0026 v, int left, int right){ if(left \u003e= right) return; int mid = (left + right) / 2; merge_Sort(v, left, mid); merge_Sort(v, mid + 1, right); if(v[mid] \u003e v[mid + 1]){ merge(v, left, mid, right); } } 归并排序 void mergeSort(vector\u003cint\u003e\u0026 v){ int n = v.size(); merge_Sort(v, 0, n - 1); } ","date":"2023-04-09","objectID":"/cpp-sort/:4:0","tags":["c++","算法"],"title":"C++排序算法","uri":"/cpp-sort/"},{"categories":["code"],"content":"5.快速排序 通过一次排序，将数据分割成2个部分,分割后的2部分数据中，其中一部分的数据都比李旺一部分小 然后对2部分数据进行递归快速排序 时间复杂度为O(nlogn)。 void quick_Sort(vector\u003cint\u003e\u0026 arr, int left, int right){ if(left \u003e= right) { return; } //取最左边的数为基数 int i = left, j = right, base = arr[left]; while(i \u003c j){ while(arr[j] \u003e= base \u0026\u0026 i \u003c j){ j--; } while(arr[i] \u003c= base \u0026\u0026 i \u003c j){ i++; } if(i \u003c j){ swap(arr[i], arr[j]); } } arr[left] = arr[i]; arr[i] = base; quick_Sort(arr, left, i - 1); quick_Sort(arr, i + 1, right); } void quickSort(vector\u003cint\u003e\u0026 arr){ int n = arr.size(); quick_Sort(arr, 0, n - 1); } ","date":"2023-04-09","objectID":"/cpp-sort/:5:0","tags":["c++","算法"],"title":"C++排序算法","uri":"/cpp-sort/"},{"categories":["code"],"content":"参考 https://zhuanlan.zhihu.com/p/121066684 https://www.runoob.com/w3cnote/ten-sorting-algorithm.html ","date":"2023-04-09","objectID":"/cpp-sort/:6:0","tags":["c++","算法"],"title":"C++排序算法","uri":"/cpp-sort/"},{"categories":["c++","vim","mac"],"content":"在mac m1上搭建c++ Vim开发环境 ","date":"2023-04-06","objectID":"/cpp-m1-env-vim/:0:0","tags":["c++","m1"],"title":"在mac m1上搭建c++ Vim开发环境","uri":"/cpp-m1-env-vim/"},{"categories":["c++","vim","mac"],"content":"vim安装 这里就不介绍如何安装了，详细的步骤可以看我的vim相关文章或者自行查阅相关文档。 ","date":"2023-04-06","objectID":"/cpp-m1-env-vim/:1:0","tags":["c++","m1"],"title":"在mac m1上搭建c++ Vim开发环境","uri":"/cpp-m1-env-vim/"},{"categories":["c++","vim","mac"],"content":"vim 配置c++插件syntastic 装好vim后需要配置对应的提示插件,vimrc中添加如下配置 \"cpp let g:syntastic_cpp_include_dirs = ['/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1'] \" let g:syntastic_cpp_include_dirs = ['/usr/include/'] let g:syntastic_cpp_remove_include_errors = 1 let g:syntastic_cpp_check_header = 1 let g:syntastic_cpp_compiler = 'clang++' let g:syntastic_cpp_compiler_options = '-std=c++11 -stdlib=libstdc++' \" syntastic end 其中需要注意的是 syntastic_cpp_include_dirs的配置,这里用到了clang++可以用clang++ --version来查看相关路径 ","date":"2023-04-06","objectID":"/cpp-m1-env-vim/:2:0","tags":["c++","m1"],"title":"在mac m1上搭建c++ Vim开发环境","uri":"/cpp-m1-env-vim/"},{"categories":["c++","vim","mac"],"content":"测试一下环境 ","date":"2023-04-06","objectID":"/cpp-m1-env-vim/:3:0","tags":["c++","m1"],"title":"在mac m1上搭建c++ Vim开发环境","uri":"/cpp-m1-env-vim/"},{"categories":["c++","vim","mac"],"content":"写一个简单的c++程序 // touch main.cpp // vim main.cpp #include \u003ciostream\u003e using namespace std; int main() { cout \u003c\u003c \"Hello world!\" \u003c\u003c endl; return 0; } ","date":"2023-04-06","objectID":"/cpp-m1-env-vim/:3:1","tags":["c++","m1"],"title":"在mac m1上搭建c++ Vim开发环境","uri":"/cpp-m1-env-vim/"},{"categories":["skynet"],"content":"skynet-actor模型 skynet是使用c语言实现了一套actor模型，那么什么是actor模型呢？ ","date":"2023-04-03","objectID":"/skynet-actor/:0:0","tags":["skynet"],"title":"skynet-actor模型","uri":"/skynet-actor/"},{"categories":["skynet"],"content":"actor模型简介 erlang将actor称之为“进程”,在代码层面考虑并发性。 actor模型用于并行计算 actor是最小的计算单元 基于消息设计 actor之间相互隔离 ","date":"2023-04-03","objectID":"/skynet-actor/:1:0","tags":["skynet"],"title":"skynet-actor模型","uri":"/skynet-actor/"},{"categories":["skynet"],"content":"skynet中的actor ","date":"2023-04-03","objectID":"/skynet-actor/:2:0","tags":["skynet"],"title":"skynet-actor模型","uri":"/skynet-actor/"},{"categories":["skynet"],"content":"skynet用框架实现actor模型 启动多个并发actor actor之间通过消息进行沟通 actor拥有私有消息队列，存储有序的消息 actor通过回掉来消耗消息 ","date":"2023-04-03","objectID":"/skynet-actor/:2:1","tags":["skynet"],"title":"skynet-actor模型","uri":"/skynet-actor/"},{"categories":["skynet"],"content":"skynet中的actor是什么样的结构 struct skynet_context // 具体可以参看skynet源码 ","date":"2023-04-03","objectID":"/skynet-actor/:2:2","tags":["skynet"],"title":"skynet-actor模型","uri":"/skynet-actor/"},{"categories":["skynet"],"content":"skynet中开启了哪些线程，工作线程具体的任务是什么？ timer线程 socket线程 monitor线程 检查服务消息过载 worker线程 ","date":"2023-04-03","objectID":"/skynet-actor/:2:3","tags":["skynet"],"title":"skynet-actor模型","uri":"/skynet-actor/"},{"categories":["skynet"],"content":"skynet中的actor是怎么运行的，消息如何调度？ 消息队列(全局消息队列，actor消息队列) 全局消息队列存储有消息的actor ","date":"2023-04-03","objectID":"/skynet-actor/:2:4","tags":["skynet"],"title":"skynet-actor模型","uri":"/skynet-actor/"},{"categories":["skynet"],"content":"消息是如何生产消费的？ 生产 actor之间发送消息 定时器向actor发送消息 信号向actor发送消息 socket向actor发送消息 消费 skynet callback回调来消费消息 ","date":"2023-04-03","objectID":"/skynet-actor/:2:5","tags":["skynet"],"title":"skynet-actor模型","uri":"/skynet-actor/"},{"categories":["skynet"],"content":"c语言的actor logger服务 ","date":"2023-04-03","objectID":"/skynet-actor/:2:6","tags":["skynet"],"title":"skynet-actor模型","uri":"/skynet-actor/"},{"categories":["skynet"],"content":"lua语言的actor lua虚拟机 service_snlua.c来加载lua服务 ","date":"2023-04-03","objectID":"/skynet-actor/:2:7","tags":["skynet"],"title":"skynet-actor模型","uri":"/skynet-actor/"},{"categories":["tools"],"content":"在线音频格式化网站 最近需要把kgm的音频转换为mp3格式，在windows平台有脚本转换工具，在mac电脑上没有找到好用的网站，今天发现了这个网站记录一下，不过这个网站在国内无法使用。 在线格式化网站: https://demo.unlock-music.dev/ ","date":"2023-04-02","objectID":"/music-format/:0:0","tags":["music","tools"],"title":"在线音频格式化网站","uri":"/music-format/"},{"categories":["linux"],"content":"linux基础","date":"2023-04-01","objectID":"/linux-question/:0:0","tags":["linux"],"title":"linux基础","uri":"/linux-question/"},{"categories":["os"],"content":"操作系统基础","date":"2023-04-01","objectID":"/os-question/:0:0","tags":["操作系统"],"title":"操作系统基础","uri":"/os-question/"},{"categories":["golang"],"content":"golang常见问题","date":"2023-04-01","objectID":"/go-question/:0:0","tags":["golang"],"title":"golang常见问题","uri":"/go-question/"},{"categories":["lua"],"content":"lua常见问题","date":"2023-04-01","objectID":"/lua-question/:0:0","tags":["lua"],"title":"lua常见问题","uri":"/lua-question/"},{"categories":["docker"],"content":"docker基础 ","date":"2023-04-01","objectID":"/docker-question/:0:0","tags":["docker"],"title":"docker基础","uri":"/docker-question/"},{"categories":["docker"],"content":"docker常见命令 docker run 创建并运行一个容器， -d让容器后台运行 docker inspect 查看容器信息 docker pull 拉取镜像 docker build构建镜像 docker images 查看当前下载的镜像 docker rmi 删除镜像 docker save -o nginx.tar nginx:latest 镜像保存为nginx.tar docker load -i nginx.tar 加载镜像nginx.tar docker run 创建并运行容器 --name:容器名 - p 8000:3306 前面是宿主机端口，后面是容器的端口 -e MYSQL_ROOT_PASSWORD=123 -e 环境变量 docker ps 查看当前运行的容器 docker stop 停止容器 exit 或ctrl + d推出容器 docker exec -it containerId或containerName /bin/bash进入容器 docker cp /opt/tools/nvim.tar.gz nginx1:/opt/tools/ 将宿主机中的nvim.tar.gz拷贝到容器nginx1的/opt/tools/目录中 ","date":"2023-04-01","objectID":"/docker-question/:1:0","tags":["docker"],"title":"docker基础","uri":"/docker-question/"},{"categories":["docker"],"content":"docker怎么使用？ ","date":"2023-04-01","objectID":"/docker-question/:2:0","tags":["docker"],"title":"docker基础","uri":"/docker-question/"},{"categories":["docker"],"content":"查看docker版本 docker --version ","date":"2023-04-01","objectID":"/docker-question/:2:1","tags":["docker"],"title":"docker基础","uri":"/docker-question/"},{"categories":["redis"],"content":"redis基础 ","date":"2023-04-01","objectID":"/redis-question/:0:0","tags":["redis"],"title":"redis基础","uri":"/redis-question/"},{"categories":["redis"],"content":"redis 与其它的key-value存储有什么不同？ redis具有更加复杂的数据结构并且支持原子性操作。 redis支持持久化到磁盘。 ","date":"2023-04-01","objectID":"/redis-question/:1:0","tags":["redis"],"title":"redis基础","uri":"/redis-question/"},{"categories":["redis"],"content":"redis与MemCached相比有哪些优势？ redis比MemCached快。 redis能够持久化道磁盘，MemCached不支持。 redis支持更复杂的数据机构,MemCached所有值都是简单的字符串。 ","date":"2023-04-01","objectID":"/redis-question/:2:0","tags":["redis"],"title":"redis基础","uri":"/redis-question/"},{"categories":["redis"],"content":"redis是单进程单线程的？ redis是单进程单线程的，通过队列技术将并发的访问转化为串行访问。消除了传统数据库的穿行开销。 ","date":"2023-04-01","objectID":"/redis-question/:3:0","tags":["redis"],"title":"redis基础","uri":"/redis-question/"},{"categories":["redis"],"content":"参考 https://developer.aliyun.com/article/852976 https://zhuanlan.zhihu.com/p/427496556 ","date":"2023-04-01","objectID":"/redis-question/:4:0","tags":["redis"],"title":"redis基础","uri":"/redis-question/"},{"categories":["code"],"content":"服务端开发基础 做服务端开发有很多年了，目前看来自己已经学习了许多的服务端开发的技术，但是对于服务端开发的技术来说，我学到的东西，实在是冰山一角。这里汇总一下服务端开发的一些知识要点。因为服务端开发涉及到的技术实在是太多了，这里仅仅是汇总一部分，后续也会持续更新，添加更多的知识点。 ","date":"2023-03-24","objectID":"/server-dev/:0:0","tags":["server"],"title":"服务端开发基础","uri":"/server-dev/"},{"categories":["code"],"content":"基础概念 ","date":"2023-03-24","objectID":"/server-dev/:1:0","tags":["server"],"title":"服务端开发基础","uri":"/server-dev/"},{"categories":["code"],"content":"熟悉常用云服务器提供商产品 腾讯云、阿里云、华为云等 ","date":"2023-03-24","objectID":"/server-dev/:2:0","tags":["server"],"title":"服务端开发基础","uri":"/server-dev/"},{"categories":["code"],"content":"常用数据库 ","date":"2023-03-24","objectID":"/server-dev/:3:0","tags":["server"],"title":"服务端开发基础","uri":"/server-dev/"},{"categories":["code"],"content":"关系型数据库 PostgreSQL Microsoft Sql Server Microsoft Access Mysql Oracle DB2 SQLite ","date":"2023-03-24","objectID":"/server-dev/:3:1","tags":["server"],"title":"服务端开发基础","uri":"/server-dev/"},{"categories":["code"],"content":"No Sql数据库 redis memcache mongoDB ","date":"2023-03-24","objectID":"/server-dev/:3:2","tags":["server"],"title":"服务端开发基础","uri":"/server-dev/"},{"categories":["code"],"content":"网络原理 tcp http udp ","date":"2023-03-24","objectID":"/server-dev/:4:0","tags":["server"],"title":"服务端开发基础","uri":"/server-dev/"},{"categories":["code"],"content":"数据结构与算法 ","date":"2023-03-24","objectID":"/server-dev/:5:0","tags":["server"],"title":"服务端开发基础","uri":"/server-dev/"},{"categories":["code"],"content":"常用编程语言 c/c++ go lua python java ","date":"2023-03-24","objectID":"/server-dev/:6:0","tags":["server"],"title":"服务端开发基础","uri":"/server-dev/"},{"categories":["code"],"content":"网络编程 tpc/udp,http, socket编程 ","date":"2023-03-24","objectID":"/server-dev/:7:0","tags":["server"],"title":"服务端开发基础","uri":"/server-dev/"},{"categories":["code"],"content":"操作系统 linux系统 ","date":"2023-03-24","objectID":"/server-dev/:8:0","tags":["server"],"title":"服务端开发基础","uri":"/server-dev/"},{"categories":["code"],"content":"分布式 ","date":"2023-03-24","objectID":"/server-dev/:9:0","tags":["server"],"title":"服务端开发基础","uri":"/server-dev/"},{"categories":["code"],"content":"云原生 docker k8s ","date":"2023-03-24","objectID":"/server-dev/:10:0","tags":["server"],"title":"服务端开发基础","uri":"/server-dev/"},{"categories":["code"],"content":"开源框架 ","date":"2023-03-24","objectID":"/server-dev/:11:0","tags":["server"],"title":"服务端开发基础","uri":"/server-dev/"},{"categories":["code"],"content":"多线程编程 ","date":"2023-03-24","objectID":"/server-dev/:12:0","tags":["server"],"title":"服务端开发基础","uri":"/server-dev/"},{"categories":["code"],"content":"协程","date":"2023-03-24","objectID":"/server-dev/:13:0","tags":["server"],"title":"服务端开发基础","uri":"/server-dev/"},{"categories":["net"],"content":"HTTP1.0/1.1/2.0的区别 ","date":"2023-03-23","objectID":"/http/:0:0","tags":["http"],"title":"HTTP1.0/1.1/2.0的区别","uri":"/http/"},{"categories":["net"],"content":"HTTP1.0 HTTP1.0 是http协议的第二个版本，是第一个在通讯中定版本号的HTTP协议 http1.0 浏览器与服务器只保持短暂的连接，每次请求都需要与服务器建立一个TCP连接，服务器完成请求处理后，立即断开TCP连接，服务器不跟踪每个客户,也不记录过去的请求。 每次与服务器交互，都需要新开一个连接。 性能上有缺陷。 如果要建立长连接，需要设置一个非标准的Connection字段Connnection:keep-alive ","date":"2023-03-23","objectID":"/http/:1:0","tags":["http"],"title":"HTTP1.0/1.1/2.0的区别","uri":"/http/"},{"categories":["net"],"content":"HTTP1.1 HTTP1.1中，默认支持长连接(Connection:keep-alive),即在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟。 HTTP1.1允许客户端不用等待上一次请求结果返回，就可以发出下一次请求，但服务器必须按照接收到客户端请求的先后顺序依次回送响应结果。 HTTP1.1在HTTP1.0的基础上，增加了更多的请求头和响应头来完善功能： 引入了更多的缓存控制策略:if-Unmodified-Since,if-Match,if-None_-Match等缓存头来控制缓存策略。 引入range,允许值请求资源某个部分。 引入host,实现在一台WEB服务器上可以在同一个IP地址和端口号上使用不同的主机名来创建多个虚拟WEB站点。 还添加了：put,delete,options等等请求方法。 ","date":"2023-03-23","objectID":"/http/:2:0","tags":["http"],"title":"HTTP1.0/1.1/2.0的区别","uri":"/http/"},{"categories":["net"],"content":"HTTP2.0 HTTP2.0在之前版本的基础上性能有很大的提升，添加了特性: 多路复用 二进制分帧 首部压缩 服务器推送 ","date":"2023-03-23","objectID":"/http/:3:0","tags":["http"],"title":"HTTP1.0/1.1/2.0的区别","uri":"/http/"},{"categories":["net"],"content":"参考: https://vue3js.cn/interview/http/1.0_1.1_2.0.html ","date":"2023-03-23","objectID":"/http/:4:0","tags":["http"],"title":"HTTP1.0/1.1/2.0的区别","uri":"/http/"},{"categories":["devtools"],"content":"几款免费好用的思维导图软件 工作中经常需要画一些思维导图，但是目前大部分思维导图软件都是收费的。目前我发现几款款比较好用的软件,自己用了一段时间，感觉基本功能都是有的，推荐给大家。 ","date":"2023-03-22","objectID":"/freemind/:0:0","tags":["devtools","freemind","freeplane"],"title":"几款免费好用的思维导图软件","uri":"/freemind/"},{"categories":["devtools"],"content":"freemind 因为FreeMind2014年之后就没有更新了，虽然免费，但更推荐PlaneMind 支持windows,linux,mac 下载地址: https://freemind.sourceforge.net/wiki/index.php/Download ","date":"2023-03-22","objectID":"/freemind/:1:0","tags":["devtools","freemind","freeplane"],"title":"几款免费好用的思维导图软件","uri":"/freemind/"},{"categories":["devtools"],"content":"freeplane 支持windows,linux,mac ","date":"2023-03-22","objectID":"/freemind/:2:0","tags":["devtools","freemind","freeplane"],"title":"几款免费好用的思维导图软件","uri":"/freemind/"},{"categories":["devtools"],"content":"下载地址 下载地址: https://sourceforge.net/projects/freeplane/files/latest/download mac下载地址: https://udomain.dl.sourceforge.net/project/freeplane/freeplane%20stable/Freeplane-1.10.6-intel.dmg ","date":"2023-03-22","objectID":"/freemind/:2:1","tags":["devtools","freemind","freeplane"],"title":"几款免费好用的思维导图软件","uri":"/freemind/"},{"categories":["devtools"],"content":"帮助文档 官方文档: https://docs.freeplane.org/ 怎么使用可以参考知乎中的这篇文章: https://zhuanlan.zhihu.com/p/50368471 linux下使用问题: https://www.likecs.com/show-307170883.html ","date":"2023-03-22","objectID":"/freemind/:2:2","tags":["devtools","freemind","freeplane"],"title":"几款免费好用的思维导图软件","uri":"/freemind/"},{"categories":["devtools"],"content":"常用快捷键 添加平级节点：Enter 添加子节点：Tab 删除节点：Delete 编辑节点: F2 ","date":"2023-03-22","objectID":"/freemind/:2:3","tags":["devtools","freemind","freeplane"],"title":"几款免费好用的思维导图软件","uri":"/freemind/"},{"categories":["devtools"],"content":"其它 这里还有几款其它的脑图软件: https://www.zhihu.com/question/19610340 ","date":"2023-03-22","objectID":"/freemind/:3:0","tags":["devtools","freemind","freeplane"],"title":"几款免费好用的思维导图软件","uri":"/freemind/"},{"categories":["devtools"],"content":"总结 个人使用linux环境比较多，更偏向于使用freeplane,目前脑图软件很多，使用哪个软件都是可以的，适合自己的就行。 ","date":"2023-03-22","objectID":"/freemind/:4:0","tags":["devtools","freemind","freeplane"],"title":"几款免费好用的思维导图软件","uri":"/freemind/"},{"categories":["docker"],"content":"基于Docker+Jenkins+Git的发布环境 通过Docker管理Jenkins资源。 通过Jenkins创建Docker镜像。 ","date":"2023-03-14","objectID":"/docker-jenkins-git/:0:0","tags":["docker"],"title":"基于Docker+Jenkins+Git的发布环境","uri":"/docker-jenkins-git/"},{"categories":["docker"],"content":"发布流程 开发人员使用git提交代码到git服务器 git hook触发Jenkiins Jenkiins使用shell脚本控制docker操作:网站的部署、运行与更新 ","date":"2023-03-14","objectID":"/docker-jenkins-git/:1:0","tags":["docker"],"title":"基于Docker+Jenkins+Git的发布环境","uri":"/docker-jenkins-git/"},{"categories":["docker"],"content":"安装Jenkins","date":"2023-03-14","objectID":"/docker-jenkins-git/:2:0","tags":["docker"],"title":"基于Docker+Jenkins+Git的发布环境","uri":"/docker-jenkins-git/"},{"categories":["mysql"],"content":"mysql基础 ","date":"2023-03-01","objectID":"/mysql-question/:0:0","tags":["mysql"],"title":"mysql基础","uri":"/mysql-question/"},{"categories":["mysql"],"content":"知识点 ","date":"2023-03-01","objectID":"/mysql-question/:1:0","tags":["mysql"],"title":"mysql基础","uri":"/mysql-question/"},{"categories":["mysql"],"content":"索引 ","date":"2023-03-01","objectID":"/mysql-question/:1:1","tags":["mysql"],"title":"mysql基础","uri":"/mysql-question/"},{"categories":["mysql"],"content":"存储引擎 ","date":"2023-03-01","objectID":"/mysql-question/:1:2","tags":["mysql"],"title":"mysql基础","uri":"/mysql-question/"},{"categories":["mysql"],"content":"bin log/redo log/undo log ","date":"2023-03-01","objectID":"/mysql-question/:1:3","tags":["mysql"],"title":"mysql基础","uri":"/mysql-question/"},{"categories":["mysql"],"content":"mysql架构 ","date":"2023-03-01","objectID":"/mysql-question/:1:4","tags":["mysql"],"title":"mysql基础","uri":"/mysql-question/"},{"categories":["mysql"],"content":"分库分表 水平分库分表 垂直分库分表 ","date":"2023-03-01","objectID":"/mysql-question/:1:5","tags":["mysql"],"title":"mysql基础","uri":"/mysql-question/"},{"categories":["mysql"],"content":"分区表 ","date":"2023-03-01","objectID":"/mysql-question/:1:6","tags":["mysql"],"title":"mysql基础","uri":"/mysql-question/"},{"categories":["mysql"],"content":"查询语句以及更新语句的执行过程 ","date":"2023-03-01","objectID":"/mysql-question/:1:7","tags":["mysql"],"title":"mysql基础","uri":"/mysql-question/"},{"categories":["mysql"],"content":"exists和in的区别 ","date":"2023-03-01","objectID":"/mysql-question/:1:8","tags":["mysql"],"title":"mysql基础","uri":"/mysql-question/"},{"categories":["mysql"],"content":"having和where的区别 ","date":"2023-03-01","objectID":"/mysql-question/:1:9","tags":["mysql"],"title":"mysql基础","uri":"/mysql-question/"},{"categories":["mysql"],"content":"什么是主从同步，为什么要做主从同步 ","date":"2023-03-01","objectID":"/mysql-question/:1:10","tags":["mysql"],"title":"mysql基础","uri":"/mysql-question/"},{"categories":["mysql"],"content":"乐观锁与悲观锁 ","date":"2023-03-01","objectID":"/mysql-question/:1:11","tags":["mysql"],"title":"mysql基础","uri":"/mysql-question/"},{"categories":["mysql"],"content":"processlist是什么？ ","date":"2023-03-01","objectID":"/mysql-question/:1:12","tags":["mysql"],"title":"mysql基础","uri":"/mysql-question/"},{"categories":["mysql"],"content":"MySQL的索引是怎么实现的？答案是B+树 MySQL索引: https://developer.aliyun.com/article/1113775 MySQL索引详解: https://developer.aliyun.com/article/831250 ","date":"2023-03-01","objectID":"/mysql-question/:1:13","tags":["mysql"],"title":"mysql基础","uri":"/mysql-question/"},{"categories":["mysql"],"content":"事务 ","date":"2023-03-01","objectID":"/mysql-question/:1:14","tags":["mysql"],"title":"mysql基础","uri":"/mysql-question/"},{"categories":["mysql"],"content":"MySQL有哪几种锁？ 表级锁 行级锁 页面锁 ","date":"2023-03-01","objectID":"/mysql-question/:1:15","tags":["mysql"],"title":"mysql基础","uri":"/mysql-question/"},{"categories":["mysql"],"content":"日常工作中是如何优化SQL的？ 建索引,加快查询，空间换时间 分库分表 避免返回不必要的数据，比如select * 改为select需要的字段 主从架构，提升读性能 适当分批进行查询 数据库中的字段设计的时候可尽可能占用空间少 尽量把字段设置为NOT NULL 使用UNION来代替手动创建的临时表 避免函数索引 用IN来代替OR 用LIKE双%的时候无法使用到索引。 ","date":"2023-03-01","objectID":"/mysql-question/:1:16","tags":["mysql"],"title":"mysql基础","uri":"/mysql-question/"},{"categories":["mysql"],"content":"参考 大厂常考的MySQL高频面试题: https://developer.aliyun.com/article/848754 MySQL面试60题: https://zhuanlan.zhihu.com/p/59838091 ","date":"2023-03-01","objectID":"/mysql-question/:2:0","tags":["mysql"],"title":"mysql基础","uri":"/mysql-question/"},{"categories":["linux","centos"],"content":"Centos如何关闭交换分区Swap Centos的swap分区在开启的情况下，可能会导致性能下降，在使用k8s时，要求关闭swap ","date":"2023-02-21","objectID":"/centos-swap/:0:0","tags":["linux","centos"],"title":"Centos如何关闭交换分区Swap","uri":"/centos-swap/"},{"categories":["linux","centos"],"content":"环境 OS [root@dev127 paoshang]# cat /etc/redhat-release CentOS Linux release 7.9.2009 (Core) ","date":"2023-02-21","objectID":"/centos-swap/:1:0","tags":["linux","centos"],"title":"Centos如何关闭交换分区Swap","uri":"/centos-swap/"},{"categories":["linux","centos"],"content":"关闭swap分区 swapoff -a ","date":"2023-02-21","objectID":"/centos-swap/:1:1","tags":["linux","centos"],"title":"Centos如何关闭交换分区Swap","uri":"/centos-swap/"},{"categories":["linux","centos"],"content":"修改配置文件/etc/fstab,删除swap相关的行 [root@dev127 paoshang]# cat /etc/fstab ```bash # # /etc/fstab # Created by anaconda on Tue Jun 9 19:47:48 2020 # # Accessible filesystems, by reference, are maintained under '/dev/disk' # See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info # UUID=4541be7b-65a9-45f2-983a-8439a534b99c / xfs defaults 0 0 UUID=d30bfeaa-770a-43b4-8567-a9fa4e221786 /boot xfs defaults 0 0 #UUID=16cc8806-a33e-4a65-b118-e3338ebba38d swap swap defaults 0 0 /dev/sdb /data ext4 defaults 0 0 ","date":"2023-02-21","objectID":"/centos-swap/:1:2","tags":["linux","centos"],"title":"Centos如何关闭交换分区Swap","uri":"/centos-swap/"},{"categories":["linux","centos"],"content":"确认swap已经关闭 free -m ","date":"2023-02-21","objectID":"/centos-swap/:1:3","tags":["linux","centos"],"title":"Centos如何关闭交换分区Swap","uri":"/centos-swap/"},{"categories":["linux","centos"],"content":"调整swappiness参数 echo 0 \u003e /proc/sys/vm/swappiness vim /etc/sysctl.conf vm.swappiness=0 使修改生效 sysctl -p ## 参考 - https://www.cnblogs.com/larrypeng/p/11950498.html ","date":"2023-02-21","objectID":"/centos-swap/:1:4","tags":["linux","centos"],"title":"Centos如何关闭交换分区Swap","uri":"/centos-swap/"},{"categories":["code"],"content":"yaml配置文件编写规范 key: value表示一对键值对，冒号后面必须要有空格 key: value ","date":"2023-02-21","objectID":"/yaml/:0:0","tags":["yaml"],"title":"yaml配置文件编写规范","uri":"/yaml/"},{"categories":["code"],"content":"基本语法 大小写敏感。 使用空格缩进,不能使用tab。 缩进的空格数不重要，只要相同层级的元素左对齐即可。 #表示注释 ","date":"2023-02-21","objectID":"/yaml/:1:0","tags":["yaml"],"title":"yaml配置文件编写规范","uri":"/yaml/"},{"categories":["code"],"content":"数据类型 对象： 键值对的集合，mapping/hashes/dictionary。 数组：sequence/list。 纯量：单个的、不可再分的值。 ","date":"2023-02-21","objectID":"/yaml/:2:0","tags":["yaml"],"title":"yaml配置文件编写规范","uri":"/yaml/"},{"categories":["code"],"content":"YAML对象 key: key1:value1 key2:value2 复杂对象: ? + 空格代表一个复杂的key,: + 一个空格代表一个value ? - keya - keyb : - valuea - valueb ","date":"2023-02-21","objectID":"/yaml/:3:0","tags":["yaml"],"title":"yaml配置文件编写规范","uri":"/yaml/"},{"categories":["code"],"content":"YAML数组 以-开头的行表示构成一个数组。 key: - a1 - a2 - a3 行内表示方法 key: [a1,a2,a3] 数组嵌入数组 - - a1 - a2 - a3 数组内是对象举例： room: - tableid: 1 name:table1 - tableid: 2 name:table2 也可表示为 room: [{tableid: 1,name: table1},{tableid: 2,name: table2}] ","date":"2023-02-21","objectID":"/yaml/:4:0","tags":["yaml"],"title":"yaml配置文件编写规范","uri":"/yaml/"},{"categories":["code"],"content":"纯量 boolean: - TRUE #true,True都可以 - FALSE #false,False都可以 float: - 3.01 - 3.1415926 int: - 10 - 0b1010_0111_0100_1010_1110 #二进制表示 null: nodeName: 'node' parent: ~ #使用~表示null string: - 'Hello xiaomi' - xiaoli - xiaoliu - xiaohu date: - 2023-02-19 #日期必须使用ISO 8601格式，即yyyy-MM-dd datetime: - 2018-02-17T15:02:31+08:00 #时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区 ","date":"2023-02-21","objectID":"/yaml/:5:0","tags":["yaml"],"title":"yaml配置文件编写规范","uri":"/yaml/"},{"categories":["code"],"content":"参考 https://www.runoob.com/w3cnote/yaml-intro.html ","date":"2023-02-21","objectID":"/yaml/:6:0","tags":["yaml"],"title":"yaml配置文件编写规范","uri":"/yaml/"},{"categories":["docker"],"content":"k8s学习笔记 ","date":"2023-02-18","objectID":"/k8s/:0:0","tags":["k8s"],"title":"k8s学习笔记","uri":"/k8s/"},{"categories":["docker"],"content":"基本概念 statefulset helm pod configmap kubeadm 二进制安装 bootstrapping kubelet ","date":"2023-02-18","objectID":"/k8s/:1:0","tags":["k8s"],"title":"k8s学习笔记","uri":"/k8s/"},{"categories":["docker"],"content":"0宕机 startupprobe Pod三种探针 ","date":"2023-02-18","objectID":"/k8s/:1:1","tags":["k8s"],"title":"k8s学习笔记","uri":"/k8s/"},{"categories":["docker"],"content":"资源调度 Deployment 有状态的应用管理StatefulSet 守护进程服务DaemonSet HAP自动扩容 ","date":"2023-02-18","objectID":"/k8s/:1:2","tags":["k8s"],"title":"k8s学习笔记","uri":"/k8s/"},{"categories":["docker"],"content":"服务发布 Label Selector Ingress Sevice ","date":"2023-02-18","objectID":"/k8s/:1:3","tags":["k8s"],"title":"k8s学习笔记","uri":"/k8s/"},{"categories":["docker"],"content":"配置管理 ConfigMap Secret ","date":"2023-02-18","objectID":"/k8s/:1:4","tags":["k8s"],"title":"k8s学习笔记","uri":"/k8s/"},{"categories":["docker"],"content":"持久化存储 Volumes Volumes HostPath挂载宿主路径 Volumes EmptyDir实现数据共享 NFS 持久化PV\u0026PVC ","date":"2023-02-18","objectID":"/k8s/:1:5","tags":["k8s"],"title":"k8s学习笔记","uri":"/k8s/"},{"categories":["docker"],"content":"高级调度 CronJob计划任务 污点和容忍Taint\u0026Toleration initContainer Affinity亲和力入门 节点亲和力NodeAffinity Pod亲和力和反亲和力 Topology拓扑域 Topology实现多地多机房部署 临时容器 临时容器在线debug ","date":"2023-02-18","objectID":"/k8s/:1:6","tags":["k8s"],"title":"k8s学习笔记","uri":"/k8s/"},{"categories":["docker"],"content":"准入控制及细力度权限控制 RBAC权限管理 Ratel 准入控制 服务质量Qos PodPreset Dashboard基于用户名密码认证 ","date":"2023-02-18","objectID":"/k8s/:1:7","tags":["k8s"],"title":"k8s学习笔记","uri":"/k8s/"},{"categories":["docker"],"content":"高级篇 ","date":"2023-02-18","objectID":"/k8s/:2:0","tags":["k8s"],"title":"k8s学习笔记","uri":"/k8s/"},{"categories":["docker"],"content":"云原生存储 Rook Ceph StorageClass Rook Ceph xfs_repair问题 ","date":"2023-02-18","objectID":"/k8s/:2:1","tags":["k8s"],"title":"k8s学习笔记","uri":"/k8s/"},{"categories":["docker"],"content":"中间件容器化以及Helm Redis Operator Redis集群部署 Helm v3(yum) 编写Helm部署RabbitMQ ","date":"2023-02-18","objectID":"/k8s/:2:2","tags":["k8s"],"title":"k8s学习笔记","uri":"/k8s/"},{"categories":["docker"],"content":"源码修改 Kubeadm源码修改(默认证书只有1年) ","date":"2023-02-18","objectID":"/k8s/:2:3","tags":["k8s"],"title":"k8s学习笔记","uri":"/k8s/"},{"categories":["docker"],"content":"组件 APISERVER ControllerManager Scheduler ETCD Kubelet Kube-proxy CORENDS DASHBOARD INGRESS CONTROLLER FEDERATION PROMETHEUS ELK ","date":"2023-02-18","objectID":"/k8s/:2:4","tags":["k8s"],"title":"k8s学习笔记","uri":"/k8s/"},{"categories":["docker"],"content":"Pod ","date":"2023-02-18","objectID":"/k8s/:2:5","tags":["k8s"],"title":"k8s学习笔记","uri":"/k8s/"},{"categories":["docker"],"content":" ReplicationController ReplicaSet ","date":"2023-02-18","objectID":"/k8s/:2:6","tags":["k8s"],"title":"k8s学习笔记","uri":"/k8s/"},{"categories":["docker"],"content":"运维 EFK日志收集 Filebeat 收集容器内日志 prometheus prometheus告警 ","date":"2023-02-18","objectID":"/k8s/:3:0","tags":["k8s"],"title":"k8s学习笔记","uri":"/k8s/"},{"categories":["docker"],"content":"游戏中实践 https://longzhiri.github.io/Game+Servers+k8s+practice.html ","date":"2023-02-18","objectID":"/k8s/:4:0","tags":["k8s"],"title":"k8s学习笔记","uri":"/k8s/"},{"categories":["docker"],"content":"参考 https://www.bilibili.com/video/BV1JR4y1B7oa ","date":"2023-02-18","objectID":"/k8s/:5:0","tags":["k8s"],"title":"k8s学习笔记","uri":"/k8s/"},{"categories":["docker"],"content":"哪些公司在用k8s 参考: https://blog.csdn.net/xueshenlaila/article/details/118895406 京东 知呼 天猫 阿里巴巴 诺基亚 永辉超市 美团: https://tech.meituan.com/2019/08/22/kubernetes-cluster-management-practice.html 网易: https://blog.csdn.net/NetEaseResearch/article/details/108279775 字节跳动: http://science.china.com.cn/2022-06/14/content_42001803.htm 联通: https://www.alauda.cn/news/detail/id/526.html 中国移动: https://blog.51cto.com/u_15127420/3213363 中国电信: https://www.linkedin.cn/incareer/jobs/view/k8s%E5%AE%B9%E5%99%A8%E5%8C%96%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-mj000003-at-%E4%B8%AD%E5%9B%BD%E7%94%B5%E4%BF%A1%E9%9B%86%E5%9B%A2%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8-3488457311 腾讯: https://cloud.tencent.com/developer/article/1761279 奇虎360 新浪微博 金山云 滴滴出行 新东方 小红书 百度 华为 快手 国家电网 小米 汽车之家 爱奇异 同城旅游 ","date":"2023-02-18","objectID":"/k8s/:6:0","tags":["k8s"],"title":"k8s学习笔记","uri":"/k8s/"},{"categories":["docker"],"content":"游戏公司 途游游戏: https://www.zhipin.com/job_detail/3aa179d364ffab8d1nN739u6EFdY.html?lid=3VSJoP8D3j.search.117\u0026securityId=Fc1F1o44tKNcn-J1I-29BpFzWhOqCNClK9-RM_g-qa2f82Hvr1XJQJm9WiOHiVU2oY2RdkgwO_KwGMkMP_Ds9zG7FYgGu4_68Al1ibHcJAOlVoOp\u0026sessionId= 乐游科技: https://www.zhipin.com/job_detail/d0a714b4821a42171XF83dq-E1BT.html?lid=3VSJoP8D3j.search.171\u0026securityId=YN-f3a5ndWKe7-Y11SZn4a-XEs6T67zWva4U7rb0fWXTBCFYTQgvN6EL-P6IucnCpxzZdqYTFqdKykmMWJApgj0acw1aiE183M-AXpb2r0M1D-69hw~~\u0026sessionId= 乐城堡: https://www.zhipin.com/job_detail/584ce224107695a61XF-3tq-ElJT.html?lid=46RGh1G3vA.search.3\u0026securityId=FOsKEPbMI48vt-w15pvM_RmhwkmGC-0Xi2a-P2e98OfnSEedhLgfofmHYxuyWC0jXd56ui4pN91cXj9h0WEwFhTGMyRcYFP_jEmVl7UzjDrGPBvB0XnuFeZkWuRuB_CDW6GnK7mX3EXcBL4S3sIttw~~\u0026sessionId= ","date":"2023-02-18","objectID":"/k8s/:6:1","tags":["k8s"],"title":"k8s学习笔记","uri":"/k8s/"},{"categories":["docker"],"content":"grafana ","date":"2023-02-17","objectID":"/grafana/:0:0","tags":["grafana","监控"],"title":"Grafana","uri":"/grafana/"},{"categories":["docker"],"content":"简介 grafana是监控的一个前端展示工具可以通过docker来部署 ","date":"2023-02-17","objectID":"/grafana/:1:0","tags":["grafana","监控"],"title":"Grafana","uri":"/grafana/"},{"categories":["docker"],"content":"grafana的展示模板 通过导入模板的json或输入模板的ID就可以导入模板，但是输入ID的方式有时候会不成功。 windows_exporter的模板推荐下面这个 windows_exporter for Prometheus Dashboard CN v20201012 ","date":"2023-02-17","objectID":"/grafana/:2:0","tags":["grafana","监控"],"title":"Grafana","uri":"/grafana/"},{"categories":["docker"],"content":"docker 启动 ","date":"2023-02-17","objectID":"/grafana/:3:0","tags":["grafana","监控"],"title":"Grafana","uri":"/grafana/"},{"categories":["docker"],"content":"使用docker-compose 首次登录地址: http://127.0.0.1:3000/,帐号密码admin,admin [root@dev127 cig]# cat docker-compose.yml version: '3.1' volumes: grafana_data: {} services: influxdb: image: tutum/influxdb:0.9 restart: always environment: - PRE_CREATE_DB=cadvisor ports: - \"8083:8083\" - \"8086:8086\" volumes: - /data/influxdb:/data cadvisor: image: google/cadvisor restart: always ports: - \"8082:8080\" volumes: - /:/rootfs:ro - /var/run:/var/run:rw - /sys:/sys:ro - /var/lib/docker/:/var/lib/docker:ro grafana: user: \"104\" image: grafana/grafana user: \"104\" restart: always links: - influxdb:influxsrv ports: - \"3000:3000\" volumes: - grafana_data:/var/lib/grafana environment: - HTTP_USER=admin - HTTP_PASS=admin - INFLUXDB_HOST=influxsrv - INFLUXDB_PORT=8086 - INFLUXDB_NAME=cadvisor - INFLUXDB_USER=root - INFLUXDB_PASS=root ","date":"2023-02-17","objectID":"/grafana/:3:1","tags":["grafana","监控"],"title":"Grafana","uri":"/grafana/"},{"categories":["docker"],"content":"直接通过命令来启动 #!/bin/bash basedir=$(cd `dirname $0`;pwd) docker stop grafana docker rm grafana docker run \\ -d --name grafana -p 3000:3000 \\ -e \"GF_SERVER_ROOT_URL=http://grafana.server.name\" \\ -e \"GF_SECURITY_ADMIN_PASSWORD=123456\" \\ grafana/grafana grafana ","date":"2023-02-17","objectID":"/grafana/:3:2","tags":["grafana","监控"],"title":"Grafana","uri":"/grafana/"},{"categories":["net","linux"],"content":".DS_Store信息泄漏 ","date":"2023-02-16","objectID":"/server-safe-ds_store/:0:0","tags":["网络安全"],"title":".DS_Store信息泄漏","uri":"/server-safe-ds_store/"},{"categories":["net","linux"],"content":"威胁等级 低危 ","date":"2023-02-16","objectID":"/server-safe-ds_store/:1:0","tags":["网络安全"],"title":".DS_Store信息泄漏","uri":"/server-safe-ds_store/"},{"categories":["net","linux"],"content":"漏洞类型 应用漏洞 ","date":"2023-02-16","objectID":"/server-safe-ds_store/:2:0","tags":["网络安全"],"title":".DS_Store信息泄漏","uri":"/server-safe-ds_store/"},{"categories":["net","linux"],"content":"漏洞描述 Web 目录下存在 .DS_Store 文件，这个文件是由 MacOS 生成的隐藏文件，其中包含了当前目录下的所有文件名。如果 Web 目录存在此文件，将会导致 Web 目录下的文件列表泄露，可能会造成安全问题。 ","date":"2023-02-16","objectID":"/server-safe-ds_store/:3:0","tags":["网络安全"],"title":".DS_Store信息泄漏","uri":"/server-safe-ds_store/"},{"categories":["net","linux"],"content":"修复方案 删除 .DS_Store 文件 ","date":"2023-02-16","objectID":"/server-safe-ds_store/:4:0","tags":["网络安全"],"title":".DS_Store信息泄漏","uri":"/server-safe-ds_store/"},{"categories":["mysql"],"content":"mysql FAQ ","date":"2023-02-15","objectID":"/mysql-faq/:0:0","tags":["mysql"],"title":"mysql FAQ","uri":"/mysql-faq/"},{"categories":["mysql"],"content":"常用查询 查看版本号 select version(); +-----------+ | version() | +-----------+ | 5.6.51-log | +-----------+ 1 row in set (0.03 sec) 查看数据库编码 show variables like 'char%'; +------------------------+--------------------------+ | Variable_name | Value | +------------------------+--------------------------+ | character_set_client | utf8mb4 | | character_set_connection | utf8mb4 | | character_set_database | utf8mb4 | | character_set_filesystem | binary | | character_set_results | utf8mb4 | | character_set_server | utf8mb4 | | character_set_system | utf8 | | character_sets_dir | /usr/share/mysql/charsets/ | +------------------------+--------------------------+ 查看当前mysql提供哪些引擎 show engines; 查看当前默认存储引擎 show variables like '%storage_engine%'; 查看表tb_a用了什么引擎 show create table tb_a; 如批量替换字符串前缀 UPDATE t_shop SET img = REPLACE(img, 'https://a.com', 'https://b.com') WHERE img LIKE 'https://a.com.net%'; mysql替换字符串中的部分字符 UPDATE t_account SET note = REPLACE(note, 'www.aaa.com', 'wwww.bbb.com'); ","date":"2023-02-15","objectID":"/mysql-faq/:0:1","tags":["mysql"],"title":"mysql FAQ","uri":"/mysql-faq/"},{"categories":["mysql"],"content":"案例 一次机器断点后发现mysql(mysql8)无法自动重启了。排查后发现原因是mysql日志文件夹没有权限，为什么会出现mysql日志文件夹没有权限呢？因为之前因为磁盘快满了，删日志的同学mysql的整个日志目录都删掉了。解决方法是创建mysql日志目录并添加权限。 mkdir /var/log/mysql chown mysql:mysql /var/log/mysql/ ","date":"2023-02-15","objectID":"/mysql-faq/:1:0","tags":["mysql"],"title":"mysql FAQ","uri":"/mysql-faq/"},{"categories":["centos","mysql"],"content":"centos 安装使用mysqldiff,mysqldbcompare ","date":"2023-02-15","objectID":"/mysqldiff/:0:0","tags":["centos","mysql","mysqldiff","mysqldbcompare"],"title":"centos 安装使用mysqldiff,mysqldbcompare","uri":"/mysqldiff/"},{"categories":["centos","mysql"],"content":"下载 wget https://downloads.mysql.com/archives/get/p/30/file/mysql-utilities-1.6.5.tar.gz ","date":"2023-02-15","objectID":"/mysqldiff/:1:0","tags":["centos","mysql","mysqldiff","mysqldbcompare"],"title":"centos 安装使用mysqldiff,mysqldbcompare","uri":"/mysqldiff/"},{"categories":["centos","mysql"],"content":"安装 错误提示(如果用yum命令安装或者使用rpm包安装可能会出现） from mysql.utilities.common.tools import check_python_version 解决办法是使用源码编译安装（python使用python2) tar -zxvf mysql-utilities-1.6.5.tar.gz cd mysql-utilities-1.6.5/ python2 ./setup.py build python2 ./setup.py install ","date":"2023-02-15","objectID":"/mysqldiff/:2:0","tags":["centos","mysql","mysqldiff","mysqldbcompare"],"title":"centos 安装使用mysqldiff,mysqldbcompare","uri":"/mysqldiff/"},{"categories":["centos","mysql"],"content":"python默认版本2改3后yum提示错误,修改yum程序文件解决 查看安装的python版本 [root@lzw portainer]# ls /usr/bin | ag python python python2 python2.7 python2.7-config python2-config python3 python3.6 python3.6m python-config 修改/usr/bin/yum和/usr/libexec/urlgrabber-ext-down,将python改为python2 vim /usr/bin/yum #!/usr/bin/python2 vim /usr/libexec/urlgrabber-ext-down #!/usr/bin/python2 ","date":"2023-02-15","objectID":"/mysqldiff/:2:1","tags":["centos","mysql","mysqldiff","mysqldbcompare"],"title":"centos 安装使用mysqldiff,mysqldbcompare","uri":"/mysqldiff/"},{"categories":["centos","mysql"],"content":"使用mysqldiff 对比数据库 [root@dev127 ~]# mysqldiff --server1=root:123456@localhost --server2=root:123456@localhost paoshangdb:paoshangdb_zp # WARNING: Using a password on the command line interface can be insecure. # server1 on localhost: ... connected. # server2 on localhost: ... connected. # WARNING: Objects in server1.paoshangdb but not in server1.paoshangdb_zp: # TABLE: t_formationitem_change_reocrd # PROCEDURE: p_gm_init_hero_test # PROCEDURE: p_gm_init_hero_test_formation_todel # PROCEDURE: p_test # PROCEDURE: p_gm_init_hero_test_todel # PROCEDURE: p_gm_init_hero_test_formation_old # WARNING: Objects in server1.paoshangdb_zp but not in server1.paoshangdb: # TABLE: t_zong_task_guan_config # PROCEDURE: p_zongtask_guan_eventgroup_config # Compare failed. One or more differences found. 对比表 [root@dev127 ~]# mysqldiff --server1=myb:123456@localhost --server2=myb:123456@localhost paoshangdb.t_account:paoshangdb_zp.t_account # WARNING: Using a password on the command line interface can be insecure. # server1 on localhost: ... connected. # server2 on localhost: ... connected. # Comparing paoshangdb.t_account to paoshangdb_zp.t_account [PASS] # Success. All objects are the same. ","date":"2023-02-15","objectID":"/mysqldiff/:3:0","tags":["centos","mysql","mysqldiff","mysqldbcompare"],"title":"centos 安装使用mysqldiff,mysqldbcompare","uri":"/mysqldiff/"},{"categories":["centos","mysql"],"content":"使用mysqldbcompare mysqldbcompare --server1=myb:123456@localhost --server2=myb:'123456'@127.0.0.1:8803 \\ --changes-for=server1 \\ --difftype=sql \\ --skip-checksum-table \\ --skip-data-check \\ --skip-row-count \\ --run-all-tests paoshangdb_zp:paoshangdb ","date":"2023-02-15","objectID":"/mysqldiff/:4:0","tags":["centos","mysql","mysqldiff","mysqldbcompare"],"title":"centos 安装使用mysqldiff,mysqldbcompare","uri":"/mysqldiff/"},{"categories":["centos","mysql"],"content":"参考 源码编译安装mysql utilities: https://blog.csdn.net/xfxfxfxfxf666/article/details/101164604 ","date":"2023-02-15","objectID":"/mysqldiff/:5:0","tags":["centos","mysql","mysqldiff","mysqldbcompare"],"title":"centos 安装使用mysqldiff,mysqldbcompare","uri":"/mysqldiff/"},{"categories":["centos","mysql"],"content":"总结 安装mysqldiff会遇到python依赖问题，当前版本的mysqldiff依赖python2。（希望python2快点淘汰掉吧） mysqldiff 对于简单的数据库以及表对比还是比较有用的。 yum 依赖python2,如果把系统默认的python版本软链接到了python3记得需要修改yum程序开头python的版本(vim /usr/bin/yum) ","date":"2023-02-15","objectID":"/mysqldiff/:6:0","tags":["centos","mysql","mysqldiff","mysqldbcompare"],"title":"centos 安装使用mysqldiff,mysqldbcompare","uri":"/mysqldiff/"},{"categories":["硬件"],"content":"S905l3a安装emuelec游戏系统 s905l3a是s905x2的运营商定制版 ","date":"2023-02-14","objectID":"/s905l3a-emuelec/:0:0","tags":["硬件","电视盒子"],"title":"S905l3a安装emuelec游戏系统","uri":"/s905l3a-emuelec/"},{"categories":["硬件"],"content":"s905l3a魔百盒硬件信息 rom:2G ram:16G ","date":"2023-02-14","objectID":"/s905l3a-emuelec/:1:0","tags":["硬件","电视盒子"],"title":"S905l3a安装emuelec游戏系统","uri":"/s905l3a-emuelec/"},{"categories":["硬件"],"content":"教程 视频教程: https://www.bilibili.com/video/BV1ye4y1e76X 镜像下载: https://www.emuelec.cn/403.html ","date":"2023-02-14","objectID":"/s905l3a-emuelec/:2:0","tags":["硬件","电视盒子"],"title":"S905l3a安装emuelec游戏系统","uri":"/s905l3a-emuelec/"},{"categories":["硬件"],"content":"一款耳机线断了修复过程 最近自用的一款耳机线，靠近插头处的线被折断了，因为太靠近插头了，只能买个新的插头了。某多购买了一款，价格只有1.75元，加上券的优惠，到手0.75元。 ","date":"2023-02-14","objectID":"/hardware-erji/:0:0","tags":["硬件"],"title":"一款耳机线断了修复过程","uri":"/hardware-erji/"},{"categories":["硬件"],"content":"接法： 耳机2根线，剥去外皮，里面总共有4根线：2黄，1红，1绿。2黄接公共地端(G)，红为（R)右声道，绿线为左（L)声道。 里面的尼龙线只是起到一个加强作用，抗拉扯的。 ","date":"2023-02-14","objectID":"/hardware-erji/:1:0","tags":["硬件"],"title":"一款耳机线断了修复过程","uri":"/hardware-erji/"},{"categories":["硬件"],"content":"参考 https://blog.csdn.net/qq_27718231/article/details/109180024 https://post.smzdm.com/p/673748/ ","date":"2023-02-14","objectID":"/hardware-erji/:2:0","tags":["硬件"],"title":"一款耳机线断了修复过程","uri":"/hardware-erji/"},{"categories":["docker","linux"],"content":"构建自己的centos Docker镜像 ","date":"2023-02-09","objectID":"/docker-dockerfile/:0:0","tags":["docker","linux"],"title":"构建自己的centos Docker镜像","uri":"/docker-dockerfile/"},{"categories":["docker","linux"],"content":"编写Dockerfile 注意这里需要把需要的包(protobuf2.6.1)先拷贝到相应的目录tools中去 # 基础镜像，这里选用centos FROM centos:7.9.2009 # 镜像所有者 MAINTAINER cfanzp \"cfan.zp@qq.com\" # 1.准备工作创建文件夹 RUN \\ mkdir -p /data/tools \\ \u0026\u0026 mkdir /data/log # 复制文件，将要安装的jdk、redis及nginx安装包复制到镜像内 #COPY redis.conf /etc/redis/redis.conf #COPY supervisord.conf /etc/supervisord.conf RUN yum -y install epel-release RUN yum -y install htop #安装vim编辑器 RUN yum -y install vim #安装gcc等编译环境 RUN yum -y install automake libtool make RUN yum -y install git tmux gcc gcc-c++ openssl-devel autoconf automake RUN yum -y install libtool readline-devel zlib-devel unzip RUN yum -y install the_silver_searcher lrzsz iptables-services # skynet console RUN yum -y install rlwrap nc #gcc11 RUN yum -y install centos-release-scl RUN yum -y install devtoolset-11-gcc* RUN echo \"source /opt/rh/devtoolset-11/enable\" \u003e\u003e/etc/profile RUN source /etc/profile ## install protobuf COPY ./tools/protobuf-2.6.1-test1.5.0.tar.gz /data/tools/ RUN cd /data/tools/ \\ \u0026\u0026 tar -xzvf protobuf-2.6.1-test1.5.0.tar.gz \\ \u0026\u0026 cd protobuf-2.6.1-test1.5.0 \\ \u0026\u0026 ./autogen.sh \\ \u0026\u0026 ./configure \\ \u0026\u0026 make \u0026\u0026 make install # 安装 sshd 修改密码 RUN \\ yum install passwd openssl openssh-server -y \\ \u0026\u0026 ssh-keygen -q -t rsa -b 2048 -f /etc/ssh/ssh_host_rsa_key -N '' \\ \u0026\u0026 ssh-keygen -q -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -N '' \\ \u0026\u0026 ssh-keygen -t dsa -f /etc/ssh/ssh_host_ed25519_key -N '' \\ \u0026\u0026 sed -i \"s/#UsePrivilegeSeparation.*/UsePrivilegeSeparation no/g\" /etc/ssh/sshd_config \\ \u0026\u0026 sed -i \"s/UsePAM.*/UsePAM no/g\" /etc/ssh/sshd_config \\ \u0026\u0026 echo 123456 | passwd --stdin root \\ \u0026\u0026 echo root:123456|chpasswd \\ \u0026\u0026 rm -rf /var/cache/yum/** # 安装supervisor,这个工具会提供一个主线程，避免出现由于后台应用无法启动而造成镜像无法启动 #RUN \\ # yum install -y python-setuptools \\ # \u0026\u0026 easy_install supervisor #清除yum缓存 #RUN \\ # rm -rdf /var/cache/yum/** #配置jdk环境变量 #ENV JAVA_HOME=/opt/tools/jdk1.8.0_191 #ENV CLASSPATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar #ENV PATH=$PATH:$JAVA_HOME/bin #配置系统编码 #ENV LANG en_US.utf8 #CMD /usr/bin/supervisord -c /etc/supervisord.conf #CMD /usr/sbin/init ","date":"2023-02-09","objectID":"/docker-dockerfile/:1:0","tags":["docker","linux"],"title":"构建自己的centos Docker镜像","uri":"/docker-dockerfile/"},{"categories":["docker","linux"],"content":"构建镜像 docker build -t centos_dev:latest . ","date":"2023-02-09","objectID":"/docker-dockerfile/:2:0","tags":["docker","linux"],"title":"构建自己的centos Docker镜像","uri":"/docker-dockerfile/"},{"categories":["docker","linux"],"content":"启动容器 docker run -idt --name centos_dev1 centos_dev:latest /bin/bash ","date":"2023-02-09","objectID":"/docker-dockerfile/:3:0","tags":["docker","linux"],"title":"构建自己的centos Docker镜像","uri":"/docker-dockerfile/"},{"categories":["docker","linux"],"content":"docker FAQ ","date":"2023-02-09","objectID":"/docker-faq/:0:0","tags":["docker","linux"],"title":"Docker FAQ","uri":"/docker-faq/"},{"categories":["docker","linux"],"content":"ubuntu20.04如何安装docker 参考: https://blog.csdn.net/s_daqing/article/details/128982516 cat /proc/version sudo apt-get update sudo apt-get install ca-certificates curl gnupg lsb-release sudo mkdir -p /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg #install sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin sudo docker version config sudo systemctl start docker sudo systemctl enable docker sudo docker run hello-world docker-compose: https://github.com/docker/compose/releases proxychains4 sudo wget https://github.com/docker/compose/releases/download/v2.16.0/docker-compose-linux-x86_64 ","date":"2023-02-09","objectID":"/docker-faq/:1:0","tags":["docker","linux"],"title":"Docker FAQ","uri":"/docker-faq/"},{"categories":["docker","linux"],"content":"centos7如何安装docker https://developer.aliyun.com/article/765545 ","date":"2023-02-09","objectID":"/docker-faq/:2:0","tags":["docker","linux"],"title":"Docker FAQ","uri":"/docker-faq/"},{"categories":["docker","linux"],"content":"常见报错 无法拉去镜像文件 [root@dev129 docker]# docker run hello-world Unable to find image 'hello-world:latest' locally docker: Error response from daemon: Head \"https://registry-1.docker.io/v2/library/hello-world/manifests/latest\": dial tcp: lookup registry-1.docker.io on 192.168.2.1:53: no such host. 解决方案 修改/etc/resolv.conf配置 老DNS配置 ## Generated by NetworkManager nameserver 192.168.2.1 nameserver 8.8.8.8 新DNS配置 ## Generated by NetworkManager nameserver 8.8.8.8 nameserver 8.8.4.4 ","date":"2023-02-09","objectID":"/docker-faq/:2:1","tags":["docker","linux"],"title":"Docker FAQ","uri":"/docker-faq/"},{"categories":["docker","linux"],"content":"命令相关 如何查看docker版本? docker version 如何启动docker systemctl start docker.service 如何下载镜像，例如下载mysql5.6 docker pull mysql:5.6 如何查看运行的容器 docker ps 如何查看所有的容器（包括未运行的） docker ps -a 如何查看所有容器资源消耗 docker stats 如何构建自己的镜像 编写Dockerfile,然后构建镜像:docker build -t 镜像名 . docker的centos镜像如何修改时区? 可以参考 https://cloud.tencent.com/developer/article/1626811 ENV TZ Asia/Shanghai RUN ln -fs /usr/share/zoneinfo/${TZ} /etc/localtime \\ \u0026\u0026 echo ${TZ} \u003e /etc/timezone 如何更新宿主机的内核版本? https://www.cnblogs.com/iwalkman/p/9736856.html ","date":"2023-02-09","objectID":"/docker-faq/:3:0","tags":["docker","linux"],"title":"Docker FAQ","uri":"/docker-faq/"},{"categories":["docker","linux"],"content":"部署案例 ","date":"2023-02-09","objectID":"/docker-faq/:4:0","tags":["docker","linux"],"title":"Docker FAQ","uri":"/docker-faq/"},{"categories":["docker","linux"],"content":"samba如何部署? dperson/samba: https://hub.docker.com/r/dperson/samba https://blog.csdn.net/hanhui22/article/details/106684029 [root@dev127 docker]# cat docker_create_and_run.sh docker run -it --name samba -p 139:139 -p 445:445 \\ -v /home/shared:/mount \\ -d dperson/samba \\ -w \"WORKGROUP\" \\ -u \"shared;123456\" \\ -s \"share;/mount/;yes;no;no;all;none\" 遇到客户端缓存,修改密码后无法登录，如何清除? 参考: https://blog.csdn.net/weixin_43279032/article/details/115467120 net user net user \\\\192.168.2.128\\share /del ","date":"2023-02-09","objectID":"/docker-faq/:4:1","tags":["docker","linux"],"title":"Docker FAQ","uri":"/docker-faq/"},{"categories":["docker","linux"],"content":"frps如何部署? [root@centos frp]# cat docker_create_and_start.sh NAME=frps IMAGE=snowdreamtech/frps docker stop $NAME docker rm $NAME docker run --restart=on-failure:3 \\ --network host \\ -v /opt/frp/frps.ini:/etc/frp/frps.ini \\ -v /opt/frp/log:/var/log/frp \\ -d --name $NAME $IMAGE ","date":"2023-02-09","objectID":"/docker-faq/:4:2","tags":["docker","linux"],"title":"Docker FAQ","uri":"/docker-faq/"},{"categories":["docker","linux"],"content":"frpc如何部署? [root@centos frp]# cat docker_create_and_start.sh NAME=frpc IMAGE=snowdreamtech/frpc docker stop $NAME docker rm $NAME docker run --restart=on-failure:3 \\ --network host \\ -v /opt/frp/frpc.ini:/etc/frp/frpc.ini \\ -v /opt/frp/log:/var/log/frp \\ -d --name $NAME $IMAGE ","date":"2023-02-09","objectID":"/docker-faq/:4:3","tags":["docker","linux"],"title":"Docker FAQ","uri":"/docker-faq/"},{"categories":["docker","linux"],"content":"portainer 如何部署? [root@centos portainer]# cat create_run_docker_portainer.sh docker run -d -p 19000:9000 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer ","date":"2023-02-09","objectID":"/docker-faq/:4:4","tags":["docker","linux"],"title":"Docker FAQ","uri":"/docker-faq/"},{"categories":["docker","linux"],"content":"如何拿到默认配置？ 再配置容器的时候，经常会遇到需要配置文件的问题，容器中程序版本不同，配置文件也不一样。 可以去对于程序的官网下载对应的配置文件。 可以从容器中拷贝配置文件。 进入容器,查看配置文件 docker run --rm -it --entrypoint=sh prom/prometheus 查看容器的id docker ps docker cp a6970716a3e6:/etc/prometheus/ /opt/prometheus/ ","date":"2023-02-09","objectID":"/docker-faq/:4:5","tags":["docker","linux"],"title":"Docker FAQ","uri":"/docker-faq/"},{"categories":["docker","linux"],"content":"phpMyAdmin如何部署? docker pull phpmyadmin docker run --name myadmin -d -e PMA_ARBITRARY=1 -p 6380:80 phpmyadmin/phpmyadmin 相关参数说明 PMA_ARBITRARY -设置为1时，将允许连接到任意服务器 PMA_HOST -定义MySQL服务器的地址/主机名 PMA_VERBOSE -定义MySQL服务器的详细名称 PMA_VERBOSES -定义以逗号分隔的MySQL服务器详细名称列表 PMA_PORT -定义MySQL服务器的端口 PMA_HOSTS -定义逗号分隔的MySQL服务器的地址/主机名列表 PMA_PORTS -定义以逗号分隔的MySQL服务器端口列表 PMA_USER和PMA_PASSWORD-定义用于配置身份验证方法的用户名 PMA_ABSOLUTE_URI -定义面向用户的URI HIDE_PHP_VERSION-如果定义，则将隐藏php版本（expose_php = Off）。设置为任何值（例如HIDE_PHP_VERSION = true）。 UPLOAD_LIMIT -如果设置，将覆盖apache和php-fpm的默认值（默认值为2048 kb） PMA_CONFIG_BASE64 -如果设置，将使用变量的base64解码内容覆盖默认的config.inc.php PMA_USER_CONFIG_BASE64 -如果设置，将使用变量的base64解码内容覆盖默认的config.user.inc.php ","date":"2023-02-09","objectID":"/docker-faq/:4:6","tags":["docker","linux"],"title":"Docker FAQ","uri":"/docker-faq/"},{"categories":["docker","linux"],"content":"docker监控 可以参考CAdvisor + InfluxDB + Grafana方案: https://www.cnblogs.com/coding-diary/p/12069675.html https://blog.csdn.net/qq_42543063/article/details/123084509 ","date":"2023-02-09","objectID":"/docker-faq/:5:0","tags":["docker","linux"],"title":"Docker FAQ","uri":"/docker-faq/"},{"categories":["docker","linux"],"content":"常用grafana模板 windows exporter 12566: https://grafana.com/grafana/dashboards/12566-3-windows-exporter-0-7-0-for-prometheus-windows/ redis exporter 11835: https://grafana.com/grafana/dashboards/11835-redis-dashboard-for-prometheus-redis-exporter-helm-stable-redis-ha/ node-exporter https://blog.csdn.net/qq_37688023/article/details/106532101 mysqld-exporter: https://blog.csdn.net/qq_44246980/article/details/119981183 cAdvisor https://cloud.tencent.com/developer/article/1748430 windows_exporter 推荐: https://grafana.com/grafana/dashboards/10467-1-windows-exporter-for-prometheus-dashboard-cn-v20201012/ windows_exporter: https://blog.csdn.net/qq_41554118/article/details/118309457 download: https://github.com/prometheus-community/windows_exporter/releases https://blog.csdn.net/weixin_43420337/article/details/90511003 redis_exporter https://blog.csdn.net/y_bccl27/article/details/127601500 prometheus 配置demo [root@dev127 etc]# cat prometheus.yml # my global config global: scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute. evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute. # scrape_timeout is set to the global default (10s). # Alertmanager configuration alerting: alertmanagers: - static_configs: - targets: # - alertmanager:9093 # Load rules once and periodically evaluate them according to the global 'evaluation_interval'. rule_files: # - \"first_rules.yml\" # - \"second_rules.yml\" # A scrape configuration containing exactly one endpoint to scrape: # Here it's Prometheus itself. scrape_configs: # The job name is added as a label `job=\u003cjob_name\u003e` to any timeseries scraped from this config. - job_name: \"prometheus\" # metrics_path defaults to '/metrics' # scheme defaults to 'http'. static_configs: - targets: [\"192.168.2.127:8082\"] - job_name: \"docker-dev129\" # metrics_path defaults to '/metrics' # scheme defaults to 'http'. static_configs: - targets: [\"192.168.2.129:8085\"] - job_name: \"redis-dev127-paoshang\" # metrics_path defaults to '/metrics' # scheme defaults to 'http'. static_configs: - targets: [\"192.168.2.127:9121\"] - job_name: \"node-dev127\" # metrics_path defaults to '/metrics' # scheme defaults to 'http'. static_configs: - targets: [\"192.168.2.127:8084\"] - job_name: \"node-dev129\" # metrics_path defaults to '/metrics' # scheme defaults to 'http'. static_configs: - targets: [\"192.168.2.129:8084\"] - job_name: \"node-win158\" # metrics_path defaults to '/metrics' # scheme defaults to 'http'. static_configs: - targets: [\"192.168.2.158:9182\"] - job_name: \"node-win189\" # metrics_path defaults to '/metrics' # scheme defaults to 'http'. static_configs: - targets: [\"192.168.2.189:9182\"] - job_name: \"node-win118\" # metrics_path defaults to '/metrics' # scheme defaults to 'http'. static_configs: - targets: [\"192.168.2.118:9182\"] ","date":"2023-02-09","objectID":"/docker-faq/:5:1","tags":["docker","linux"],"title":"Docker FAQ","uri":"/docker-faq/"},{"categories":["docker","linux"],"content":"部署filebrowser 默认用户名密码admin docker run -d -v /data/dockerrun/filebrowser/sites/root:/srv \\ -v /data/dockerrun/filebrowser/filebrowserconfig.json:/etc/config.json \\ -v /data/dockerrun/filebrowser/database.db:/etc/database.db \\ -p 80:80 filebrowser/filebrowser https://github.com/filebrowser/filebrowser ","date":"2023-02-09","objectID":"/docker-faq/:5:2","tags":["docker","linux"],"title":"Docker FAQ","uri":"/docker-faq/"},{"categories":["docker","linux"],"content":"如何部署自己的私有docker仓库 参考: https://blog.csdn.net/qq_40213055/article/details/122997250 ","date":"2023-02-09","objectID":"/docker-faq/:5:3","tags":["docker","linux"],"title":"Docker FAQ","uri":"/docker-faq/"},{"categories":["硬件"],"content":"电视盒子的游戏系统Emuelec ","date":"2023-02-09","objectID":"/tvbox-emuelec/:0:0","tags":["emuelec","电视盒子"],"title":"电视盒子的游戏系统Emuelec","uri":"/tvbox-emuelec/"},{"categories":["硬件"],"content":"参考链接 emuelec中文网: https://www.emuelec.cn/ ","date":"2023-02-09","objectID":"/tvbox-emuelec/:1:0","tags":["emuelec","电视盒子"],"title":"电视盒子的游戏系统Emuelec","uri":"/tvbox-emuelec/"},{"categories":["docker","mysql","linux"],"content":"Docker安装运行Mysql ","date":"2023-02-09","objectID":"/docker-mysql/:0:0","tags":["docker","mysql","linux"],"title":"Docker安装运行Mysql","uri":"/docker-mysql/"},{"categories":["docker","mysql","linux"],"content":"编写docker-compose文件mysql.yaml version: '3' #设置docker compose 版本 services: #设置services mysql: image: mysql:5.6 container_name: dev127_mysql restart: always ports: - 3306:3306 volumes: #指定挂载目录 - /data/dockerrun/mysql/conf:/etc/mysql/conf.d - /data/dockerrun/mysql/conf:/etc/mysql/mysql.conf.d - /data/dockerrun/mysql/data:/var/lib/mysql - /data/dockerrun/mysql/logs:/var/lib/mysql/error.log environment: MYSQL_ROOT_PASSWORD: test123456 MYSQL_DATABASE: test MYSQL_USER: test123 MYSQL_PASSWORD: test123456 ","date":"2023-02-09","objectID":"/docker-mysql/:1:0","tags":["docker","mysql","linux"],"title":"Docker安装运行Mysql","uri":"/docker-mysql/"},{"categories":["docker","mysql","linux"],"content":"编写启动脚本:start_dev127_mysql.sh docker-compose -f mysql.yaml up -d ","date":"2023-02-09","objectID":"/docker-mysql/:2:0","tags":["docker","mysql","linux"],"title":"Docker安装运行Mysql","uri":"/docker-mysql/"},{"categories":["docker","mysql","linux"],"content":"关闭脚本 docker stop dev127_mysql ","date":"2023-02-09","objectID":"/docker-mysql/:3:0","tags":["docker","mysql","linux"],"title":"Docker安装运行Mysql","uri":"/docker-mysql/"},{"categories":["linux"],"content":"ubuntu20.04中使用Anbox ","date":"2023-02-07","objectID":"/linux-anbox/:0:0","tags":["anbox","linux"],"title":"Linux安装使用Anbox","uri":"/linux-anbox/"},{"categories":["linux"],"content":"install https://github.com/anbox/anbox/blob/master/docs/install.md sudo snap install --devmode --edge anbox ","date":"2023-02-07","objectID":"/linux-anbox/:1:0","tags":["anbox","linux"],"title":"Linux安装使用Anbox","uri":"/linux-anbox/"},{"categories":["linux"],"content":"解决anbox无法安装apk 安装报错 anbox failed to extract native libraries, res=-113] ","date":"2023-02-07","objectID":"/linux-anbox/:2:0","tags":["anbox","linux"],"title":"Linux安装使用Anbox","uri":"/linux-anbox/"},{"categories":["linux"],"content":"解决方案: https://github.com/geeks-r-us/anbox-playstore-installer/blob/master/install-playstore.sh https://linux.cn/article-10281-1.html https://juejin.cn/post/7152407243974148127 ","date":"2023-02-07","objectID":"/linux-anbox/:2:1","tags":["anbox","linux"],"title":"Linux安装使用Anbox","uri":"/linux-anbox/"},{"categories":["linux"],"content":"参考 https://blog.csdn.net/ZhangRelay/article/details/84465548 Anbox github: https://github.com/anbox/anbox Anbox zhihu: https://zhuanlan.zhihu.com/p/65463076 下载失败继续下载: https://blog.csdn.net/hillyfighting/article/details/106692642 https://eightplus.github.io/2019/08/14/2019-08-14-install-anbox/ ","date":"2023-02-07","objectID":"/linux-anbox/:3:0","tags":["anbox","linux"],"title":"Linux安装使用Anbox","uri":"/linux-anbox/"},{"categories":["linux"],"content":"如何在linux中使用xrandr ","date":"2023-02-02","objectID":"/linux-xrandr/:0:0","tags":["linux","xrandr","i3wm","dwm"],"title":"如何在linux中使用xrandr","uri":"/linux-xrandr/"},{"categories":["linux"],"content":"查询显示设备信息 xrandr -q ","date":"2023-02-02","objectID":"/linux-xrandr/:1:0","tags":["linux","xrandr","i3wm","dwm"],"title":"如何在linux中使用xrandr","uri":"/linux-xrandr/"},{"categories":["linux"],"content":"多屏显示 ","date":"2023-02-02","objectID":"/linux-xrandr/:2:0","tags":["linux","xrandr","i3wm","dwm"],"title":"如何在linux中使用xrandr","uri":"/linux-xrandr/"},{"categories":["linux"],"content":"i3wm中使用方法 vim ~/.config/i3/config exec xrandr --output HDMI-1-2 --auto --right-of HDMI-3 exec xrandr --output HDMI-3 --auto --primary ","date":"2023-02-02","objectID":"/linux-xrandr/:2:1","tags":["linux","xrandr","i3wm","dwm"],"title":"如何在linux中使用xrandr","uri":"/linux-xrandr/"},{"categories":["linux"],"content":"dwm中使用方法 vim ~/.dwm/autostart.sh xrandr --output HDMI-1-2 --auto --right-of HDMI-3 xrandr --output HDMI-3 --auto --primary ","date":"2023-02-02","objectID":"/linux-xrandr/:2:2","tags":["linux","xrandr","i3wm","dwm"],"title":"如何在linux中使用xrandr","uri":"/linux-xrandr/"},{"categories":["linux"],"content":"参考 https://linuxconfig.org/how-to-configure-your-monitors-with-xrandr-in-linux ","date":"2023-02-02","objectID":"/linux-xrandr/:3:0","tags":["linux","xrandr","i3wm","dwm"],"title":"如何在linux中使用xrandr","uri":"/linux-xrandr/"},{"categories":["linux"],"content":"总结 xrandr平时都使用不到，主要是在使用平铺式桌面管理器如i3wm,dwm时需要用到。简单适用。 ","date":"2023-02-02","objectID":"/linux-xrandr/:4:0","tags":["linux","xrandr","i3wm","dwm"],"title":"如何在linux中使用xrandr","uri":"/linux-xrandr/"},{"categories":["linux"],"content":"dwm的安装与使用 ","date":"2023-01-31","objectID":"/dwm/:0:0","tags":["dwm"],"title":"dwm的安装与使用","uri":"/dwm/"},{"categories":["linux"],"content":"ubuntu 安装dwm sudo apt-get install suckless-tools libx11-dev libxft-dev libxinerama-dev gcc make sudo apt install compton sudo apt install feh sudo apt install acpi acpitool sudo apt install light sudo apt install numlockx 添加启动选项 具体配置方式，进入/usr/share/xsessions/目录，新建文件dwm.desktop,输入内容： [Desktop Entry] Encoding=UTF-8 Name=Dwm Comment=Dynamic window manager Exec=dwm Icon=dwm Type=XSession 使用字符界面登录 使用startx命令从文字界面启动 此方式开机更加快速，使用更加灵活，系统资源占用更少。 首先将系统改为默认进入文字界面 修改grub配置,打开文件/etc/default/grub, 将GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash\" 改为GRUB_CMDLINE_LINUX_DEFAULT=\"text\" 然后执行命令 $ sudo update-grub 将启动等级改为多用户等级，执行如下命令： $ systemctl set-default multi-user.target 如果想改回启动图形界面执行下面 $ systemctl set-default graphical.target 最后修改~/.xsession文件（如果没有就新建），在最后一行加入 exec dwm 重启电脑，执行startx命令，直接进入dwm，同时也可以执行sudo systemctl start gdm.service命令，打开gdm3的用户登录界面。 ","date":"2023-01-31","objectID":"/dwm/:0:1","tags":["dwm"],"title":"dwm的安装与使用","uri":"/dwm/"},{"categories":["linux"],"content":"下载 git clone https://git.suckless.org/dwm ","date":"2023-01-31","objectID":"/dwm/:0:2","tags":["dwm"],"title":"dwm的安装与使用","uri":"/dwm/"},{"categories":["linux"],"content":"快捷键 Mod1表示:Alt,Mod4表示Windows键 dwm问题汇总: https://blog.csdn.net/qq_34548075/article/details/106941934 ","date":"2023-01-31","objectID":"/dwm/:0:3","tags":["dwm"],"title":"dwm的安装与使用","uri":"/dwm/"},{"categories":["linux"],"content":"参考 Ubuntu DWM安装配置文档: https://zhuanlan.zhihu.com/p/262067759 入坑dwm——原来窗口管理器还可以这样用？https://zhuanlan.zhihu.com/p/183861786 ","date":"2023-01-31","objectID":"/dwm/:1:0","tags":["dwm"],"title":"dwm的安装与使用","uri":"/dwm/"},{"categories":["skynet","ubuntu"],"content":"在centos环境下搭建skynet运行环境 ","date":"2023-01-30","objectID":"/skynet-centos/:0:0","tags":["skynet"],"title":"在centos环境下搭建skynet运行环境","uri":"/skynet-centos/"},{"categories":["skynet","ubuntu"],"content":"安装个人偏好软件 ","date":"2023-01-30","objectID":"/skynet-centos/:1:0","tags":["skynet"],"title":"在centos环境下搭建skynet运行环境","uri":"/skynet-centos/"},{"categories":["skynet","ubuntu"],"content":"the_silver_searcher,htop yum install -y the_silver_searcher yum install -y epel-release yum install -y htop ","date":"2023-01-30","objectID":"/skynet-centos/:1:1","tags":["skynet"],"title":"在centos环境下搭建skynet运行环境","uri":"/skynet-centos/"},{"categories":["skynet","ubuntu"],"content":"tmux yum install -y tmux 配置 [root@server ~]# cat ~/.tmux.conf set -g default-terminal \"screen-256color\" set-option -g allow-rename off #-- base settings --# set -g mode-keys vi # prefix key (Ctrl+a) set -g prefix ^a unbind ^b bind ^a send-prefix #up bind-key k select-pane -U #down bind-key j select-pane -D #left bind-key h select-pane -L #right bind-key l select-pane -R ","date":"2023-01-30","objectID":"/skynet-centos/:1:2","tags":["skynet"],"title":"在centos环境下搭建skynet运行环境","uri":"/skynet-centos/"},{"categories":["skynet","ubuntu"],"content":"安装基础依赖 yum install -y git yum install git tmux gcc gcc-c++ openssl-devel autoconf automake yum install libtool readline-devel zlib-devel unzip yum install the_silver_searcher lrzsz iptables-services ","date":"2023-01-30","objectID":"/skynet-centos/:2:0","tags":["skynet"],"title":"在centos环境下搭建skynet运行环境","uri":"/skynet-centos/"},{"categories":["skynet","ubuntu"],"content":"安装gcc11 sudo yum install centos-release-scl sudo yum install devtoolset-11-gcc* echo \"source /opt/rh/devtoolset-11/enable\" \u003e\u003e/etc/profile source /etc/profile gcc -v ","date":"2023-01-30","objectID":"/skynet-centos/:3:0","tags":["skynet"],"title":"在centos环境下搭建skynet运行环境","uri":"/skynet-centos/"},{"categories":["skynet","ubuntu"],"content":"安装curl yum install openssl-devel https://curl.haxx.se/download/ wget https://curl.haxx.se/download/curl-7.78.0.tar.gz 或源码文件中获取i cp tools/curl-7.78.0.tar.gz data/ tar -zxvf curl-7.78.0.tar.gz ./configure --with-openssl make make install ","date":"2023-01-30","objectID":"/skynet-centos/:4:0","tags":["skynet"],"title":"在centos环境下搭建skynet运行环境","uri":"/skynet-centos/"},{"categories":["skynet","ubuntu"],"content":"安装protobuf(依赖gtest) wget https://github.com/google/googletest/archive/release-1.5.0.zip wget https://github.com/google/protobuf/archive/v2.6.1.zip unzip protobuf-2.6.1.zip cd protobuf-2.6.1 tar zxvf protobuf.tar.gz cp tools/googletest/googletest-release-1.5.0.zip ./protobuf-2.6.1/ cd protobuf-2.6.1 mv googletest-release-1.5.0 gtest ./autogen.sh ./configure make -jn //多核编译[n为cpu核数] make check make install ","date":"2023-01-30","objectID":"/skynet-centos/:5:0","tags":["skynet"],"title":"在centos环境下搭建skynet运行环境","uri":"/skynet-centos/"},{"categories":["skynet","ubuntu"],"content":"配置git 缩写 cd tools/git/ cp .gitconfig ~/ ","date":"2023-01-30","objectID":"/skynet-centos/:6:0","tags":["skynet"],"title":"在centos环境下搭建skynet运行环境","uri":"/skynet-centos/"},{"categories":["skynet","ubuntu"],"content":"报错解决 skynet 编译报错 cc -shared -llua -L../skynet/3rd/lua/ -I/usr/local/include -o ../luaclib/webclient.so -fPIC -O3 -Wall -std=c99 -pedantic -I../skynet/3rd/lua webclient.c -L/usr/local/lib -lcurl webclient.c:29:10: fatal error: curl/curl.h: 没有那个文件或目录 29 | #include \u003ccurl/curl.h\u003e | ^~~~~~~~~~~~~ compilation terminated. make[1]: *** [../luaclib/webclient.so] 错误 1 make[1]: 离开目录“/data/lw_gold/lualib-src” make: *** [deps] 错误 2 yum install libcurl-dev libcurl-devel ","date":"2023-01-30","objectID":"/skynet-centos/:7:0","tags":["skynet"],"title":"在centos环境下搭建skynet运行环境","uri":"/skynet-centos/"},{"categories":["skynet","ubuntu"],"content":"skynet console 依赖安装 sudo yum -y install rlwrap sudo yum -y install nc ","date":"2023-01-30","objectID":"/skynet-centos/:8:0","tags":["skynet"],"title":"在centos环境下搭建skynet运行环境","uri":"/skynet-centos/"},{"categories":["skynet","ubuntu"],"content":"redis 安装 redis5.0.4 gcc11 编译报错 参考url: https://github.com/daanx/mimalloc-bench/issues/19 redis build fails with multiple definition of SDS_NOINIT #19 更新版本到7.0.8 redis make test报错 make test You need tcl 8.5 or newer in order to run the Redis test wget http://downloads.sourceforge.net/tcl/tcl8.6.1-src.tar.gz cd ./tcl8.6.1/unix/ ./configure make make install ","date":"2023-01-30","objectID":"/skynet-centos/:9:0","tags":["skynet"],"title":"在centos环境下搭建skynet运行环境","uri":"/skynet-centos/"},{"categories":["skynet","ubuntu"],"content":"mysql 安装 wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm sudo yum install mysql-server service mysqld start #为root添加远程连接的能力。链接密码为 “aaabbb”（不包括双引号） mysql\u003e GRANT ALL PRIVILEGES ON *.* TO root@\"%\" IDENTIFIED BY \"aaabbb\"; ","date":"2023-01-30","objectID":"/skynet-centos/:10:0","tags":["skynet"],"title":"在centos环境下搭建skynet运行环境","uri":"/skynet-centos/"},{"categories":["docker"],"content":"docker安装portainer portainner的安装非常简单，拉取镜像，创建容器，运行容器就搞定了。 ","date":"2023-01-29","objectID":"/docker-portainer/:0:0","tags":["portainer","docker"],"title":"docker安装portainer","uri":"/docker-portainer/"},{"categories":["docker"],"content":"测试环境 docker版本 docker version Docker version 20.10.7, build f0df350 ","date":"2023-01-29","objectID":"/docker-portainer/:1:0","tags":["portainer","docker"],"title":"docker安装portainer","uri":"/docker-portainer/"},{"categories":["docker"],"content":"portainer 安装使用 docker run -d -p 9000:9000 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer ","date":"2023-01-29","objectID":"/docker-portainer/:2:0","tags":["portainer","docker"],"title":"docker安装portainer","uri":"/docker-portainer/"},{"categories":["docker"],"content":"首选回顾一下docker的基本命令 ","date":"2023-01-29","objectID":"/docker-portainer/:3:0","tags":["portainer","docker"],"title":"docker安装portainer","uri":"/docker-portainer/"},{"categories":["docker"],"content":"docker基本命令 查看docker版本: docker version 查看docker基本信息: docker info ","date":"2023-01-29","objectID":"/docker-portainer/:3:1","tags":["portainer","docker"],"title":"docker安装portainer","uri":"/docker-portainer/"},{"categories":["docker"],"content":"镜像命令 搜索镜像: docker search portainer 拉取镜像: docker pull portainer/portainer ","date":"2023-01-29","objectID":"/docker-portainer/:3:2","tags":["portainer","docker"],"title":"docker安装portainer","uri":"/docker-portainer/"},{"categories":["docker"],"content":"容器命令 查看容器: docker ps -a | grep 进入容器: docker exec -it containerId(容器id)/containerName(容器名称) /bin/bash 退出容器: exit或ctrl+d 停止容器: docker stop containerId/containerName 启动容器: docker start containerId/containerName 删除容器: docker rm containerId/containerName 复制宿主机文件到容器：docker cp 宿主机目录及文件 容器名称:容器目录 创建容器:docker run -d -p 9000:9000 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer 查看启动成功的容器: docker ps 查看所有容器: docker ps -a ","date":"2023-01-29","objectID":"/docker-portainer/:3:3","tags":["portainer","docker"],"title":"docker安装portainer","uri":"/docker-portainer/"},{"categories":["docker"],"content":"修改docker源 vim /etc/docker/daemon.json { \"registry-mirrors\": [ \"http://hub-mirror.c.163.com\", \"https://docker.mirrors.ustc.edu.cn\", \"https://registry.docker-cn.com\" ] } ","date":"2023-01-29","objectID":"/docker-portainer/:4:0","tags":["portainer","docker"],"title":"docker安装portainer","uri":"/docker-portainer/"},{"categories":["docker"],"content":"使用docker-compose启动nginx ","date":"2023-01-29","objectID":"/docker-portainer/:5:0","tags":["portainer","docker"],"title":"docker安装portainer","uri":"/docker-portainer/"},{"categories":["docker"],"content":"docker-compose安装 sudo curl -L \"https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose # sudo chmod +x /usr/local/bin/docker-compose # 检查是否安装成功 docker-compose --version ","date":"2023-01-29","objectID":"/docker-portainer/:5:1","tags":["portainer","docker"],"title":"docker安装portainer","uri":"/docker-portainer/"},{"categories":["docker"],"content":"启动默认实例后删除容器(目的是获取配置文件) sudo docker run --name nginx -p 8080:80 -d nginx cd / sudo mkdir /data/dockerrun/nginx8080 cd /data/dockerrrun/nginx8080/ sudo docker cp nginx:/etc/nginx/nginx.conf . sudo docker cp nginx:/etc/nginx/conf.d . sudo docker cp nginx:/usr/share/nginx/html . sudo docker stop nginx sudo docker rm nginx ","date":"2023-01-29","objectID":"/docker-portainer/:5:2","tags":["portainer","docker"],"title":"docker安装portainer","uri":"/docker-portainer/"},{"categories":["docker"],"content":"配置创建docker-compose-nginx.yml文件 sudo touch docker-compose-nginx.yml vim docker-compose-nginx.yml version: '3' services: nginx: container_name: nginx8080 image: nginx restart: always ports: - 8080:80 privileged: true volumes: - /etc/localtime:/etc/localtime:ro - /data/dockerrun/nginx8080/log/:/var/log/nginx - /data/dockerrun/nginx8080/conf.d:/etc/nginx/conf.d - /data/dockerrun/nginx8080/nginx.conf:/etc/nginx/nginx.conf:ro - /data/dockerrun/nginx8080/html:/usr/share/nginx/html ","date":"2023-01-29","objectID":"/docker-portainer/:5:3","tags":["portainer","docker"],"title":"docker安装portainer","uri":"/docker-portainer/"},{"categories":["docker"],"content":"编写启动脚本 sudo touch start_nginx8080.sh sudo chmod +x start_nginx8080.sh vim start_nginx8080.sh sudo docker-compose -f docker-compose-nginx.yml up -d ","date":"2023-01-29","objectID":"/docker-portainer/:5:4","tags":["portainer","docker"],"title":"docker安装portainer","uri":"/docker-portainer/"},{"categories":["docker"],"content":"启动脚本 ./start_nginx8080.sh ","date":"2023-01-29","objectID":"/docker-portainer/:5:5","tags":["portainer","docker"],"title":"docker安装portainer","uri":"/docker-portainer/"},{"categories":["docker"],"content":"参考文档 docker 官方文档: https://docs.docker.com/reference/ docker 构建开发环境: https://zhuanlan.zhihu.com/p/440325928 docker中使用mysql: https://zhuanlan.zhihu.com/p/266534015 ","date":"2023-01-29","objectID":"/docker-portainer/:6:0","tags":["portainer","docker"],"title":"docker安装portainer","uri":"/docker-portainer/"},{"categories":["docker"],"content":"扩展 k8s集群单机部署: https://www.hyhblog.cn/2021/02/17/deployment-manual-k8s-for-newbee/ k8s集群搭建: https://zhuanlan.zhihu.com/p/363978095 docker与podman对比 podman: https://github.com/containers/podman ","date":"2023-01-29","objectID":"/docker-portainer/:7:0","tags":["portainer","docker"],"title":"docker安装portainer","uri":"/docker-portainer/"},{"categories":["docker"],"content":"docker私有仓库方案 aliyun仓库 coding: https://coding.net/help/docs/artifacts/quick-start/docker.html docker registry: https://cloud.tencent.com/developer/article/1676761 ","date":"2023-01-29","objectID":"/docker-portainer/:8:0","tags":["portainer","docker"],"title":"docker安装portainer","uri":"/docker-portainer/"},{"categories":["android"],"content":"使用scrcpy投屏手机到电脑 android手机可以使用adb和scrcpy将手机投屏到电脑，可以实现use连接投屏和wifi投屏。 手机设置：手机设置打开调试模式 adb连接 adb list 查看设置 adb connect ip 连接手机 scrcpy -s deviceid 设备投屏 ","date":"2023-01-14","objectID":"/scrcpy/:0:0","tags":["scrcpy"],"title":"使用scrcpy投屏手机到电脑","uri":"/scrcpy/"},{"categories":["android"],"content":"无线连接注意事项 底层相关配置的属性为：service.adb.tcp.port, \u003e0 adbd将监听网络对应端口，\u003c=-1将监听USB,USB连接电脑后执行下面的命令来设置端口 adb tcpip 5555 #成功提示： restarting in TCP mode port 5555 查看手机ip,连接无线 adb connect 192.168.2.139:5555 检查连接状况 adb devices 调试完后断开连接 adb disconnect 192.168.2.139:5555 重置端口 setprop service.adb.tcp.port -1 stop adbd start adbd ","date":"2023-01-14","objectID":"/scrcpy/:1:0","tags":["scrcpy"],"title":"使用scrcpy投屏手机到电脑","uri":"/scrcpy/"},{"categories":["android"],"content":"参考链接 如何将 Android 手机投屏在 Ubuntu/LinuxMint/Debian 上: https://www.jianshu.com/p/f52e142671f8 adb连接手机的2种方式: https://blog.csdn.net/qq_34329508/article/details/88704243 ","date":"2023-01-14","objectID":"/scrcpy/:2:0","tags":["scrcpy"],"title":"使用scrcpy投屏手机到电脑","uri":"/scrcpy/"},{"categories":["硬件"],"content":"Android TV Launcher ","date":"2023-01-13","objectID":"/android-tv-launcher/:0:0","tags":["android","diy"],"title":"Android Tv Launcher","uri":"/android-tv-launcher/"},{"categories":["硬件"],"content":"开源电视盒子启动器 AndroidTVLauncher: https://github.com/JackyAndroid/AndroidTVLauncher tv launcher: https://github.com/nielsvanvelzen/tv-launcher ","date":"2023-01-13","objectID":"/android-tv-launcher/:1:0","tags":["android","diy"],"title":"Android Tv Launcher","uri":"/android-tv-launcher/"},{"categories":["硬件"],"content":"扩展 各种电视盒子进入调试模式方法: https://zhuanlan.zhihu.com/p/439688223 ","date":"2023-01-13","objectID":"/android-tv-launcher/:2:0","tags":["android","diy"],"title":"Android Tv Launcher","uri":"/android-tv-launcher/"},{"categories":["os"],"content":"Windows Server 2022安装体验 ","date":"2023-01-12","objectID":"/windows-server-2022/:0:0","tags":["windows"],"title":"Windows Server 2022安装体验","uri":"/windows-server-2022/"},{"categories":["os"],"content":"下载 下载与激活: https://www.orcy.net.cn/1882.html slmgr -ipk WX4NM-KYWYW-QJJR4-XV3QB-6VM33 slmgr -skms kms.0t.net.cn slmgr -ato 下载地址: https://w7jj3-my.sharepoint.com/personal/pony_orcycloud_com/_layouts/15/download.aspx?SourceUrl=%2Fpersonal%2Fpony%5Forcycloud%5Fcom%2FDocuments%2FWindowsServer%2Fzh%2Dcn%5Fwindows%5Fserver%5F2022%5Fx64%5Fdvd%5F6c73507d%2Eiso ","date":"2023-01-12","objectID":"/windows-server-2022/:1:0","tags":["windows"],"title":"Windows Server 2022安装体验","uri":"/windows-server-2022/"},{"categories":["os"],"content":"vmware启动刚创建的虚拟系统报错 模块“DevicePowerOn”启动失败。 解决办法: https://blog.csdn.net/Ogita_rina/article/details/120622919 ","date":"2023-01-12","objectID":"/windows-server-2022/:2:0","tags":["windows"],"title":"Windows Server 2022安装体验","uri":"/windows-server-2022/"},{"categories":["os"],"content":"参考 硬件要求: https://learn.microsoft.com/zh-cn/windows-server/administration/performance-tuning/ 安装教程: https://zhuanlan.zhihu.com/p/549580653 ","date":"2023-01-12","objectID":"/windows-server-2022/:3:0","tags":["windows"],"title":"Windows Server 2022安装体验","uri":"/windows-server-2022/"},{"categories":["centos","linux"],"content":"Centos yum安装提示无可用包 centos 在使用yum安装软件的时候，有时候会提示无可用包，这个时候可以先安装一下epel-release软件包， epel(extra packages for enterprise linux)是基于fedora的一个项目，为红毛系列提供额外的软件包，适用于RHEL,CentOS。 ","date":"2023-01-11","objectID":"/centos-epel-release/:0:0","tags":["centos","yum"],"title":"Centos yum安装提示无可用包","uri":"/centos-epel-release/"},{"categories":["centos","linux"],"content":"例如安装htop 提示无可用包 yum -y install htop 解决方案 yum -y install epel-release yum -y install htop ","date":"2023-01-11","objectID":"/centos-epel-release/:1:0","tags":["centos","yum"],"title":"Centos yum安装提示无可用包","uri":"/centos-epel-release/"},{"categories":["硬件","android"],"content":"小米盒子4se精简笔记 小米盒子4se使用有一段时间了，盒子里面的UI太复杂了，不太好用，小米盒子使用的是Android系统，在调试模式下，可以使用Adb进入调试模式，设置当贝桌面或其它简介桌面，卸载掉不需要的app ","date":"2023-01-11","objectID":"/xiaomi-box-4se/:0:0","tags":["电视盒子","android"],"title":"小米盒子4se精简笔记","uri":"/xiaomi-box-4se/"},{"categories":["硬件","android"],"content":"打开调试模式 遥控在产品型号上连按6次。 在账号与安全设置中开启ADB调试。 ","date":"2023-01-11","objectID":"/xiaomi-box-4se/:1:0","tags":["电视盒子","android"],"title":"小米盒子4se精简笔记","uri":"/xiaomi-box-4se/"},{"categories":["硬件","android"],"content":"adb连接设备 我这里是电脑和手机都使用wifi连的一个局域网,查看设备的ip,例如：192.168.2.50 连接设备 adb connect 192.168.2.50 查看设备连接状态 adb devices List of devices attached 192.168.2.50:5555 device 查看当前设备中安装的app adb shell pm list packages package:com.mitv.screensaver package:com.xiaomi.account package:com.mitv.tvhome package:com.mitv.alarmcenter package:com.xiaomi.gamecenter.sdk.service.mibox package:com.mitv.codec.update package:com.mitv.shoplugin package:com.miui.systemAdSolution package:com.miui.daemon package:com.xiaomi.mitv.settings package:com.xiaomi.mitv.providers.settings package:com.xiaomi.mitv.mediaexplorer package:com.xiaomi.mitv.systemui package:com.xiaomi.mibox.lockscreen package:com.mitv.videoplayer package:com.xiaomi.screenrecorder package:com.xiaomi.mitv.smartshare package:com.xiaomi.voicecontrol package:com.xiaomi.tv.nameservice package:com.xiaomi.mimusic2 package:com.xiaomi.upnp package:com.xiaomi.miplay package:com.xiaomi.devicereport package:com.mitv.mivideoplayer package:com.mitv.gallery package:com.miui.tv.analytics package:com.xiaomi.statistic package:com.mitv.care package:com.xiaomi.mitv.remotecontroller.service package:com.xiaomi.account.auth package:com.miui.core package:com.xiaomi.mitv.tvmanager 查看当前设备中安装的和小米有关的主要app adb shell pm list packages | grep mi 安装当贝桌面 adb install ./dbzm.apk 卸载com.miui.systemAdSolution adb shell pm uninstall --user 0 com.miui.systemAdSolution 其它需要卸载的app方法同上。 ","date":"2023-01-11","objectID":"/xiaomi-box-4se/:2:0","tags":["电视盒子","android"],"title":"小米盒子4se精简笔记","uri":"/xiaomi-box-4se/"},{"categories":["硬件","android"],"content":"参考资料 小米盒子精简教程: https://www.znds.com/tv-1181689-1-1.html ","date":"2023-01-11","objectID":"/xiaomi-box-4se/:3:0","tags":["电视盒子","android"],"title":"小米盒子4se精简笔记","uri":"/xiaomi-box-4se/"},{"categories":["硬件","android"],"content":"华为悦盒Ec6108v9刷机笔记 ` 昨天把自己淘的一款EC6108V9的华为盒子刷成了全网通。刷机过程很简单。 ","date":"2023-01-06","objectID":"/huawei-ec6108v9/:0:0","tags":["电视盒子","android"],"title":"华为悦盒Ec6108v9刷机笔记","uri":"/huawei-ec6108v9/"},{"categories":["硬件","android"],"content":"硬件信息 处理器：采用了海思Hi3798M芯片 内存存储：1 GB RAM，8GB Flash； 视频：支持 1080p ，4K； 接口：1 × USB 2.0，1× 10/100 Mbit/s Base-T RJ45 Ethernet port，1 × DC power input port，1 × power switch for power on/off ","date":"2023-01-06","objectID":"/huawei-ec6108v9/:1:0","tags":["电视盒子","android"],"title":"华为悦盒Ec6108v9刷机笔记","uri":"/huawei-ec6108v9/"},{"categories":["硬件","android"],"content":"刷机过程 把下载的固件包https://pan.baidu.com/s/15gTwsIEab6NhQ6BEpkGWVw(固件2)放入格式化成fat32的U盘。 我用的是4G老U盘,其它U盘没测试过。 盒子恢复出厂设置。 盒子插U盘，电源线。 盒子开机不停按遥控左右键,进入刷机模式。 进入刷机界面选择从存储恢复。 刷机成功了，进去是沙发桌面，还比较干净，没有广告。再装上当贝市场，电视软件就可以的，刷玩是android系统，可以从u盘安装软件，还是比较方便的。 ","date":"2023-01-06","objectID":"/huawei-ec6108v9/:2:0","tags":["电视盒子","android"],"title":"华为悦盒Ec6108v9刷机笔记","uri":"/huawei-ec6108v9/"},{"categories":["硬件","android"],"content":"盒子声音问题 刷完盒子，发现盒子的AV接口直接插音箱会有很大的电流声音，使用其它盒子就没有这个问题。有空排查一下是什么原因。如果声音问题是硬件坏了的话，有空就把它刷成nas算了。 解决方案:可以购买一个AV音频转接线: https://mobile.yangkeduo.com/goods1.html?goods_id=226836410960\u0026page_from=101\u0026pxq_secret_key=BLRO4V7QXVSILOO667QH5HX5K56ZQP7AKCX4QQUIHS6ZKIYBSCWQ\u0026share_uin=TITWOCCLHOTYDOY5T5KUQFADTE_GEXDA\u0026refer_share_id=224acbacc53142edaff9bcdaabebff1b\u0026refer_share_uin=TITWOCCLHOTYDOY5T5KUQFADTE_GEXDA\u0026refer_share_channel=copy_link\u0026refer_share_form=text 相关视频: https://www.bilibili.com/video/av64877591/?vd_source=5cbf24b674b5b4183e6f626cd037b179 ","date":"2023-01-06","objectID":"/huawei-ec6108v9/:3:0","tags":["电视盒子","android"],"title":"华为悦盒Ec6108v9刷机笔记","uri":"/huawei-ec6108v9/"},{"categories":["硬件","android"],"content":"刷电视盒子 刷电视盒子: http://www.shafa.com/methods/huawei_53/ 相关参数: https://detail.zol.com.cn/1241/1240581/param.shtml 刷linux: https://blog.csdn.net/toopoo/article/details/127692794 抖音刷机教程: https://www.douyin.com/video/7152482822098259238 上海电信刷机: https://www.znds.com/tv-1187568-1-1.html ","date":"2023-01-06","objectID":"/huawei-ec6108v9/:4:0","tags":["电视盒子","android"],"title":"华为悦盒Ec6108v9刷机笔记","uri":"/huawei-ec6108v9/"},{"categories":["硬件","android"],"content":"刷NAS https://zhuanlan.zhihu.com/p/547526217?utm_id=0 ","date":"2023-01-06","objectID":"/huawei-ec6108v9/:5:0","tags":["电视盒子","android"],"title":"华为悦盒Ec6108v9刷机笔记","uri":"/huawei-ec6108v9/"},{"categories":["硬件","android"],"content":"救砖教程 https://www.znds.com/tv-1212279-1-1.html ","date":"2023-01-06","objectID":"/huawei-ec6108v9/:6:0","tags":["电视盒子","android"],"title":"华为悦盒Ec6108v9刷机笔记","uri":"/huawei-ec6108v9/"},{"categories":["硬件","android"],"content":"EC6108v9U带刷机包 https://www.bilibili.com/video/BV1o34y1J7b1/?spm_id_from=333.788.recommend_more_video.1\u0026vd_source=5cbf24b674b5b4183e6f626cd037b179 ","date":"2023-01-06","objectID":"/huawei-ec6108v9/:7:0","tags":["电视盒子","android"],"title":"华为悦盒Ec6108v9刷机笔记","uri":"/huawei-ec6108v9/"},{"categories":["硬件","android"],"content":"如何刷nas? https://www.ecoo.top/docs/tutorial-basics/adb-flash ","date":"2023-01-06","objectID":"/huawei-ec6108v9/:8:0","tags":["电视盒子","android"],"title":"华为悦盒Ec6108v9刷机笔记","uri":"/huawei-ec6108v9/"},{"categories":["vim"],"content":"nvim的安装与使用 nvim 是vim的一个分支 ","date":"2022-12-29","objectID":"/nvim/:0:0","tags":["vim","nvim"],"title":"nvim的安装与使用","uri":"/nvim/"},{"categories":["vim"],"content":"nvim nvim稳定版本下载地址: https://github.com/neovim/neovim/releases/tag/stable 官网地址: https://neovim.io/ ","date":"2022-12-29","objectID":"/nvim/:1:0","tags":["vim","nvim"],"title":"nvim的安装与使用","uri":"/nvim/"},{"categories":["vim"],"content":"安装 ","date":"2022-12-29","objectID":"/nvim/:2:0","tags":["vim","nvim"],"title":"nvim的安装与使用","uri":"/nvim/"},{"categories":["vim"],"content":"centos安装Neovim 安装官方编译的程序 先下载nvim-linux64.tar.gz:https://github.com/neovim/neovim/releases/tag/stable tar xvf nvim-linux64.tar.gz mv nvim-linux64 /usr/local/ cd /bin ln -s /usr/local/nvim-linux64/bin/nvim nvim 安装遇到问题 打开nvim提示: ./nvim: /lib64/libc.so.6: version `GLIBC_2.28' not found (required by ./nvim) ./nvim: /lib64/libm.so.6: version `GLIBC_2.29' not found (required by ./nvim) 这个问题需要安装对应的GLIBC库，安装过程中可能又会遇到其它问题。如果遇到这个问题建议更换安装方法。 添加python3支持 pip3 install --user --upgrade pynvim ","date":"2022-12-29","objectID":"/nvim/:2:1","tags":["vim","nvim"],"title":"nvim的安装与使用","uri":"/nvim/"},{"categories":["vim"],"content":"yum安装 centos7 参考：https://github.bnblogs.cc/centos%E5%AE%89%E8%A3%85nvim/#%E5%AE%89%E8%A3%85cocnvim yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm yum install -y neovim python3-neovim 安装后的版本为0.3.1(官方最新版本已经为0.8.1),太老了。 yum remove neovim ","date":"2022-12-29","objectID":"/nvim/:2:2","tags":["vim","nvim"],"title":"nvim的安装与使用","uri":"/nvim/"},{"categories":["vim"],"content":"常见问题 在tmux中使用neovim ESC反应慢 nvim ~/.tmux.conf set -s escape-time 0 #bash tmux source-file ~/.tmux.conf ","date":"2022-12-29","objectID":"/nvim/:3:0","tags":["vim","nvim"],"title":"nvim的安装与使用","uri":"/nvim/"},{"categories":["vim"],"content":"ubuntu安装Neovim 下载 sudo wget https://github.com/neovim/neovim/releases/download/v0.8.1/nvim-linux64.deb sudo apt remove neovim* sudo apt install nvim 安装方法2 sudo snap install nvim --classic ","date":"2022-12-29","objectID":"/nvim/:3:1","tags":["vim","nvim"],"title":"nvim的安装与使用","uri":"/nvim/"},{"categories":["vim"],"content":"安装插件 如果之前安装过nvim，可以将自己的.config目录下的nvim配置打包压缩保存一下,.vim目录下的plugged也压缩保存一下 tar -xcvf nvim.tar.gz nvim tar -xcvf plugged.tar.gz plugged 在需要使用的服务器上上传相关配置和插件压缩包，或使用github,gitee等保存，然后同步下来 cd ~/.config/ tar -xzvf nvim.tar.gz cd ~/.vim/ tar -xzvf plugged.tar.gz ","date":"2022-12-29","objectID":"/nvim/:4:0","tags":["vim","nvim"],"title":"nvim的安装与使用","uri":"/nvim/"},{"categories":["vim"],"content":"按装插件相关依赖 ","date":"2022-12-29","objectID":"/nvim/:5:0","tags":["vim","nvim"],"title":"nvim的安装与使用","uri":"/nvim/"},{"categories":["vim"],"content":"安装tagbar依赖ctags 使用yum安装 yum install ctags -y ","date":"2022-12-29","objectID":"/nvim/:5:1","tags":["vim","nvim"],"title":"nvim的安装与使用","uri":"/nvim/"},{"categories":["vim"],"content":"安装fzf 通过源码安装，按提示操作 git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf ~/.fzf/install 安装完了之后不要忘记了更新一下bash source ~/.bashrc ","date":"2022-12-29","objectID":"/nvim/:5:2","tags":["vim","nvim"],"title":"nvim的安装与使用","uri":"/nvim/"},{"categories":["vim"],"content":"检查健康状况 可以使用checkhealth命令来检查nvim的配置是否正常，然后根据提示进行修正 checkhealth 例如提示python2相关错误 - ERROR: Neovim Python client is not installed. Error: unable to load neovim Python module - ADVICE: - Run in shell: pip2 install neovim python3安装neovim报错解决 pip3 install neovim greenlet.h:8:20: fatal error: Python.h: No such file or directory #99 yum install python3-devel ","date":"2022-12-29","objectID":"/nvim/:6:0","tags":["vim","nvim"],"title":"nvim的安装与使用","uri":"/nvim/"},{"categories":["vim"],"content":"FAQ 远程连接到linux服务器使用neovim的时候如何将neovim中的文本复制出来？ shift + 鼠标是一种解决方案 ","date":"2022-12-29","objectID":"/nvim/:6:1","tags":["vim","nvim"],"title":"nvim的安装与使用","uri":"/nvim/"},{"categories":["ubuntu"],"content":"ubuntu 禁用密码登录 ","date":"2022-12-28","objectID":"/ubuntu-password/:0:0","tags":["ubuntu"],"title":"ubuntu 禁用密码登录","uri":"/ubuntu-password/"},{"categories":["ubuntu"],"content":"禁止密码登陆 修改配置文件 vim /etc/ssh/sshd_config # PasswordAuthentication yes PubkeyAuthentication yes 修改为 PasswordAuthentication no PubkeyAuthentication yes 重启ssh服务 service ssh reload ","date":"2022-12-28","objectID":"/ubuntu-password/:1:0","tags":["ubuntu"],"title":"ubuntu 禁用密码登录","uri":"/ubuntu-password/"},{"categories":["linux","ubuntu","centos"],"content":"Linux如何安装Homebrew? ","date":"2022-12-27","objectID":"/linux-homebrew/:0:0","tags":["homebrew","brew"],"title":"Linux如何安装Homebrew?","uri":"/linux-homebrew/"},{"categories":["linux","ubuntu","centos"],"content":"Ubuntu,Debian中安装Homebrew ","date":"2022-12-27","objectID":"/linux-homebrew/:1:0","tags":["homebrew","brew"],"title":"Linux如何安装Homebrew?","uri":"/linux-homebrew/"},{"categories":["linux","ubuntu","centos"],"content":"安装基础依赖 sudo apt-get install build-essential procps curl file git ","date":"2022-12-27","objectID":"/linux-homebrew/:1:1","tags":["homebrew","brew"],"title":"Linux如何安装Homebrew?","uri":"/linux-homebrew/"},{"categories":["linux","ubuntu","centos"],"content":"下载安装脚本 proxychains4 wget https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh ","date":"2022-12-27","objectID":"/linux-homebrew/:1:2","tags":["homebrew","brew"],"title":"Linux如何安装Homebrew?","uri":"/linux-homebrew/"},{"categories":["linux","ubuntu","centos"],"content":"配置一下Homebrew仓库的镜像 vim ~/.bashrc export HOMEBREW_BREW_GIT_REMOTE=\"https://mirrors.ustc.edu.cn/brew.git\" export HOMEBREW_CORE_GIT_REMOTE=\"https://mirrors.ustc.edu.cn/homebrew-core.git\" export HOMEBREW_BOTTLE_DOMAIN=\"https://mirrors.ustc.edu.cn/homebrew-bottles\" ","date":"2022-12-27","objectID":"/linux-homebrew/:1:3","tags":["homebrew","brew"],"title":"Linux如何安装Homebrew?","uri":"/linux-homebrew/"},{"categories":["linux","ubuntu","centos"],"content":"执行安装脚本 cfanzp@cfanzplinux:~$ ./install.sh ==\u003e Found cURL: /usr/local/bin/curl ==\u003e Setting HOMEBREW_DEVELOPER to use Git/cURL not in /usr/bin ==\u003e Checking for `sudo` access (which may request your password)... ==\u003e This script will install: /home/linuxbrew/.linuxbrew/bin/brew /home/linuxbrew/.linuxbrew/share/doc/homebrew /home/linuxbrew/.linuxbrew/share/man/man1/brew.1 /home/linuxbrew/.linuxbrew/share/zsh/site-functions/_brew /home/linuxbrew/.linuxbrew/etc/bash_completion.d/brew /home/linuxbrew/.linuxbrew/Homebrew ==\u003e The following new directories will be created: /home/linuxbrew/.linuxbrew/bin /home/linuxbrew/.linuxbrew/etc /home/linuxbrew/.linuxbrew/include /home/linuxbrew/.linuxbrew/lib /home/linuxbrew/.linuxbrew/sbin /home/linuxbrew/.linuxbrew/share /home/linuxbrew/.linuxbrew/var /home/linuxbrew/.linuxbrew/opt /home/linuxbrew/.linuxbrew/share/zsh /home/linuxbrew/.linuxbrew/share/zsh/site-functions /home/linuxbrew/.linuxbrew/var/homebrew /home/linuxbrew/.linuxbrew/var/homebrew/linked /home/linuxbrew/.linuxbrew/Cellar /home/linuxbrew/.linuxbrew/Caskroom /home/linuxbrew/.linuxbrew/Frameworks ","date":"2022-12-27","objectID":"/linux-homebrew/:1:4","tags":["homebrew","brew"],"title":"Linux如何安装Homebrew?","uri":"/linux-homebrew/"},{"categories":["linux","ubuntu","centos"],"content":"安装过程中遇到某些资源需要设置代理下载 alias proxy='export all_proxy=socks5://192.168.2.128:1088;export http_proxy=socks5://192.168.2.128:1088;export https_proxy=socks5://192.168.2.128:1088;export no_proxy=socks5://192.168.2.128:1088; export ALL_PROXY=socks5://192.168.2.128:1088;export HTTP_PROXY=socks5://192.168.2.128:1088;export HTTPS_PROXY=socks5://192.168.2.128:1088;export NO_PROXY=socks5://192.168.2.128:1088' alias unproxy='unset all_proxy; unset http_proxy; unset https_proxy;unset no_proxy; unset ALL_PROXY; unset HTTP_PROXY; unset HTTPS_PROXY;unset NO_PROXY' 相关资源 Downloading https://ghcr.io/v2/homebrew/portable-ruby/portable-ruby/blobs/sha256:fc45ee6eddf4c7a17f4373dde7b1bc8a58255ea61e6847d3bf895225b28d072a ","date":"2022-12-27","objectID":"/linux-homebrew/:1:5","tags":["homebrew","brew"],"title":"Linux如何安装Homebrew?","uri":"/linux-homebrew/"},{"categories":["linux","ubuntu","centos"],"content":"安装完后设置brew的环境变量 echo 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"' \u003e\u003e $HOME/.bash_profile eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\" ","date":"2022-12-27","objectID":"/linux-homebrew/:1:6","tags":["homebrew","brew"],"title":"Linux如何安装Homebrew?","uri":"/linux-homebrew/"},{"categories":["linux","ubuntu","centos"],"content":"使用brew 安装nvim brew install nvim ","date":"2022-12-27","objectID":"/linux-homebrew/:1:7","tags":["homebrew","brew"],"title":"Linux如何安装Homebrew?","uri":"/linux-homebrew/"},{"categories":["linux","ubuntu","centos"],"content":"参考文档 https://linux.cn/article-14065-1.html https://docs.brew.sh/Homebrew-on-Linux https://blog.csdn.net/qq_41437512/article/details/128172332 ","date":"2022-12-27","objectID":"/linux-homebrew/:2:0","tags":["homebrew","brew"],"title":"Linux如何安装Homebrew?","uri":"/linux-homebrew/"},{"categories":["linux","ubuntu","centos"],"content":"扩展 LunarVim: lunarvim.org/docs/keybind-overview LunarVim Github: https://github.com/LunarVim/LunarVim ","date":"2022-12-27","objectID":"/linux-homebrew/:3:0","tags":["homebrew","brew"],"title":"Linux如何安装Homebrew?","uri":"/linux-homebrew/"},{"categories":["skynet","ubuntu"],"content":"在ubuntu环境下搭建skynet运行环境 ","date":"2022-12-23","objectID":"/skynet-ubuntu/:0:0","tags":["skynet"],"title":"在ubuntu环境下搭建skynet运行环境","uri":"/skynet-ubuntu/"},{"categories":["skynet","ubuntu"],"content":"安装相关依赖 sudo apt-get install libtool sudo apt-get install zlib1g-dev ","date":"2022-12-23","objectID":"/skynet-ubuntu/:1:0","tags":["skynet"],"title":"在ubuntu环境下搭建skynet运行环境","uri":"/skynet-ubuntu/"},{"categories":["skynet","ubuntu"],"content":"安装protobufv2.6.1 ","date":"2022-12-23","objectID":"/skynet-ubuntu/:2:0","tags":["skynet"],"title":"在ubuntu环境下搭建skynet运行环境","uri":"/skynet-ubuntu/"},{"categories":["skynet","ubuntu"],"content":"安装curl ./configure --with-openssl ","date":"2022-12-23","objectID":"/skynet-ubuntu/:3:0","tags":["skynet"],"title":"在ubuntu环境下搭建skynet运行环境","uri":"/skynet-ubuntu/"},{"categories":["skynet","ubuntu"],"content":"相关错误 fatal error: zlib.h: No such file or directory 找不到链接库 protoc: error while loading shared libraries: libprotoc.so.9: cannot open shared object file: No such file or directory 解决方法 sudo ldconfig ","date":"2022-12-23","objectID":"/skynet-ubuntu/:4:0","tags":["skynet"],"title":"在ubuntu环境下搭建skynet运行环境","uri":"/skynet-ubuntu/"},{"categories":["mac"],"content":"mac 安装brew 最近上手一款mac M1在安装brew的时候遇到了问题，发现安装下载失败，原因是最常见的源的原因，于是找到了一个镜像安装方法，非常方便的安装上去了。 /bin/zsh -c \"$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)\" ","date":"2022-12-22","objectID":"/mac-install-brew/:0:0","tags":["homebrew","brew"],"title":"Mac安装Brew","uri":"/mac-install-brew/"},{"categories":["mac"],"content":"M1 brew安装报错解决方案 报错信息： Mac M1 Brew install 报错Command failed with exit 128:git 解决方案 git config --global --add safe.directory /opt/homebrew/Library/Taps/homebrew/homebrew-cask git config --global --add safe.directory /opt/homebrew/Library/Taps/homebrew/homebrew-core ","date":"2022-12-22","objectID":"/mac-install-brew/:0:1","tags":["homebrew","brew"],"title":"Mac安装Brew","uri":"/mac-install-brew/"},{"categories":["mac"],"content":"参考 https://www.jianshu.com/p/22122a1d4474 https://blog.csdn.net/qq_25404477/article/details/126102189 ","date":"2022-12-22","objectID":"/mac-install-brew/:1:0","tags":["homebrew","brew"],"title":"Mac安装Brew","uri":"/mac-install-brew/"},{"categories":["android"],"content":"Cocos Creator Android环境搭建 ","date":"2022-12-20","objectID":"/cocos-creator-android/:0:0","tags":["cocos-creator","android"],"title":"Cocos Creator Android","uri":"/cocos-creator-android/"},{"categories":["android"],"content":"Android环境搭建 ","date":"2022-12-20","objectID":"/cocos-creator-android/:1:0","tags":["cocos-creator","android"],"title":"Cocos Creator Android","uri":"/cocos-creator-android/"},{"categories":["android"],"content":"windows环境下 1. 下载jdk https://www.bookstack.cn/read/CocosCreatorV1.5.x/publish-publish-native.md https://docs.cocos.com/creator/manual/zh/editor/publish/setup-native-development.html 下载jdk需要账号登录怎么办?: https://blog.csdn.net/u010180815/article/details/96479701 下载的jdk为:jdk-8u351-windows-x64.exe 2. 配置JAVA_HOME环境变量 https://blog.csdn.net/qq_42017152/article/details/90732057 3. 下载安装Android Studio https://developer.android.google.cn/studio#downloads 解析出的windows下载地址为: https://r2---sn-ni57rn7k.gvt1.com/edgedl/android/studio/install/2021.3.1.17/android-studio-2021.3.1.17-windows.exe?cms_redirect=yes\u0026mh=P9\u0026mip=111.172.7.141\u0026mm=28\u0026mn=sn-ni57rn7k\u0026ms=nvh\u0026mt=1671528747\u0026mv=m\u0026mvi=2\u0026pl=16\u0026shardbypass=sd\u0026smhost=r2---sn-ni57rn7y.gvt1.com android studio:android-studio-2021.3.1.17-windows.exe 4. Windows环境下cocos-creator 配置原生路径为 ndk:C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\\ndk\\25.1.8937393 android sdk: C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk JAVA_HOME:D:\\Java\\jdk1.8.0_351 ","date":"2022-12-20","objectID":"/cocos-creator-android/:1:1","tags":["cocos-creator","android"],"title":"Cocos Creator Android","uri":"/cocos-creator-android/"},{"categories":["android"],"content":"vscode配置vim https://www.cnblogs.com/YunyaSir/p/15522565.html \"vim.insertModeKeyBindings\": [ { \"before\": [ \"j\", \"k\" ], \"after\": [ \"\u003cEsc\u003e\" ] }, ], ","date":"2022-12-20","objectID":"/cocos-creator-android/:1:2","tags":["cocos-creator","android"],"title":"Cocos Creator Android","uri":"/cocos-creator-android/"},{"categories":["android"],"content":"ubuntu20.04 安装android studio https://blog.csdn.net/ayiya_Oese/article/details/114999552 ","date":"2022-12-20","objectID":"/cocos-creator-android/:2:0","tags":["cocos-creator","android"],"title":"Cocos Creator Android","uri":"/cocos-creator-android/"},{"categories":["android"],"content":"mac中cocos-creator环境搭建 ","date":"2022-12-20","objectID":"/cocos-creator-android/:3:0","tags":["cocos-creator","android"],"title":"Cocos Creator Android","uri":"/cocos-creator-android/"},{"categories":["android"],"content":"mac m1 jdk下载 地址: https://www.oracle.com/cn/java/technologies/downloads/#jdk19-mac m1下的jdk环境下载： https://www.azul.com/downloads/?version=java-8-lts\u0026os=macos\u0026architecture=arm-64-bit\u0026package=jdk 安装cocos-creator 安装jdk,下载的jdk为 jdk-8u351-macosx-x64.dmg 安装Android-studio ","date":"2022-12-20","objectID":"/cocos-creator-android/:3:1","tags":["cocos-creator","android"],"title":"Cocos Creator Android","uri":"/cocos-creator-android/"},{"categories":["android"],"content":"ndk安装路径 /Users/zp/Library/Android/sdk/ndk/25.1.8937393 ","date":"2022-12-20","objectID":"/cocos-creator-android/:3:2","tags":["cocos-creator","android"],"title":"Cocos Creator Android","uri":"/cocos-creator-android/"},{"categories":["android"],"content":"mac安装python2 安装的时候遇到需要python2的问题找了一些资料如下: https://www.jianshu.com/p/9475bd8ec36e https://developer.aliyun.com/article/1050722 https://docs.cocos.com/creator/2.4/manual/zh/publish/short-tutorial-to-install-python.html 使用pyenv安装python2 Installed Python-2.7.18 to /Users/zp/.pyenv/versions/2.7.18 pyenv用法 https://www.cnblogs.com/wangxishan/p/6613746.html ","date":"2022-12-20","objectID":"/cocos-creator-android/:3:3","tags":["cocos-creator","android"],"title":"Cocos Creator Android","uri":"/cocos-creator-android/"},{"categories":["android"],"content":"mac m1 android-studio 报错 Android Studio— Cause: error=86, Bad CPU type in executable 解决办法 Android Gradle Plugin版本升级4.2.2升级到7.1.2 ","date":"2022-12-20","objectID":"/cocos-creator-android/:3:4","tags":["cocos-creator","android"],"title":"Cocos Creator Android","uri":"/cocos-creator-android/"},{"categories":["android"],"content":"mac m1安装python2 brew install pyenv pyenv install 2.7.18 export PATH=\"$(pyenv root)/shims:${PATH}\" pyenv global 2.7.18 python --version 如果一切顺利，将可以看到Python 2.8.18的输出。 需要将上述路径添加到环境变量里面，例如： echo 'PATH=$(pyenv root)/shims:$PATH' \u003e\u003e ~/.zshrc 参考地址：https://www.wyr.me/post/658 ","date":"2022-12-20","objectID":"/cocos-creator-android/:3:5","tags":["cocos-creator","android"],"title":"Cocos Creator Android","uri":"/cocos-creator-android/"},{"categories":["ubuntu","mysql"],"content":"如何在Ubuntu20.04上安装Mysql-Workbench? mysql-workbench是官方出的一款mysql管理工具，个人觉得没有navicat好用，但是最大的优点就是免费。 因为我这里使用的ubuntu版本是比较老的ubuntu20.04,需要在官方网站上下载对应比较老的安装包 ","date":"2022-12-20","objectID":"/ubuntu-mysql-workbench/:0:0","tags":["mysql","mysql-workbench"],"title":"如何在Ubuntu20.04上安装Mysql-Workbench?","uri":"/ubuntu-mysql-workbench/"},{"categories":["ubuntu","mysql"],"content":"下载地址 官方地址:https://downloads.mysql.com/archives/workbench/ 我下载的版本地址: https://cdn.mysql.com/archives/mysql-workbench/mysql-workbench-community_8.0.29-1ubuntu20.04_amd64.deb ","date":"2022-12-20","objectID":"/ubuntu-mysql-workbench/:1:0","tags":["mysql","mysql-workbench"],"title":"如何在Ubuntu20.04上安装Mysql-Workbench?","uri":"/ubuntu-mysql-workbench/"},{"categories":["ubuntu","mysql"],"content":"下载后安装命令 sudo dpkg -i ./mysql-workbench-community_8.0.29-1ubuntu20.04_amd64.deb ","date":"2022-12-20","objectID":"/ubuntu-mysql-workbench/:1:1","tags":["mysql","mysql-workbench"],"title":"如何在Ubuntu20.04上安装Mysql-Workbench?","uri":"/ubuntu-mysql-workbench/"},{"categories":["ubuntu","mysql"],"content":"安装报错 报错内容 正在读取软件包列表... 完成 正在分析软件包的依赖关系树 正在读取状态信息... 完成 wget 已经是最新版 (1.20.3-1ubuntu2)。 wget 已设置为手动安装。 您也许需要运行“apt --fix-broken install”来修正上面的错误。 下列软件包有未满足的依赖关系： mysql-workbench-community : 依赖: libpcrecpp0v5 (\u003e= 7.7) 但是它将不会被安装 依赖: libproj15 (\u003e= 6.3.0) 但是它将不会被安装 依赖: libzip5 (\u003e= 0.10) 但是它将不会被安装 E: 有未能满足的依赖关系。请尝试不指明软件包的名字来运行“apt --fix-broken install”(也可以指定一个解决办法)。 解决方案 sudo apt-get -f install 参考链接 https://www.cnblogs.com/wasi-991017/p/13702313.html ","date":"2022-12-20","objectID":"/ubuntu-mysql-workbench/:1:2","tags":["mysql","mysql-workbench"],"title":"如何在Ubuntu20.04上安装Mysql-Workbench?","uri":"/ubuntu-mysql-workbench/"},{"categories":["os","deploy"],"content":"Windows如何写一个脚本定时删除日志？ windows服务器维护时，经常需要定期删除日志，这里时一个删除7天前日志的脚本demo，配置定时任务，每天执行就可以了。 vim ./del_log.bat @echo off forfiles -p F:\\log\\ -s -m *.log* -d -7 -c \"cmd /c del @path\" ","date":"2022-12-07","objectID":"/windows-del-log/:0:0","tags":["windows"],"title":"Windows如何写一个脚本定时删除日志？","uri":"/windows-del-log/"},{"categories":["ubuntu"],"content":"ubuntu如何安装打印机驱动？ ","date":"2022-12-07","objectID":"/ubuntu_printer/:0:0","tags":["ubuntu","printer"],"title":"ubuntu如何安装打印机驱动？","uri":"/ubuntu_printer/"},{"categories":["ubuntu"],"content":"这里以M7206w打印机为例 ","date":"2022-12-07","objectID":"/ubuntu_printer/:1:0","tags":["ubuntu","printer"],"title":"ubuntu如何安装打印机驱动？","uri":"/ubuntu_printer/"},{"categories":["ubuntu"],"content":"下载地址 https://newsupport.lenovo.com.cn/driveList.html?fromsource=driveList\u0026selname=M7206 ","date":"2022-12-07","objectID":"/ubuntu_printer/:1:1","tags":["ubuntu","printer"],"title":"ubuntu如何安装打印机驱动？","uri":"/ubuntu_printer/"},{"categories":["ubuntu"],"content":"安装方法： sudo dpkg -i ./m7206wcupswrapper-3.0.1-1.i386.deb sudo dpkg -i ./m7206wlpr-3.0.1-1.i386.deb ","date":"2022-12-07","objectID":"/ubuntu_printer/:1:2","tags":["ubuntu","printer"],"title":"ubuntu如何安装打印机驱动？","uri":"/ubuntu_printer/"},{"categories":["i3wm","ubuntu"],"content":"ubuntu i3使用alsamixer调节音量 在ubuntu上使用i3的时候看视频的时候需要调节系统的音量如何处理？方法就是使用alsamixer 在命令行输入alsamixer,就可以打开调节界面,支持jk调节音量大小，太棒了。 alsamixer ","date":"2022-12-06","objectID":"/i3-alsamixer/:0:0","tags":["ubuntu","alsamixer","i3wm"],"title":"ubuntu i3使用alsamixer调节音量","uri":"/i3-alsamixer/"},{"categories":["i3wm","ubuntu"],"content":"使用方法 h:查看帮助 ","date":"2022-12-06","objectID":"/i3-alsamixer/:0:1","tags":["ubuntu","alsamixer","i3wm"],"title":"ubuntu i3使用alsamixer调节音量","uri":"/i3-alsamixer/"},{"categories":["i3wm","ubuntu"],"content":"命令行中使用amixer控制音量 ","date":"2022-12-06","objectID":"/i3-alsamixer/:1:0","tags":["ubuntu","alsamixer","i3wm"],"title":"ubuntu i3使用alsamixer调节音量","uri":"/i3-alsamixer/"},{"categories":["i3wm","ubuntu"],"content":"音量调整到50% amixer set Master 50% ","date":"2022-12-06","objectID":"/i3-alsamixer/:1:1","tags":["ubuntu","alsamixer","i3wm"],"title":"ubuntu i3使用alsamixer调节音量","uri":"/i3-alsamixer/"},{"categories":["redis"],"content":"RedisBloom安装与使用 RedisBloom模块提供了四种数据类型： Bloom Filter (布隆过滤器) Cuckoo Filter（布谷鸟过滤器） Count-Mins-Sketch Top-K Bloom Filter和 Cuckoo 用于确定（以给定的确定性）集合中是否存在某项。 使用 Count-Min Sketch 来估算子线性空间中的项目数。 使用Top-K 维护K个最频繁项目的列表。 ","date":"2022-12-05","objectID":"/redis-bloom/:0:0","tags":["redis","redisboom"],"title":"RedisBloom安装与使用","uri":"/redis-bloom/"},{"categories":["redis"],"content":"作用 RedisBloom能够解决缓存穿透的问题。 参考链接: http://c.biancheng.net/redis/cache.html ","date":"2022-12-05","objectID":"/redis-bloom/:1:0","tags":["redis","redisboom"],"title":"RedisBloom安装与使用","uri":"/redis-bloom/"},{"categories":["redis"],"content":"下载地址 https://github.com/RedisBloom/RedisBloom#building-and-loading-redisbloom git clone https://github.com/RedisBloom/RedisBloom.git ","date":"2022-12-05","objectID":"/redis-bloom/:2:0","tags":["redis","redisboom"],"title":"RedisBloom安装与使用","uri":"/redis-bloom/"},{"categories":["redis"],"content":"编译redisbloom make ","date":"2022-12-05","objectID":"/redis-bloom/:2:1","tags":["redis","redisboom"],"title":"RedisBloom安装与使用","uri":"/redis-bloom/"},{"categories":["redis"],"content":"编译报错 deps/readies/mk/main:6: *** GNU Make version is too old. Aborting.. Stop. 原因:make版本太低需要make\u003e=4 下载make: http://mirrors.ustc.edu.cn/gnu/make/ 参考: https://blog.csdn.net/CLinuxF/article/details/108705142 wget http://mirrors.ustc.edu.cn/gnu/make/make-4.4.tar.gz tar -xzvf make-4.4.tar.gz ./configure --prefix=/usr/local/make make make install ln -s /usr/local/make/bin/make /usr/bin/make 修改redis配置文件redis.conf,添加如下内容 loadmodule /opt/RedisBloom/bin/linux-x64-release/redisbloom.so 官方文档 https://redis.io/docs/stack/bloom/quick_start/ 测试布隆过滤器 192.168.2.127:8001\u003e BF.ADD testusers dev1 (integer) 1 192.168.2.127:8001\u003e BF.EXISTS testusers dev2 (integer) 0 192.168.2.127:8001\u003e BF.EXISTS testusers dev1 (integer) 1 ","date":"2022-12-05","objectID":"/redis-bloom/:3:0","tags":["redis","redisboom"],"title":"RedisBloom安装与使用","uri":"/redis-bloom/"},{"categories":["redis"],"content":"测试布谷鸟过滤器 192.168.2.127:8001\u003e CF.EXISTS newCuckooFilter foo (integer) 0 192.168.2.127:8001\u003e CF.RESERVE newCuckooFilter 1000 OK 192.168.2.127:8001\u003e CF.ADD newCuckooFilter foo (integer) 1 192.168.2.127:8001\u003e CF.EXISTS newCuckooFilter foo (integer) 1 192.168.2.127:8001\u003e CF.EXISTS newCuckooFilter notpresent (integer) 0 192.168.2.127:8001\u003e CF.DEL newCuckooFilter foo (integer) 1 192.168.2.127:8001\u003e CF.EXISTS newCuckooFilter foo (integer) 0 ","date":"2022-12-05","objectID":"/redis-bloom/:3:1","tags":["redis","redisboom"],"title":"RedisBloom安装与使用","uri":"/redis-bloom/"},{"categories":["redis"],"content":"参考 https://www.cnblogs.com/yaopengfei/p/13928512.html https://redis.io/docs/stack/bloom/quick_start/ https://redis.io/docs/stack/bloom/ https://github.com/RedisBloom/ ","date":"2022-12-05","objectID":"/redis-bloom/:4:0","tags":["redis","redisboom"],"title":"RedisBloom安装与使用","uri":"/redis-bloom/"},{"categories":["ubuntu","linux","devtools"],"content":"ubuntu好用的pdf阅读器Evince evince 在我看来是一款比较好用的pdf阅读器，主要原因在于支持vim模式的jk上下移动。ubuntu22.04上默认安装，其它linux发型版本暂时还未测试。这里记录一下。 github地址 https://github.com/ubuntu/evince ","date":"2022-12-02","objectID":"/evince/:1:0","tags":["ubuntu","linux","devtools","evince","pdf"],"title":"ubuntu好用的pdf阅读器Evince","uri":"/evince/"},{"categories":["硬件"],"content":"键盘鼠标坏了，如何选择性价比更高？ 最近在家办公，把之前一直在家闲置的机械键盘拿出来用了，结果发现空格键失灵了，第二天干脆就罢工了。还好家里有备用键盘才不至于影响工作。 家里有几台电脑，键盘还是得备用几个于是我搜罗了一番，找到几个我自己觉得值得入手，且性价比高的(重点是便宜),这里记录一下。 ","date":"2022-11-30","objectID":"/keyboard/:0:0","tags":["keyboard"],"title":"键盘鼠标坏了，如何选择性价比更高？","uri":"/keyboard/"},{"categories":["硬件"],"content":"键盘单买 罗技k120,59元: https://item.jd.com/262214.html 双飞燕kb-8U,49元: https://item.jd.com/131991.html#none ","date":"2022-11-30","objectID":"/keyboard/:1:0","tags":["keyboard"],"title":"键盘鼠标坏了，如何选择性价比更高？","uri":"/keyboard/"},{"categories":["硬件"],"content":"键鼠套装 双飞燕KBM-1000,55元: https://item.jd.com/785649.html#none 罗技mk120,79元: https://item.jd.com/584300.html ","date":"2022-11-30","objectID":"/keyboard/:2:0","tags":["keyboard"],"title":"键盘鼠标坏了，如何选择性价比更高？","uri":"/keyboard/"},{"categories":["硬件"],"content":"无线鼠标 最近发现一款比较好用的无线鼠标推荐给大家，就是罗技的M185/M186 2023年3月JD价格49元: https://item.jd.com/423478.html M185与M186的区别可以看这篇文章: https://zhidao.baidu.com/question/1643849893240903260.html 个人更推荐M185更省电 支持系统：windows,linux(kernel 2.6+),macOS ","date":"2022-11-30","objectID":"/keyboard/:3:0","tags":["keyboard"],"title":"键盘鼠标坏了，如何选择性价比更高？","uri":"/keyboard/"},{"categories":["硬件"],"content":"无线键盘 无线键盘推荐K270 2023年3月JD价格95元: https://item.jd.com/31830435844.html 缺点是官方说只支持windows ","date":"2022-11-30","objectID":"/keyboard/:4:0","tags":["keyboard"],"title":"键盘鼠标坏了，如何选择性价比更高？","uri":"/keyboard/"},{"categories":["硬件"],"content":"逻辑无线鼠标键盘注意事项 逻辑无线设备和接受器是分优联通版本和非优联通版本的。只有匹配上了才行。 支持优联通的设备上面有橙色的标志。 MK270键鼠套装(k270+M185)据说是优联通的。 MK275键鼠套装据说是非优联通的但是键盘上显示的仍然是k270,也就是说k275是无优联通的k270。 相关介绍可以参考这篇文章: https://post.smzdm.com/p/av8n4on9/ - 关于2种设备的匹配可以看这篇文章: https://post.smzdm.com/p/ax0rzp39/ ","date":"2022-11-30","objectID":"/keyboard/:5:0","tags":["keyboard"],"title":"键盘鼠标坏了，如何选择性价比更高？","uri":"/keyboard/"},{"categories":["linux","i3wm","ubuntu"],"content":"如何在vmware中安装Ubuntu22.04并安装i3wm? 最近在家居家办公，公司电脑一直用的是linux系统，家里虚拟机里有个linux系统版本太低了，主要是和宿主机不能共享剪贴板，十分不方便，趁着这个机会把虚拟机里的系统升级一下。 ","date":"2022-11-29","objectID":"/vm-install-ubuntu/:1:0","tags":["i3wm","ubuntu"],"title":"如何在vmware中安装Ubuntu22.04并安装i3wm","uri":"/vm-install-ubuntu/"},{"categories":["linux","i3wm","ubuntu"],"content":"下载地址: 网址:https://www.omgubuntu.co.uk/2022/01/ubuntu-22-04-release-features https://cn.ubuntu.com/download/desktop 资源地址1:https://releases.ubuntu.com/22.04/ubuntu-22.04.1-desktop-amd64.iso 资源地址2:https://releases.ubuntu.com/22.04/ubuntu-22.04-desktop-amd64.iso ","date":"2022-11-29","objectID":"/vm-install-ubuntu/:1:1","tags":["i3wm","ubuntu"],"title":"如何在vmware中安装Ubuntu22.04并安装i3wm","uri":"/vm-install-ubuntu/"},{"categories":["linux","i3wm","ubuntu"],"content":"安装i3 sudo apt-get install i3 ","date":"2022-11-29","objectID":"/vm-install-ubuntu/:1:2","tags":["i3wm","ubuntu"],"title":"如何在vmware中安装Ubuntu22.04并安装i3wm","uri":"/vm-install-ubuntu/"},{"categories":["linux","i3wm","ubuntu"],"content":"安装xfreerdp2-x11 sudo apt-get install freerdp2-x11 ","date":"2022-11-29","objectID":"/vm-install-ubuntu/:1:3","tags":["i3wm","ubuntu"],"title":"如何在vmware中安装Ubuntu22.04并安装i3wm","uri":"/vm-install-ubuntu/"},{"categories":["linux","i3wm","ubuntu"],"content":"安装vlc sudo snap install vlc ","date":"2022-11-29","objectID":"/vm-install-ubuntu/:1:4","tags":["i3wm","ubuntu"],"title":"如何在vmware中安装Ubuntu22.04并安装i3wm","uri":"/vm-install-ubuntu/"},{"categories":["linux","i3wm","ubuntu"],"content":"安装sougou https://cfanzp.com/ubuntu_sougou/ sudo dpkg -i sogoupinyin_4.0.1.2800_x86_64.deb sudo apt install libqt5qml5 libqt5quick5 libqt5quickwidgets5 qml-module-qtquick2 sudo apt install libgsettings-qt1 使用im-config配置输入法系统为fcitx im-config 使用fcitx-configtools设置输入法 ","date":"2022-11-29","objectID":"/vm-install-ubuntu/:1:5","tags":["i3wm","ubuntu"],"title":"如何在vmware中安装Ubuntu22.04并安装i3wm","uri":"/vm-install-ubuntu/"},{"categories":["linux","i3wm","ubuntu"],"content":"安装飞书 sudo dpkg -i Feishu-linux_x64-5.18.11.deb i3wm设置fcitx开机启动 vim ~/.config/i3/confg exec --no-startup-id fcitx 解决i3wm中无法与宿主机共享剪贴板的问题： 参考链接:https://www.jianshu.com/p/96db2abea667/ sudo apt-get install open-vm-tools-desktop vim ~/.config/i3/confg exec --no-startup-id vmware-user-suid-wrapper ","date":"2022-11-29","objectID":"/vm-install-ubuntu/:1:6","tags":["i3wm","ubuntu"],"title":"如何在vmware中安装Ubuntu22.04并安装i3wm","uri":"/vm-install-ubuntu/"},{"categories":["deploy"],"content":"解决oss跨域问题 ","date":"2022-11-28","objectID":"/oss-core-error/:1:0","tags":["oss"],"title":"解决Oss跨域问题","uri":"/oss-core-error/"},{"categories":["deploy"],"content":"解决方案： https://help.aliyun.com/knowledge_detail/39518.html?spm=a2c4g.11186623.0.0.22c84ce5tkW5bO ","date":"2022-11-28","objectID":"/oss-core-error/:1:1","tags":["oss"],"title":"解决Oss跨域问题","uri":"/oss-core-error/"},{"categories":["deploy"],"content":"测试 curl -voa 'https://cfanzp.com/test/test.png' -H 'Origin:http://test.cfanzp.com/' ","date":"2022-11-28","objectID":"/oss-core-error/:1:2","tags":["oss"],"title":"解决Oss跨域问题","uri":"/oss-core-error/"},{"categories":["mac"],"content":"Mac如何远程连接Windows ","date":"2022-11-27","objectID":"/mac-windows/:1:0","tags":["mac"],"title":"Mac如何远程连接Windows","uri":"/mac-windows/"},{"categories":["mac"],"content":"1. 使用microsoft-remote-desktop-for-mac Mac远程连接Windows的工具不多比较好用，且免费的，这里介绍一款:微软官方的Microsoft-remote-desktop-for-mac,下载地址: https://install.appcenter.ms/orgs/rdmacios-k2vy/apps/microsoft-remote-desktop-for-mac/distribution_groups/all-users-of-microsoft-remote-desktop-for-mac 微软官方地址: https://docs.microsoft.com/en-us/windows-server/remote/remote-desktop-services/clients/remote-desktop-mac 这里职能下载Bate版本，如果是要下载正式版本需要访问国外的app store,国内的app store是没法访问的。 下载后是一个zip压缩包解压后拖到应用程序界面就可以了。 ","date":"2022-11-27","objectID":"/mac-windows/:1:1","tags":["mac"],"title":"Mac如何远程连接Windows","uri":"/mac-windows/"},{"categories":["mac"],"content":"2. 使用rdesktop(亲测可用) 安装rdesktop 推荐先安装macPorts sudo brew install macPorts sudo port install rdesktop 使用X11报错,解决方案,安装XQuartz UI(error): ui_init(), failed to open X11 display: brew install --cask XQuartz 重启后，配置DISPLAY环境变量 vim ~/.bash_profile DISPLAY=/private/tmp/com.apple.launchd.Tt4i2z07qg/org.macosforge.xquartz:0 参考: https://github.com/FreeRDP/FreeRDP/issues/993 值得注意的是rdesktop已经不再更新维护了 ","date":"2022-11-27","objectID":"/mac-windows/:1:2","tags":["mac"],"title":"Mac如何远程连接Windows","uri":"/mac-windows/"},{"categories":["mac"],"content":"3. 使用xfreerdp 安装帮助:https://github.com/FreeRDP/FreeRDP/wiki/PreBuilds sudo port install freerdp(不可用) #或者 brew install freerdp(可用) sudo ln -s /usr/local/bin/xfreerdp /opt/local/bin/xfreerdp 运行报错(重装，使用brew安装可用) [19:46:08:143] [2900:06a80000] [ERROR][com.freerdp.core] - transport_connect_tls:freerdp_set_last_error_ex ERRCONNECT_TLS_CONNECT_FAILED [0x00020008] ","date":"2022-11-27","objectID":"/mac-windows/:1:3","tags":["mac"],"title":"Mac如何远程连接Windows","uri":"/mac-windows/"},{"categories":["linux","vim"],"content":"如何在centos7.6中源码安装Vim8? 卸载老版本的vim7.4 yum remove vim 下载vim8的源码 wget -O vim8.2.0139.zip https://github.com/vim/vim/archive/v8.2.0139.zip 安装新版本的vim8 unzip v8.2.0.139.zip unzip vim8.2.0139.zip \u0026\u0026 cd vim-8.2.0139/src ./configure --prefix=/usr/local/vim8/ --enable-pythoninterp=yes --with-python-config-dir=/usr/lib64/python2.7/config make \u0026\u0026 make install ln -s /usr/local/vim8/bin/vim /usr/bin/vim vim --version 配置vim,安装vim的依赖项目 sudo yum install -y yum-utils sudo yum-config-manager --add-repo=https://copr.fedorainfracloud.org/coprs/carlwgeorge/ripgrep/repo/epel-7/carlwgeorge-ripgrep-epel-7.repo sudo yum install -y ripgrep sudo yum install -y ctags #git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf #~/.fzf/install 安装配置vim的插件(可以把自己之前配置好的插件打包保存下来，下次就不用再下载了) #curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim #wget https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim mkdir ~/.vim/ mkdir ~/.vim/autoload/ cp plug.vim ~/.vim/autoload cp plugged.tar.gz ~/.vim/ cd ~/.vim/ tar -xzvf plugged.tar.gz cd - ","date":"2022-11-25","objectID":"/install-vim8/:1:0","tags":["vim","centos"],"title":"如何在centos7.6中源码安装Vim8?","uri":"/install-vim8/"},{"categories":["linux"],"content":"watch命令的用法 ","date":"2022-11-24","objectID":"/watch/:1:0","tags":["watch"],"title":"watch命令的用法","uri":"/watch/"},{"categories":["linux"],"content":"使用watch命令查看文件game.log 大小的实时变化,3s刷新1次 watch -n3 ls -lh game.log ","date":"2022-11-24","objectID":"/watch/:1:1","tags":["watch"],"title":"watch命令的用法","uri":"/watch/"},{"categories":["linux"],"content":"每3秒查看网络连接数变化(怀疑收到攻击时会比较有用） watch -n3 'netstat -ntp |wc -l' ","date":"2022-11-24","objectID":"/watch/:1:2","tags":["watch"],"title":"watch命令的用法","uri":"/watch/"},{"categories":["linux"],"content":"每5秒查看系统负载 watch -n5 'cat /proc/loadavg' ","date":"2022-11-24","objectID":"/watch/:1:3","tags":["watch"],"title":"watch命令的用法","uri":"/watch/"},{"categories":["linux"],"content":"每1秒查看http连接数，确认是否收到CC攻击 watch -n 1 -d 'pstree|grep http' ","date":"2022-11-24","objectID":"/watch/:1:4","tags":["watch"],"title":"watch命令的用法","uri":"/watch/"},{"categories":["linux"],"content":"每3秒输出一次内存使用情况 watch -n 3 -d free -m ","date":"2022-11-24","objectID":"/watch/:1:5","tags":["watch"],"title":"watch命令的用法","uri":"/watch/"},{"categories":["linux"],"content":"每5秒输出一次系统负载情况 watch -n 3 -d uptime ","date":"2022-11-24","objectID":"/watch/:1:6","tags":["watch"],"title":"watch命令的用法","uri":"/watch/"},{"categories":["ubuntu"],"content":"ubuntu如何安装sougou? ","date":"2022-11-22","objectID":"/ubuntu_sougou/:1:0","tags":["ubuntu","sougou"],"title":"ubuntu如何安装sougou?","uri":"/ubuntu_sougou/"},{"categories":["ubuntu"],"content":"下载 下载直接去官网下载就可以了，下载地址: https://shurufa.sogou.com/linux ","date":"2022-11-22","objectID":"/ubuntu_sougou/:1:1","tags":["ubuntu","sougou"],"title":"ubuntu如何安装sougou?","uri":"/ubuntu_sougou/"},{"categories":["ubuntu"],"content":"安装 sudo dpkg -i sogoupinyin_4.0.1.2800_x86_64.deb ","date":"2022-11-22","objectID":"/ubuntu_sougou/:1:2","tags":["ubuntu","sougou"],"title":"ubuntu如何安装sougou?","uri":"/ubuntu_sougou/"},{"categories":["ubuntu"],"content":"命令行执行下面的命令(解决输入法无法输入中文的问题) sudo apt install libqt5qml5 libqt5quick5 libqt5quickwidgets5 qml-module-qtquick2 sudo apt install libgsettings-qt1 注意事项: Keyboard input method system选择 fcitx。重启系统。 ","date":"2022-11-22","objectID":"/ubuntu_sougou/:1:3","tags":["ubuntu","sougou"],"title":"ubuntu如何安装sougou?","uri":"/ubuntu_sougou/"},{"categories":["linux"],"content":"ubuntu如何2条命令快速更新chrome? ","date":"2022-11-01","objectID":"/ubuntu-chrome/:0:0","tags":["linux","ubuntu","chrome"],"title":"ubuntu如何2条命令快速更新chrome?","uri":"/ubuntu-chrome/"},{"categories":["linux"],"content":"基本步骤 wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb sudo dpkg -i ./google-chrome-stable_current_amd64.deb ","date":"2022-11-01","objectID":"/ubuntu-chrome/:1:0","tags":["linux","ubuntu","chrome"],"title":"ubuntu如何2条命令快速更新chrome?","uri":"/ubuntu-chrome/"},{"categories":["linux"],"content":"svn服务器搭建 ","date":"2022-10-18","objectID":"/svn_server/:1:0","tags":["linux","svn"],"title":"linux svn服务器搭建","uri":"/svn_server/"},{"categories":["linux"],"content":"centos 安装命令 sudo yum install subversion ","date":"2022-10-18","objectID":"/svn_server/:1:1","tags":["linux","svn"],"title":"linux svn服务器搭建","uri":"/svn_server/"},{"categories":["linux"],"content":"创建目录 sudo mkdir /data/svn/ #创建svn版本库 sudo svnadmin create /data/svn/doc 查看启动服务文件 /usr/lib/systemd/system/svnserve.service 修改启动配置文件,修改OPTION参数 vim /etc/sysconfig/svnserve OPTIONS=\"-r /data/svn\" ","date":"2022-10-18","objectID":"/svn_server/:1:2","tags":["linux","svn"],"title":"linux svn服务器搭建","uri":"/svn_server/"},{"categories":["linux"],"content":"修改目录配置文件 配置文件目录 /data/svn/doc/conf 修改密码,passwd文件,users节点下添加,test帐号密码123 test=123 修改authz文件，加入用户权限 [/] test =rw 修改svn权限 vim svnserve.conf anon-access = none #不允许匿名用户访问 auth-access = write #通过验证的用户可以读和写 password-db = passwd #用户与密码对应的数据保存在passwd文件中 authz-db = authz #权限的信息保存在文件authz中 ","date":"2022-10-18","objectID":"/svn_server/:1:3","tags":["linux","svn"],"title":"linux svn服务器搭建","uri":"/svn_server/"},{"categories":["linux"],"content":"访问地址 svn://ip ","date":"2022-10-18","objectID":"/svn_server/:1:4","tags":["linux","svn"],"title":"linux svn服务器搭建","uri":"/svn_server/"},{"categories":["linux"],"content":"svn拉取代码 svn checkout git@xxx/doc --username aaa --password bbb ","date":"2022-10-18","objectID":"/svn_server/:1:5","tags":["linux","svn"],"title":"linux svn服务器搭建","uri":"/svn_server/"},{"categories":["linux"],"content":"总结 平时工作中，大部分项目是使用的git作为源码管理工具。也有少数项目使用的是svn。 策划文档，很多团队更喜欢用svn。 学会搭建svn服务器，并熟练使用svn命令操作是十分有必要的。 ","date":"2022-10-18","objectID":"/svn_server/:2:0","tags":["linux","svn"],"title":"linux svn服务器搭建","uri":"/svn_server/"},{"categories":["linux"],"content":"参考文档 https://blog.csdn.net/chenxizhan1995/article/details/110687345 https://www.cnblogs.com/qffxj/p/12061270.html ","date":"2022-10-18","objectID":"/svn_server/:2:1","tags":["linux","svn"],"title":"linux svn服务器搭建","uri":"/svn_server/"},{"categories":["vim"],"content":"vim常用技巧 ","date":"2022-09-09","objectID":"/vim-skill-normal/:0:0","tags":["vim"],"title":"vim常用技巧","uri":"/vim-skill-normal/"},{"categories":["vim"],"content":"如何在多行结尾添加内容？ 有的时候想把列表改成表格，这个时候，想在每行行末加上|怎么加呢，这里利用可视模式来解决问题: 可视模式选中所有的行 :进入底行模式 s/$/|/gc 如果是想在行首插入|可以用列模式或者把第3步的$换成^ ","date":"2022-09-09","objectID":"/vim-skill-normal/:1:0","tags":["vim"],"title":"vim常用技巧","uri":"/vim-skill-normal/"},{"categories":["vim"],"content":"如何复制当前的单词到底行模式？ 命令模式用yw复制单词 :进入底行模式 Ctrl+r+Ctrl+w粘贴 yw : Ctrl+R+Ctrl+w ","date":"2022-09-09","objectID":"/vim-skill-normal/:2:0","tags":["vim"],"title":"vim常用技巧","uri":"/vim-skill-normal/"},{"categories":["vim"],"content":"如何复制当前行到底行模式？ 命令模式用yy复制当前行 :进入底行模式 Ctrl+r+\"粘贴 yw : Ctrl+r+\" 命令模式用yw复制单词 ","date":"2022-09-09","objectID":"/vim-skill-normal/:3:0","tags":["vim"],"title":"vim常用技巧","uri":"/vim-skill-normal/"},{"categories":["vim"],"content":"寄存器的使用 在 Vim 中，可以使用寄存器别名来方便地访问和操作不同的寄存器。以下是一些常用的寄存器别名： “a - “z：小写字母寄存器。可以使用这些寄存器进行复制、剪切和粘贴操作。 “A - “Z：大写字母寄存器。与小写字母寄存器类似，但是在执行复制或剪切操作时，会追加到当前寄存器的内容后面。 “0：数字 0 寄存器。保存最近复制的文本。可以使用 “0p 命令将其粘贴。 “.：点号寄存器。保存最近插入的文本。可以使用 `”.” 命令在插入模式下将其插入到光标位置。 “%：百分号寄存器。保存当前文件名。可以使用 “%p 命令将文件名粘贴到光标位置。 “_：无名寄存器。用于丢弃不需要的复制或删除操作。 “* 和 “+：系统剪贴板寄存器。在支持系统剪贴板的环境中，可以使用这两个寄存器与外部应用程序共享剪贴板内容。 使用寄存器别名时，可以将其与 Vim 命令和操作符一起使用，例如 “\u003c寄存器别名\u003eyy 复制一行并将其保存到指定的寄存器中，\"\u003c寄存器别名\u003ep 将寄存器内容粘贴到光标位置等。 要查看当前寄存器的内容，可以执行 :registers 命令或 “\u003c寄存器别名\u003eCtrl+R 快捷键。 这些是 Vim 中常用的一些寄存器别名，可以根据实际需求进行调整和使用。 ","date":"2022-09-09","objectID":"/vim-skill-normal/:4:0","tags":["vim"],"title":"vim常用技巧","uri":"/vim-skill-normal/"},{"categories":["vim"],"content":"在光标处输出文件名 \"%p ","date":"2022-09-09","objectID":"/vim-skill-normal/:4:1","tags":["vim"],"title":"vim常用技巧","uri":"/vim-skill-normal/"},{"categories":["vim"],"content":"在底行模式处输出文件名 CTRL+R+% ","date":"2022-09-09","objectID":"/vim-skill-normal/:4:2","tags":["vim"],"title":"vim常用技巧","uri":"/vim-skill-normal/"},{"categories":["vim"],"content":"在光标处输出最近复制的文本 \"0p ","date":"2022-09-09","objectID":"/vim-skill-normal/:4:3","tags":["vim"],"title":"vim常用技巧","uri":"/vim-skill-normal/"},{"categories":["vim"],"content":"在底行模式处输出文件名 CTRL+R+0 ","date":"2022-09-09","objectID":"/vim-skill-normal/:4:4","tags":["vim"],"title":"vim常用技巧","uri":"/vim-skill-normal/"},{"categories":["linux","nginx"],"content":"如何使用Ubuntu linux使用nginx部署简单的静态网站? ","date":"2022-09-07","objectID":"/ubuntu-nginx/:0:0","tags":["linux","ubuntu","nginx"],"title":"如何使用Ubuntu linux使用nginx部署简单的静态网站?","uri":"/ubuntu-nginx/"},{"categories":["linux","nginx"],"content":"基本步骤 Ubuntu 使用linux部署简单的静态网页主要分为以下几步: 安装nginx 配置nginx 将网站放入nginx配置对应的网站目录 启动nginx 测试网站是否正常 ","date":"2022-09-07","objectID":"/ubuntu-nginx/:1:0","tags":["linux","ubuntu","nginx"],"title":"如何使用Ubuntu linux使用nginx部署简单的静态网站?","uri":"/ubuntu-nginx/"},{"categories":["linux","nginx"],"content":"安装nginx sudo apt install nginx #安装后查看nginx版本: nginx -v ","date":"2022-09-07","objectID":"/ubuntu-nginx/:2:0","tags":["linux","ubuntu","nginx"],"title":"如何使用Ubuntu linux使用nginx部署简单的静态网站?","uri":"/ubuntu-nginx/"},{"categories":["linux","nginx"],"content":"配置nginx vim /etc/nginx/sites-enabled/default # Default server configuration # server { listen 80 default_server; listen [::]:80 default_server; # SSL configuration # # listen 443 ssl default_server; # listen [::]:443 ssl default_server; # # Note: You should disable gzip for SSL traffic. # See: https://bugs.debian.org/773332 # # Read up on ssl_ciphers to ensure a secure configuration. # See: https://bugs.debian.org/765782 # # Self signed certs generated by the ssl-cert package # Don't use them in a production server! # # include snippets/snakeoil.conf; root /var/www/html; # Add index.php to the list if you are using PHP index index.html index.htm index.nginx-debian.html; server_name _; location / { # First attempt to serve request as file, then # as directory, then fall back to displaying a 404. try_files $uri $uri/ =404; } # pass PHP scripts to FastCGI server # #location ~ \\.php$ { # include snippets/fastcgi-php.conf; # # # With php-fpm (or other unix sockets): # fastcgi_pass unix:/var/run/php/php7.4-fpm.sock; # # With php-cgi (or other tcp sockets): # fastcgi_pass 127.0.0.1:9000; #} # deny access to .htaccess files, if Apache's document root # concurs with nginx's one # #location ~ /\\.ht { # deny all; #} } ","date":"2022-09-07","objectID":"/ubuntu-nginx/:3:0","tags":["linux","ubuntu","nginx"],"title":"如何使用Ubuntu linux使用nginx部署简单的静态网站?","uri":"/ubuntu-nginx/"},{"categories":["linux","nginx"],"content":"检查配置文件是否成功 sudo nginx -t ","date":"2022-09-07","objectID":"/ubuntu-nginx/:4:0","tags":["linux","ubuntu","nginx"],"title":"如何使用Ubuntu linux使用nginx部署简单的静态网站?","uri":"/ubuntu-nginx/"},{"categories":["linux","nginx"],"content":"部署网站到网站目录 cd /var/www/html ... ","date":"2022-09-07","objectID":"/ubuntu-nginx/:5:0","tags":["linux","ubuntu","nginx"],"title":"如何使用Ubuntu linux使用nginx部署简单的静态网站?","uri":"/ubuntu-nginx/"},{"categories":["linux","nginx"],"content":"重启nginx sudo systemctl restart nginx ","date":"2022-09-07","objectID":"/ubuntu-nginx/:6:0","tags":["linux","ubuntu","nginx"],"title":"如何使用Ubuntu linux使用nginx部署简单的静态网站?","uri":"/ubuntu-nginx/"},{"categories":["linux","lua","skynet"],"content":"lua中给日志关键字加上颜色 ","date":"2022-09-06","objectID":"/terminal-color/:0:0","tags":["linux","lua","skynet","terminal"],"title":"lua中给日志关键字加上颜色","uri":"/terminal-color/"},{"categories":["linux","lua","skynet"],"content":"控制文本颜色的ANSI转义序列 通用的控制文本颜色的转义序列格式如下： CSI n1 [;n2 [;…]] m 其中CSI全称为“控制序列引导器”（Control Sequence Introducer/Initiator），也就是上述示例中的\"\\033[\"； n1、n2等表示SGR参数（下面会列出一些常用的SGR参数），用于控制颜色、粗体、斜体、闪烁等文本输出格式； m表示转义序列结束。 ","date":"2022-09-06","objectID":"/terminal-color/:1:0","tags":["linux","lua","skynet","terminal"],"title":"lua中给日志关键字加上颜色","uri":"/terminal-color/"},{"categories":["linux","lua","skynet"],"content":"依次输出黑红绿黄蓝紫青白 echo -e \"\\033[30mBlack Text\\033[0m\" echo -e \"\\033[31mRed Text\\033[0m\" echo -e \"\\033[32mGreen Text\\033[0m\" echo -e \"\\033[33mYellow Text\\033[0m\" echo -e \"\\033[34mBlue Text\\033[0m\" echo -e \"\\033[35mMagenta Text\\033[0m\" echo -e \"\\033[36mCyan Text\\033[0m\" echo -e \"\\033[37mWhite Text\\033[0m\" 编码含义 编码 含义 0 关闭所有格式，还原为初始状态 1 粗体/高亮显示 2 模糊 3 斜体 4 下划线 5 闪烁（慢） 6 闪烁（快） 7 交换背景色与前景色 8 隐藏（伸手不见五指，啥也看不见） 30-37 前景色 40-47 背景色 前景色编码含义 前景色编码 含义 30 黑色 31 红色 32 绿色 33 黄色 34 蓝色 35 紫色 36 青色 37 白色 背景色编码含义 背景色编码 含义 40 黑色 41 红色 42 绿色 43 黄色 44 蓝色 45 紫色 46 青色 47 白色 ","date":"2022-09-06","objectID":"/terminal-color/:2:0","tags":["linux","lua","skynet","terminal"],"title":"lua中给日志关键字加上颜色","uri":"/terminal-color/"},{"categories":["linux","lua","skynet"],"content":"在lua中打印带颜色的日志 local function logger(str,color) return function(...) skynet.error(string.format(\"%s%s\\x1b[0m\", color, str), ...) end end -- 把DEBUG日志打印成蓝色 local DEBUG = logger(\"[D]\", \"\\x1b[34m\") -- 把INFO日志打印成绿色 local INFO = logger(\"[I]\", \"\\x1b[32m\") -- 把WARN日志打印成白色 local WARN = logger(\"[W]\", \"\\x1b[33m\") -- 把错误日志打印成红色 local ERROR = logger(\"[E]\", \"\\x1b[31m\") DEBUG(\"this is a debug log\") ","date":"2022-09-06","objectID":"/terminal-color/:2:1","tags":["linux","lua","skynet","terminal"],"title":"lua中给日志关键字加上颜色","uri":"/terminal-color/"},{"categories":["linux","lua","skynet"],"content":"参考资料 https://www.cnblogs.com/opangle/p/4082692.html ","date":"2022-09-06","objectID":"/terminal-color/:3:0","tags":["linux","lua","skynet","terminal"],"title":"lua中给日志关键字加上颜色","uri":"/terminal-color/"},{"categories":["tools"],"content":"Hugo主题FixIt 之前一直在用的是LoveIt主题,最近在搜索LoveIt主题的用法时，偶尔发现了FixIt主题，因为LoveIt已经有很久没有更新了，而FixIt主题是LoveIt主题的fork版本。目前我的主题已经切换到了FixIt主题了。 ","date":"2022-09-04","objectID":"/hugo-theme-fixit/:0:0","tags":["hugo","fixit"],"title":"Hugo主题FixIt简单介绍","uri":"/hugo-theme-fixit/"},{"categories":["tools"],"content":"为什么会换成FixIt主题? 我换成FixIt主题的主要原因有以下几点原因。 ","date":"2022-09-04","objectID":"/hugo-theme-fixit/:1:0","tags":["hugo","fixit"],"title":"Hugo主题FixIt简单介绍","uri":"/hugo-theme-fixit/"},{"categories":["tools"],"content":"1. 支持mermaid 这个遇到要画图的场景还是特别的有用的，具体可以参考一下这篇文章，介绍得非常清楚了: https://pre.fixit.lruihao.cn/zh-cn/extended-shortcode-mermaid/ graph {{\u003c mermaid \u003e}} graph LR Hugo--\u003eFixIt FixIt--\u003e支持子菜单 FixIt--\u003e支持memaid {{\u003c /mermaid \u003e}} 效果图: pie饼图: {{\u003c mermaid \u003e}} pie \"Linux\" : 15 \"Skynet\" : 8 \"Vim\" : 6 {{\u003c /mermaid \u003e}} ","date":"2022-09-04","objectID":"/hugo-theme-fixit/:1:1","tags":["hugo","fixit"],"title":"Hugo主题FixIt简单介绍","uri":"/hugo-theme-fixit/"},{"categories":["tools"],"content":"2. 支持echats ","date":"2022-09-04","objectID":"/hugo-theme-fixit/:1:2","tags":["hugo","fixit"],"title":"Hugo主题FixIt简单介绍","uri":"/hugo-theme-fixit/"},{"categories":["tools"],"content":"2. config配置支持添加公安备案 ","date":"2022-09-04","objectID":"/hugo-theme-fixit/:1:3","tags":["hugo","fixit"],"title":"Hugo主题FixIt简单介绍","uri":"/hugo-theme-fixit/"},{"categories":["tools"],"content":"3. 配置文件更加简洁 ","date":"2022-09-04","objectID":"/hugo-theme-fixit/:1:4","tags":["hugo","fixit"],"title":"Hugo主题FixIt简单介绍","uri":"/hugo-theme-fixit/"},{"categories":["tools"],"content":"4. 菜单更友好 菜单支持icon 可以配置二级菜单,二级菜单设置好parent属性，parent的值设置为父级菜单的identifier属性就可以了。 [menu] [[menu.main]] identifier = \"posts\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" name = \"所有文章\" url = \"/posts/\" # title will be shown when you hover on this menu link title = \"\" weight = 1 [menu.main.params] icon = \"fa-solid fa-archive\" [[menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 2 [menu.main.params] icon = \"fa-solid fa-th\" [[menu.main]] parent = \"categories\" identifier = \"linux\" pre = \"\u003ci class='fa-brands fa-readme fa-fw fa-sm'\u003e\u003c/i\u003e\" post = \"\" name = \"linux\" url = \"/categories/linux/\" title = \"\" weight = 201 [[menu.main]] parent = \"categories\" identifier = \"skynet\" pre = \"\u003ci class='fa-brands fa-readme fa-fw fa-sm'\u003e\u003c/i\u003e\" post = \"\" name = \"skynet\" url = \"/categories/skynet/\" title = \"\" weight = 202 [[menu.main]] parent = \"categories\" identifier = \"vim\" pre = \"\u003ci class='fa-brands fa-readme fa-fw fa-sm'\u003e\u003c/i\u003e\" post = \"\" name = \"vim\" url = \"/categories/vim/\" title = \"\" weight = 203 [[menu.main]] parent = \"categories\" identifier = \"development-manual\" pre = \"\u003ci class='fa-brands fa-readme fa-fw fa-sm'\u003e\u003c/i\u003e\" post = \"\" name = \"开发手册\" url = \"/categories/development-manual/\" title = \"\" weight = 204 [[menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 3 [menu.main.params] icon = \"fa-solid fa-tags\" [[menu.main]] identifier = \"about\" pre = \"\" post = \"\" name = \"关于\" url = \"/about/\" title = \"\" weight = 7 [menu.main.params] icon = \"fa-solid fa-user-tie\" [[menu.main]] identifier = \"search\" pre = \"\u003ci class='fas fa-fw fa-search'\u003e\u003c/i\u003e\" post = \"\" name = \"搜索\" url = \"/search/\" title = \"搜索\" weight = 8 ","date":"2022-09-04","objectID":"/hugo-theme-fixit/:1:5","tags":["hugo","fixit"],"title":"Hugo主题FixIt简单介绍","uri":"/hugo-theme-fixit/"},{"categories":["tools"],"content":"echats demo demo1: demo2: demo3: demo4: ","date":"2022-09-04","objectID":"/hugo-theme-fixit/:1:6","tags":["hugo","fixit"],"title":"Hugo主题FixIt简单介绍","uri":"/hugo-theme-fixit/"},{"categories":["tools"],"content":"总结 目前我自己也只是粗略地了解了一下Hugo和它的FixIt主题，其中还有许多细节的东西还不是特别地清楚。后续有空了再折腾一下细节。 ","date":"2022-09-04","objectID":"/hugo-theme-fixit/:2:0","tags":["hugo","fixit"],"title":"Hugo主题FixIt简单介绍","uri":"/hugo-theme-fixit/"},{"categories":["tools"],"content":"参考 https://pre.fixit.lruihao.cn/zh-cn/posts/ https://lruihao.cn/posts/ https://pre.fixit.lruihao.cn/zh-cn/extended-shortcode-echarts/ ","date":"2022-09-04","objectID":"/hugo-theme-fixit/:3:0","tags":["hugo","fixit"],"title":"Hugo主题FixIt简单介绍","uri":"/hugo-theme-fixit/"},{"categories":["linux","code","deploy"],"content":"linux中使用脚本关闭进程 ","date":"2022-09-01","objectID":"/linux-stop-process/:0:0","tags":["linux","terminal"],"title":"linux中使用脚本关闭进程","uri":"/linux-stop-process/"},{"categories":["linux","code","deploy"],"content":"关闭进程脚本 通过ps命令，grep命令以及awk命令找到进程的pid 使用kill命令关闭进程 ","date":"2022-09-01","objectID":"/linux-stop-process/:1:0","tags":["linux","terminal"],"title":"linux中使用脚本关闭进程","uri":"/linux-stop-process/"},{"categories":["linux","code","deploy"],"content":"脚本demo: rootot@dev doc]# cat stop_mdbook_doc.sh #!/bin/bash kill_pid=`ps -ef | grep mdbook | grep 4001 | grep -v grep | awk '{print $2}'` echo \"pid = \"${kill_pid} if [ -n \"${kill_pid}\" ] then kill -9 ${kill_pid} echo \"mdbook 4001 pid:\"${kill_pid}\"进程已kill成功\" else echo \"mdbook 4001 进程已不存在\" fi [root@dev doc]# ","date":"2022-09-01","objectID":"/linux-stop-process/:2:0","tags":["linux","terminal"],"title":"linux中使用脚本关闭进程","uri":"/linux-stop-process/"},{"categories":["devtools","vim"],"content":"如何在terminal中使用Joplin并像vim一样移动? ","date":"2022-08-31","objectID":"/joplin-terminal/:0:0","tags":["joplin","devtools","vim","terminal"],"title":"如何在terminal中使用Joplin并像vim一样移动?","uri":"/joplin-terminal/"},{"categories":["devtools","vim"],"content":"安装 ","date":"2022-08-31","objectID":"/joplin-terminal/:1:0","tags":["joplin","devtools","vim","terminal"],"title":"如何在terminal中使用Joplin并像vim一样移动?","uri":"/joplin-terminal/"},{"categories":["devtools","vim"],"content":"mac 安装方法 brew install node NPM_CONFIG_PREFIX=~/.joplin-bin npm install -g joplin sudo ln -s ~/.joplin-bin/bin/joplin /usr/bin/joplin [zp@localhost bin]$ sudo ln -s ~/.joplin-bin/bin/joplin /usr/bin/joplin ln: /usr/bin/joplin: Read-only file system sudo ln -s ~/.joplin-bin/bin/joplin /usr/local/bin/joplin ","date":"2022-08-31","objectID":"/joplin-terminal/:1:1","tags":["joplin","devtools","vim","terminal"],"title":"如何在terminal中使用Joplin并像vim一样移动?","uri":"/joplin-terminal/"},{"categories":["devtools","vim"],"content":"ubuntu 安装方法 #Important: First, install Node 12+. NPM_CONFIG_PREFIX=~/.joplin-bin npm install -g joplin sudo ln -s ~/.joplin-bin/bin/joplin /usr/bin/joplin 我安装的时候nodejs版本是:v10.19.0,建议按官方要求使用Node 12+ 进入 joplin ","date":"2022-08-31","objectID":"/joplin-terminal/:1:2","tags":["joplin","devtools","vim","terminal"],"title":"如何在terminal中使用Joplin并像vim一样移动?","uri":"/joplin-terminal/"},{"categories":["devtools","vim"],"content":"配置文件同步 同步方式建议用文件同步，尝试了用坚果云的WebDav同步效果不是很好，手机可以采用WebDav,电脑还是用文件同步更稳定些。 :config sync.target 2 :config sync.2.path /home/cfanzp/jgy/joplin 配置将会被保存在下面文件中 ~/.config/joplin/settings.json ","date":"2022-08-31","objectID":"/joplin-terminal/:2:0","tags":["joplin","devtools","vim","terminal"],"title":"如何在terminal中使用Joplin并像vim一样移动?","uri":"/joplin-terminal/"},{"categories":["devtools","vim"],"content":"快捷键配置 ~/.config/joplin/keymap.json ","date":"2022-08-31","objectID":"/joplin-terminal/:3:0","tags":["joplin","devtools","vim","terminal"],"title":"如何在terminal中使用Joplin并像vim一样移动?","uri":"/joplin-terminal/"},{"categories":["devtools","vim"],"content":"快捷键配置demo keymap.json [ { \"keys\": [\":\"], \"type\": \"function\", \"command\": \"enter_command_line_mode\" }, { \"keys\": [\"TAB\"], \"type\": \"function\", \"command\": \"focus_next\" }, { \"keys\": [\"SHIFT_TAB\"], \"type\": \"function\", \"command\": \"focus_previous\" }, { \"keys\": [\"UP\"], \"type\": \"function\", \"command\": \"move_up\" }, { \"keys\": [\"DOWN\"], \"type\": \"function\", \"command\": \"move_down\" }, { \"keys\": [\"PAGE_UP\"], \"type\": \"function\", \"command\": \"page_up\" }, { \"keys\": [\"PAGE_DOWN\"], \"type\": \"function\", \"command\": \"page_down\" }, { \"keys\": [\"ENTER\"], \"type\": \"function\", \"command\": \"activate\" }, { \"keys\": [\"DELETE\", \"BACKSPACE\"], \"type\": \"function\", \"command\": \"delete\" }, { \"keys\": [\" \"], \"command\": \"todo toggle $n\" }, { \"keys\": [\"n\"], \"type\": \"function\", \"command\": \"next_link\" }, { \"keys\": [\"b\"], \"type\": \"function\", \"command\": \"previous_link\" }, { \"keys\": [\"o\"], \"type\": \"function\", \"command\": \"open_link\" }, { \"keys\": [\"tc\"], \"type\": \"function\", \"command\": \"toggle_console\" }, { \"keys\": [\"tm\"], \"type\": \"function\", \"command\": \"toggle_metadata\" }, { \"keys\": [\"/\"], \"type\": \"prompt\", \"command\": \"search \\\"\\\"\", \"cursorPosition\": -2 }, { \"keys\": [\"mn\"], \"type\": \"prompt\", \"command\": \"mknote \\\"\\\"\", \"cursorPosition\": -2 }, { \"keys\": [\"mt\"], \"type\": \"prompt\", \"command\": \"mktodo \\\"\\\"\", \"cursorPosition\": -2 }, { \"keys\": [\"mb\"], \"type\": \"prompt\", \"command\": \"mkbook \\\"\\\"\", \"cursorPosition\": -2 }, { \"keys\": [\"yn\"], \"type\": \"prompt\", \"command\": \"cp $n \\\"\\\"\", \"cursorPosition\": -2 }, { \"keys\": [\"dn\"], \"type\": \"prompt\", \"command\": \"mv $n \\\"\\\"\", \"cursorPosition\": -2 } ] ","date":"2022-08-31","objectID":"/joplin-terminal/:3:1","tags":["joplin","devtools","vim","terminal"],"title":"如何在terminal中使用Joplin并像vim一样移动?","uri":"/joplin-terminal/"},{"categories":["devtools","vim"],"content":"vim快捷键配置demo keymap.json [ { \"keys\": [\":\"], \"type\": \"function\", \"command\": \"enter_command_line_mode\" }, { \"keys\": [\"TAB\",\"l\"], \"type\": \"function\", \"command\": \"focus_next\" }, { \"keys\": [\"SHIFT_TAB\",\"h\"], \"type\": \"function\", \"command\": \"focus_previous\" }, { \"keys\": [\"UP\",\"k\"], \"type\": \"function\", \"command\": \"move_up\" }, { \"keys\": [\"DOWN\",\"j\"], \"type\": \"function\", \"command\": \"move_down\" }, { \"keys\": [\"PAGE_UP\",\"{\"], \"type\": \"function\", \"command\": \"page_up\" }, { \"keys\": [\"PAGE_DOWN\",\"}\"], \"type\": \"function\", \"command\": \"page_down\" }, { \"keys\": [\"ENTER\"], \"type\": \"function\", \"command\": \"activate\" }, { \"keys\": [\"DELETE\", \"BACKSPACE\"], \"type\": \"function\", \"command\": \"delete\" }, { \"keys\": [\" \"], \"command\": \"todo toggle $n\" }, { \"keys\": [\"tc\"], \"type\": \"function\", \"command\": \"toggle_console\" }, { \"keys\": [\"tm\"], \"type\": \"function\", \"command\": \"toggle_metadata\" }, { \"keys\": [\"/\"], \"type\": \"prompt\", \"command\": \"search \\\"\\\"\", \"cursorPosition\": -2 }, { \"keys\": [\"mn\"], \"type\": \"prompt\", \"command\": \"mknote \\\"\\\"\", \"cursorPosition\": -2 }, { \"keys\": [\"mt\"], \"type\": \"prompt\", \"command\": \"mktodo \\\"\\\"\", \"cursorPosition\": -2 }, { \"keys\": [\"mb\"], \"type\": \"prompt\", \"command\": \"mkbook \\\"\\\"\", \"cursorPosition\": -2 }, { \"keys\": [\"yn\"], \"type\": \"prompt\", \"command\": \"cp $n \\\"\\\"\", \"cursorPosition\": -2 }, { \"keys\": [\"dn\"], \"type\": \"prompt\", \"command\": \"mv $n \\\"\\\"\", \"cursorPosition\": -2 } ] vim快捷键添加e进入Vim编辑 { \"keys\": [\"ENTER\",\"e\"], \"type\": \"function\", \"command\": \"activate\" }, vim快捷键添加q退出 { \"keys\": [\"dn\"], \"type\": \"prompt\", \"command\": \"exit\", \"cursorPosition\": -1 } 主要快捷键 key note cmd hjkl 移动 - (SPACE) 完成todo项目 :todo toggle $n / 搜索 :search mn make note 创建笔记 :mknote mt make todo 创建待办 :mktodo mb make book 创建笔记本 :mkbook yn cp当前项目 cp $n dn 删除当前项目 :mv $n q 退出 :exit ","date":"2022-08-31","objectID":"/joplin-terminal/:3:2","tags":["joplin","devtools","vim","terminal"],"title":"如何在terminal中使用Joplin并像vim一样移动?","uri":"/joplin-terminal/"},{"categories":["devtools","vim"],"content":"配置默认编辑器为Vim 在命令行中执行: joplin config editor \"/usr/bin/vim\" 或在jopliin内部命令行模式 :config editor \"/usr/bin/vim\" ","date":"2022-08-31","objectID":"/joplin-terminal/:3:3","tags":["joplin","devtools","vim","terminal"],"title":"如何在terminal中使用Joplin并像vim一样移动?","uri":"/joplin-terminal/"},{"categories":["devtools","vim"],"content":"参考 https://joplinapp.org/terminal https://zhuanlan.zhihu.com/p/107334649 ","date":"2022-08-31","objectID":"/joplin-terminal/:4:0","tags":["joplin","devtools","vim","terminal"],"title":"如何在terminal中使用Joplin并像vim一样移动?","uri":"/joplin-terminal/"},{"categories":["others"],"content":"开发者注意健康饮食习惯 图片来源:腾讯医典,如有侵权，请联系本站删除。 ","date":"2022-08-30","objectID":"/health-ls/:0:0","tags":["health"],"title":"开发者需要注意健康饮食习惯之一","uri":"/health-ls/"},{"categories":["language"],"content":"lua-pbc(lua的protobuf库)如何使用？ ","date":"2022-08-30","objectID":"/lua-pbc/:0:0","tags":["lua","protobuf"],"title":"lua-pbc(lua的protobuf库)如何使用？","uri":"/lua-pbc/"},{"categories":["language"],"content":"lua-pbc是什么? lua-pbc,即lua protocol buffer fro c,是云风写的一个给lua使用的protobuf封包解包的库,如果你想用skynet来写游戏等服务端应用，lua-pbc是不错的选择。 lua-pbc github地址为: https://github.com/cloudwu/pbc 关于pbc的设计，大家可以看一下云风的博客: https://blog.codingnow.com/2011/12/protocol_buffers_for_c.html ","date":"2022-08-30","objectID":"/lua-pbc/:1:0","tags":["lua","protobuf"],"title":"lua-pbc(lua的protobuf库)如何使用？","uri":"/lua-pbc/"},{"categories":["language"],"content":"lua-pbc如何使用？ 这里有几个接个api需要熟悉一下 编写protobuf的proto文件 User.proto package tutorial; message User { optional string name = 1; } 引入模块protobuf local pb = require \"protobuf\" 注册文件 pb.register_file \"User.pb\" encode local msg_table = { name = \"test1\" } pb.encode(\"tutorial.User\",msg_table}, decode local msg_table = pb.decode(\"tutorial.Person\", buf) ","date":"2022-08-30","objectID":"/lua-pbc/:2:0","tags":["lua","protobuf"],"title":"lua-pbc(lua的protobuf库)如何使用？","uri":"/lua-pbc/"},{"categories":["language"],"content":"使用感受 lua-pbc使用了很长一段时间，官方skynte升级支持lua5.4以后，pbc还是可以正常工作的。 pbc的接口设计是比较简洁的，用起来也非常方便。想深入了解的同学，建议去看看源码。 ","date":"2022-08-30","objectID":"/lua-pbc/:3:0","tags":["lua","protobuf"],"title":"lua-pbc(lua的protobuf库)如何使用？","uri":"/lua-pbc/"},{"categories":["language"],"content":"参考 pbc: https://github.com/cloudwu/pbc pbc binding lua: https://github.com/cloudwu/pbc/blob/master/binding/lua/README.md ","date":"2022-08-30","objectID":"/lua-pbc/:4:0","tags":["lua","protobuf"],"title":"lua-pbc(lua的protobuf库)如何使用？","uri":"/lua-pbc/"},{"categories":["vim"],"content":"vim交换文件是否应该开启？ 在vim的使用过程中默认会产生交换文件。交换文件会记录文件修改的过程。如果不小心断电或者意外关闭了文件而没有保存，可以通过交换文件进行恢复。 ","date":"2022-08-29","objectID":"/vim-swap/:0:0","tags":["vim"],"title":"vim交换文件是否应该开启？","uri":"/vim-swap/"},{"categories":["vim"],"content":"交换文件如何使用？ ","date":"2022-08-29","objectID":"/vim-swap/:1:0","tags":["vim"],"title":"vim交换文件是否应该开启？","uri":"/vim-swap/"},{"categories":["vim"],"content":"启用交换文件 set swapfile ","date":"2022-08-29","objectID":"/vim-swap/:1:1","tags":["vim"],"title":"vim交换文件是否应该开启？","uri":"/vim-swap/"},{"categories":["vim"],"content":"关闭交换文件 set noswapfile 上述设置方法只是针对当前文件生效，如果想对所有文件生效需要在.vimrc中进行设置。 .vimrc中的设置关闭交换文件的方法也很简单，只需要加上一行: set noswapfile ","date":"2022-08-29","objectID":"/vim-swap/:1:2","tags":["vim"],"title":"vim交换文件是否应该开启？","uri":"/vim-swap/"},{"categories":["vim"],"content":"查看当前交换文件的名称 :swapname ","date":"2022-08-29","objectID":"/vim-swap/:1:3","tags":["vim"],"title":"vim交换文件是否应该开启？","uri":"/vim-swap/"},{"categories":["vim"],"content":"查看交换文件的用法 :help swap-file ","date":"2022-08-29","objectID":"/vim-swap/:1:4","tags":["vim"],"title":"vim交换文件是否应该开启？","uri":"/vim-swap/"},{"categories":["vim"],"content":"交换文件有哪些作用? ","date":"2022-08-29","objectID":"/vim-swap/:2:0","tags":["vim"],"title":"vim交换文件是否应该开启？","uri":"/vim-swap/"},{"categories":["vim"],"content":"1. 恢复文件 在正常关闭情况下，交换文件会被删除，非正常关闭的情况下，交换文件不会被删除，下次你打开文件的时候，会提示你是否需要从交换文件恢复。 ","date":"2022-08-29","objectID":"/vim-swap/:2:1","tags":["vim"],"title":"vim交换文件是否应该开启？","uri":"/vim-swap/"},{"categories":["vim"],"content":"2. 检测多处修改 交换文件还有一个作用，就是避免Vim的多个实例编译同一文件。 ","date":"2022-08-29","objectID":"/vim-swap/:2:2","tags":["vim"],"title":"vim交换文件是否应该开启？","uri":"/vim-swap/"},{"categories":["vim"],"content":"总结 在我看来作为程序员应该是需要养成习惯，及时对修改的文件进行保存的。并且做好了一个功能，就应该即使提交到代码库进行保存。如果能保证做到及时保存，及时提交到代码仓库。交换文件是不需要开启的。 如果你是一个Vim新手，建议还是开启swapfile 等你对vim熟悉了，并且有良好的保存习惯，完全可以关闭swapfile ","date":"2022-08-29","objectID":"/vim-swap/:3:0","tags":["vim"],"title":"vim交换文件是否应该开启？","uri":"/vim-swap/"},{"categories":["vim"],"content":"Vim常用插件有哪些? Vim的插件真的很多，Vim好用主要原因是它基本的移动命令，几大模式,但是要提高开发效率，插件也是比不可少的。这里简单罗列一下我平时用得比较多的几款插件。 molokai配色方案 Plug 'git://github.com/tomasr/molokai.git' 树形插件:nerdtree Plug 'preservim/nerdtree' 函数标签栏:tagbar Plug 'majutsushi/tagbar' 对齐工具:tabular Plug 'godlygeek/tabular' 文件查找插件:ctrlp Plug 'ctrlpvim/ctrlp.vim' 文本查找插件:ag.vim Plug 'git://github.com/rking/ag.vim.git' markdown预览插件 Plug 'iamcco/markdown-preview.vim' fzf 查找插件 Plug 'junegunn/fzf.vim' LeaderF查找插件 Plug 'Yggdroot/LeaderF', { 'do': './install.sh' } 上面罗列的插件已经很多了，平时用上这些插件，对于日常的开发基本就已经够用了。有空详细介绍一下上面的各个插件的用法。 更多vim用发可以浏览: https://cfanzp.com/categories/vim/ ","date":"2022-08-26","objectID":"/vim-plug-in/:0:0","tags":["vim"],"title":"Vim常用插件有哪些?","uri":"/vim-plug-in/"},{"categories":["skynet","opensource"],"content":"skynet学习资源汇总 学习使用skynet已经有一段时间了，最初学习skynet是直接拿着skynet的源码已经官方例子，一点点地自己看，自己跑demo,慢慢才熟悉了skynet。这过程中就踩了不少坑，这里收集了一些skynet的学习资源，在此记录一下。 skynet的github地址: https://github.com/cloudwu/skynet skynet官方帮助文档: https://github.com/cloudwu/skynet/wiki skynet作者博客: https://blog.codingnow.com/ skynet sample: https://github.com/cloudwu/skynet_sample skynet pbc: https://github.com/cloudwu/pbc 我的skynet学习笔记: https://cfanzp.com/categories/skynet/ skynet资源：http://forthxu.com/blog/skynet.html ","date":"2022-08-26","objectID":"/skynet-res/:0:0","tags":["skynet"],"title":"skynet学习资源汇总","uri":"/skynet-res/"},{"categories":["skynet","opensource"],"content":"skynet视频教程 4小时玩转skynet: https://www.bilibili.com/video/BV1AV411r71g ","date":"2022-08-26","objectID":"/skynet-res/:1:0","tags":["skynet"],"title":"skynet学习资源汇总","uri":"/skynet-res/"},{"categories":["golang"],"content":"Go基本环境配置 ","date":"2022-08-24","objectID":"/go-env/:0:0","tags":["golang"],"title":"Go基本环境配置","uri":"/go-env/"},{"categories":["golang"],"content":"下载 https://dl.google.com/go/go1.18.1.linux-amd64.tar.gz ","date":"2022-08-24","objectID":"/go-env/:1:0","tags":["golang"],"title":"Go基本环境配置","uri":"/go-env/"},{"categories":["golang"],"content":"环境变量配置 https://blog.csdn.net/Deronn/article/details/108364612 export GO111MODULE=on export GOPROXY=https://goproxy.cn export GOROOT=/usr/local/go export GOPATH=~/go/path export PATH=$PATH:$GOROOT/bin:$GOPATH/bin ","date":"2022-08-24","objectID":"/go-env/:2:0","tags":["golang"],"title":"Go基本环境配置","uri":"/go-env/"},{"categories":["golang"],"content":"环境变量生效 source /etc/profile ##在当前bash环境下读取并执行profile中的命令。 go env ","date":"2022-08-24","objectID":"/go-env/:3:0","tags":["golang"],"title":"Go基本环境配置","uri":"/go-env/"},{"categories":["golang"],"content":"初始化项目 gin demo package main import \"github.com/gin-gonic/gin\" func main() { // 创建一个默认的Gin引擎 r := gin.Default() // 定义一个简单的GET请求路由 r.GET(\"/\", func(c *gin.Context) { c.String(200, \"Hello, Gin!\") }) // 启动HTTP服务器，监听在 8080 端口 r.Run(\":8080\") } 初始化项目 go mod init example.com/gin_demo go mod tidy go build ","date":"2022-08-24","objectID":"/go-env/:4:0","tags":["golang"],"title":"Go基本环境配置","uri":"/go-env/"},{"categories":["golang"],"content":"编译 go build -o main.exe main.go ","date":"2022-08-24","objectID":"/go-env/:5:0","tags":["golang"],"title":"Go基本环境配置","uri":"/go-env/"},{"categories":["golang"],"content":"运行 直接运行编译后的可执行程序 go run 运行源代码 ","date":"2022-08-24","objectID":"/go-env/:6:0","tags":["golang"],"title":"Go基本环境配置","uri":"/go-env/"},{"categories":["golang"],"content":"vim配置 https://blog.csdn.net/Jmilk/article/details/107292042 https://zhuanlan.zhihu.com/p/51656877 https://www.sunzhongwei.com/vim-execution-goinstallbinaries-installation-depend-on-failure https://blog.csdn.net/pujiao5201314/article/details/77947885 ","date":"2022-08-24","objectID":"/go-env/:7:0","tags":["golang"],"title":"Go基本环境配置","uri":"/go-env/"},{"categories":["golang"],"content":"vim配置vim-go推出时语法检查 ","date":"2022-08-24","objectID":"/go-env/:8:0","tags":["golang"],"title":"Go基本环境配置","uri":"/go-env/"},{"categories":["golang"],"content":"相关工具 gocode,errorcheck https://www.imooc.com/wenda/detail/664397 .vimrc let g:syntastic_go_checkers = ['govet', 'errcheck', 'go'] GoBinaryInstall go install github.com/nsf/gocode@latest go install github.com/golang/lint@latest vim GoRun报错 malformed import path \"go: cannot find main module, but found .git/config in /data/test\": invalid ch ","date":"2022-08-24","objectID":"/go-env/:8:1","tags":["golang"],"title":"Go基本环境配置","uri":"/go-env/"},{"categories":["golang"],"content":"常见问题 ","date":"2022-08-24","objectID":"/go-env/:9:0","tags":["golang"],"title":"Go基本环境配置","uri":"/go-env/"},{"categories":["golang"],"content":"GO111MODULE https://zhuanlan.zhihu.com/p/374372749 ","date":"2022-08-24","objectID":"/go-env/:9:1","tags":["golang"],"title":"Go基本环境配置","uri":"/go-env/"},{"categories":["golang"],"content":"当我们配置好go环境，可以正常使用go命令，但是使用 sudo 权限执行 go 命令，出现“sudo: go：找不到命令”时： sudo vim /etc/sudoers Defaults secure_path=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin:/usr/local/go/bin\" ","date":"2022-08-24","objectID":"/go-env/:9:2","tags":["golang"],"title":"Go基本环境配置","uri":"/go-env/"},{"categories":["golang"],"content":"go mod 模式下如何引入本地包名 https://wenku.baidu.com/view/74dc3f26ecf9aef8941ea76e58fafab068dc445a.html ","date":"2022-08-24","objectID":"/go-env/:10:0","tags":["golang"],"title":"Go基本环境配置","uri":"/go-env/"},{"categories":["golang"],"content":"go语言前景 https://zhuanlan.zhihu.com/p/382833278 ","date":"2022-08-24","objectID":"/go-env/:11:0","tags":["golang"],"title":"Go基本环境配置","uri":"/go-env/"},{"categories":["golang"],"content":"go框架 一个go语言学习网站:https://www.topgoer.cn/ https://blog.csdn.net/qq_31967569/article/details/105262821 gfast: https://gitee.com/tiger1103/gfast go-zero: https://github.com/zeromicro/go-zero https://zhuanlan.zhihu.com/p/380803333 go-websocket demo: https://github.com/woodylan/go-websocket Gin sonic(字节优化版的json库): https://github.com/bytedance/sonic gjson: github.com/tidwall/gjson https://blog.csdn.net/m0_37322399/article/details/119189507 ","date":"2022-08-24","objectID":"/go-env/:12:0","tags":["golang"],"title":"Go基本环境配置","uri":"/go-env/"},{"categories":["golang"],"content":"网络安全 Acra ","date":"2022-08-24","objectID":"/go-env/:12:1","tags":["golang"],"title":"Go基本环境配置","uri":"/go-env/"},{"categories":["golang"],"content":"游戏框架 https://blog.csdn.net/qq_31967569/article/details/105262821 https://github.com/Golangltd/LollipopGo https://github.com/Golangltd/nest m3game https://github.com/Tudongye/m3game ","date":"2022-08-24","objectID":"/go-env/:12:2","tags":["golang"],"title":"Go基本环境配置","uri":"/go-env/"},{"categories":["golang"],"content":"日志库 https://github.com/sirupsen/logrus https://www.cnblogs.com/jiujuan/p/15542743.html ","date":"2022-08-24","objectID":"/go-env/:12:3","tags":["golang"],"title":"Go基本环境配置","uri":"/go-env/"},{"categories":["golang"],"content":"字节内部框架 Hertz:应用在字节跳动自研 Golang HTTP 框 Ginex KiteX:字节自有 RPC 框架 ","date":"2022-08-24","objectID":"/go-env/:12:4","tags":["golang"],"title":"Go基本环境配置","uri":"/go-env/"},{"categories":["golang"],"content":"参考 https://learnku.com/docs/the-way-to-go/interact-with-other-languages/3581#2b59d6 The Way to Go: https://learnku.com/docs/the-way-to-go https://github.com/Unknwon/the-way-to-go_ZH_CN ","date":"2022-08-24","objectID":"/go-env/:12:5","tags":["golang"],"title":"Go基本环境配置","uri":"/go-env/"},{"categories":["devtools"],"content":"在线工具 在线测速:https://www.ping.cn MD5加密:https://md5jiami.bmcx.com/ JSON在线格式化: https://www.bt.cn/tools/json.html https://www.bejson.com ","date":"2022-08-24","objectID":"/online-tools/:0:0","tags":["devtools"],"title":"在线工具","uri":"/online-tools/"},{"categories":["linux"],"content":"linux中jpg格式转化为png格式 linux中将jpg与png进行转化可以用parallel和convert命令 安装方法: 安装arallel sudo apt-get install parallel 安装convert sudo apt-get install imagemagick cfanzp.jpg转化为cfanzp.png parallel convert '{}' '{.}.png' ::: cfanzp.jpg ","date":"2022-08-23","objectID":"/linux-jpg2png/:0:0","tags":["linux","image"],"title":"linux中jpg格式转化为png格式","uri":"/linux-jpg2png/"},{"categories":["golang","language"],"content":"GOPROXY配置 最近在使用hugo时需要依赖go环境在安装依赖包的时候，速度很慢，之前都是配置外网环境解决的。其实go环境有国内的替代域名资源可以使用。 在go环境下，需要下载依赖包的时候，如果没有外网环境的话，很多包默认是无法下载下来的，解决办法就是修改一下GOPROXY的配置 go env -w GOPROXY=https://goproxy.io,direct ","date":"2022-08-23","objectID":"/goproxy/:0:0","tags":["golang"],"title":"GOPROXY配置","uri":"/goproxy/"},{"categories":["lua"],"content":"lua中如何实现打印行号和当前函数名？ lua中可以使用debug的get_info方法来获取当前的堆栈信息，进而可以打印出相关的环境信息，具体信息包括: table: 0x7f92b8f19e80 { isvararg = false , what = Lua , func = function: 0x7f92b7b8d600 , namewhat = , istailcall = true , lastlinedefined = 16 , source = @service/db/db_interactionemotion.lua , linedefined = 7 , currentline = 11 , ntransfer = 0 , short_src = service/db/db_interactionemotion.lua , ftransfer = 0 , nups = 3 , nparams = 0 , } lua中需要打印行号多半是日志需求，下面是一个demo: local logger_api = require 'common.logger_api' local tag = \"test\" local test_id = 0 local M = {} local function get_debuginfo(info) --utils.var_dump(info) local d = \"\" if info ~= nil and info.short_src ~= nil and info.currentline ~= nil then d = info.short_src .. \":\" .. info.currentline .. \":\" end return d end function M.ELOG(...) local info = debug.getinfo(2) local d = get_debuginfo(info) logger_api.ERROR(string.format(\"%s[E]no_%s_%s\",d,test_id,tag),...) end function M.WLOG(...) local info = debug.getinfo(2) local d = get_debuginfo(info) logger_api.WARN(string.format(\"%s[W]no_%s_%s\",d,test_id,tag),...) end function M.NLOG(...) logger_api.INFO(string.format(\"[N]no_%s_%s\", test_id,tag), ...) end function M.DLOG(...) local info = debug.getinfo(2) local d = get_debuginfo(info) logger_api.DEBUG(string.format(\"%s[D]no_%s_%s\",d,test_id,tag),...) end return M ","date":"2022-08-23","objectID":"/lua-debug/:0:0","tags":["lua"],"title":"lua中如何实现打印行号和当前函数名？","uri":"/lua-debug/"},{"categories":["mysql"],"content":"mysql存储过程 ","date":"2022-08-23","objectID":"/mysql-procedure/:0:0","tags":["mysql"],"title":"mysql存储过程","uri":"/mysql-procedure/"},{"categories":["mysql"],"content":"FAQ ","date":"2022-08-23","objectID":"/mysql-procedure/:1:0","tags":["mysql"],"title":"mysql存储过程","uri":"/mysql-procedure/"},{"categories":["mysql"],"content":"如何创建存储过程? 下面是一个创建存储过程的demo: 存储过程名为:p_login 存储过程有3个参数:a_platform,a_account,a_password CREATE DEFINER=`root`@`%` PROCEDURE `p_login`(in a_platform int, in a_account varchar(64), in a_password varchar(32)) begin SELECT *,userid as uid FROM tb_account WHERE account=a_account AND platform=a_platform AND `password`=a_password AND nullity = '0' AND android = '0'; end ","date":"2022-08-23","objectID":"/mysql-procedure/:2:0","tags":["mysql"],"title":"mysql存储过程","uri":"/mysql-procedure/"},{"categories":["mysql"],"content":"如何调用存储过程? CALL p_login(1,\"aaa\",\"password\"); ","date":"2022-08-23","objectID":"/mysql-procedure/:3:0","tags":["mysql"],"title":"mysql存储过程","uri":"/mysql-procedure/"},{"categories":["mysql"],"content":"存储过程中常用的函数有哪些？ 获取当前时间搓 current_timestamp() 获取时间 NOW() 获取当前日期 curdate() 获取最后一个标识值 在一条 INSERT、SELECT INTO 或大容量复制语句完成后，@@IDENTITY 中包含语句生成的最后一个标识值 select @@IDENTITY 获取今天，昨天，前天的当前时间 CREATE DEFINER=`root`@`%` PROCEDURE `p_demo_get_daily_login_report`(IN `a_step` int) BEGIN DECLARE start_day TIMESTAMP; DECLARE end_day TIMESTAMP; # a_step=0 今天 # a_step=1 昨天 # a_step=2 前天 SET start_day = (CAST(SYSDATE()AS DATE) - INTERVAL a_step DAY); SET end_day = (CAST(SYSDATE()AS DATE) + INTERVAL 1 DAY - INTERVAL a_step DAY); select a.userid,a.channel_id,b.nickname,COUNT(a.userid) as cnt from t_record_login as a,t_account as b where a.insert_date \u003e start_day and a.insert_date \u003c end_day and a.userid = b.userid group by a.userid order by cnt desc limit 10; END ","date":"2022-08-23","objectID":"/mysql-procedure/:4:0","tags":["mysql"],"title":"mysql存储过程","uri":"/mysql-procedure/"},{"categories":["devtools"],"content":"vscode使用笔记 ","date":"2022-08-23","objectID":"/edit-vscode/:0:0","tags":["vscode"],"title":"vscode的使用","uri":"/edit-vscode/"},{"categories":["devtools"],"content":"FAQ ","date":"2022-08-23","objectID":"/edit-vscode/:0:1","tags":["vscode"],"title":"vscode的使用","uri":"/edit-vscode/"},{"categories":["devtools"],"content":"vscode必备插件有哪些？ vim Lua Vscode-lua Go Rainbow Brackets Thunder Client ","date":"2022-08-23","objectID":"/edit-vscode/:1:0","tags":["vscode"],"title":"vscode的使用","uri":"/edit-vscode/"},{"categories":["devtools"],"content":"如何给vscode添加ruler? 按语言添加: \"[lua]\":{ \"editor.rulers\":[80], } ","date":"2022-08-23","objectID":"/edit-vscode/:2:0","tags":["vscode"],"title":"vscode的使用","uri":"/edit-vscode/"},{"categories":["devtools"],"content":"vscode配置vim插件jk退出插入模式 https://www.cnblogs.com/YunyaSir/p/15522565.html \"vim.insertModeKeyBindings\": [ { \"before\": [ \"j\", \"k\" ], \"after\": [ \"\u003cEsc\u003e\" ] }, ], ","date":"2022-08-23","objectID":"/edit-vscode/:2:1","tags":["vscode"],"title":"vscode的使用","uri":"/edit-vscode/"},{"categories":["devtools"],"content":"vscode 在mac上无法连续输入k如何解决？ defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool false # For VS Code defaults write com.microsoft.VSCodeInsiders ApplePressAndHoldEnabled -bool false # For VS Code Insider defaults write com.visualstudio.code.oss ApplePressAndHoldEnabled -bool false # For VS Codium defaults write com.microsoft.VSCodeExploration ApplePressAndHoldEnabled -bool false # For VS Codium Exploration users defaults delete -g ApplePressAndHoldEnabled ","date":"2022-08-23","objectID":"/edit-vscode/:2:2","tags":["vscode"],"title":"vscode的使用","uri":"/edit-vscode/"},{"categories":["devtools","git"],"content":"git常见问题 ","date":"2022-08-23","objectID":"/git-faq/:0:0","tags":["git"],"title":"git常见问题","uri":"/git-faq/"},{"categories":["devtools","git"],"content":"FAQ ","date":"2022-08-23","objectID":"/git-faq/:1:0","tags":["git"],"title":"git常见问题","uri":"/git-faq/"},{"categories":["devtools","git"],"content":"git如何清除提交记录？ 项目如果走过了一个很长的开发周期以后，提交历史会很长，如果提交记录不重要，这种情况下可以删除掉历时记录。 创建一个干净的分支 使用--orphan参数 添加当前的所有文件 提交注释 删除原来的分支master 把当前分支重命名为master 把当前分支强行推送到远端 git checkout --orphan test git add . git commit -m \"init\" git branch -D master git branch -m master git push -f origin master ","date":"2022-08-23","objectID":"/git-faq/:1:1","tags":["git"],"title":"git常见问题","uri":"/git-faq/"},{"categories":["devtools","git"],"content":"git如何查看空间占用? git count-objects -v # 查看 git 相关文件占用的空间 du -sh .git # 查看 .git 文件夹占用磁盘空间 ","date":"2022-08-23","objectID":"/git-faq/:1:2","tags":["git"],"title":"git常见问题","uri":"/git-faq/"},{"categories":["devtools","git"],"content":"如何查找git提交中涉及的大文件? git rev-list --objects --all | grep \"$(git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -5 | awk '{print$1}')\" ","date":"2022-08-23","objectID":"/git-faq/:1:3","tags":["git"],"title":"git常见问题","uri":"/git-faq/"},{"categories":["devtools","git"],"content":"如何删除大文件? git filter-branch -f --prune-empty --index-filter 'git rm -rf --cached --ignore-unmatch big_file_name' --tag-name-filter cat -- --all rm -Rf .git/refs/original rm -Rf .git/logs/ git gc git prune git push --force ","date":"2022-08-23","objectID":"/git-faq/:1:4","tags":["git"],"title":"git常见问题","uri":"/git-faq/"},{"categories":["devtools","git"],"content":"如何删除文件名为tags的文件 git filter-branch -f --prune-empty --index-filter 'git rm -rf --cached --ignore-unmatch tags' --tag-name-filter cat -- --all rm -Rf .git/refs/original rm -Rf .git/logs/ git gc git prune git push --force ","date":"2022-08-23","objectID":"/git-faq/:1:5","tags":["git"],"title":"git常见问题","uri":"/git-faq/"},{"categories":["devtools","git"],"content":"git如何查看文件? git rev-list --objects --all | grep \"$(git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -18 | awk '{print$1}')\" ","date":"2022-08-23","objectID":"/git-faq/:1:6","tags":["git"],"title":"git常见问题","uri":"/git-faq/"},{"categories":["devtools","git"],"content":"git 使用config文件配置快捷访问 创建文件 touch ~/.ssh/config 配置文件 vim ~/.ssh/config Host server1 HostName 127.0.0.1 Port 22 User root IdentityFile ~/.ssh/id_rsa Host server2 HostName 192.168.0.1 Port 22 User root IdentityFile ~/.ssh/id_rsa 使用 连接server1服务器 ssh server1 连接server2服务器 ssh server2 ","date":"2022-08-23","objectID":"/git-faq/:1:7","tags":["git"],"title":"git常见问题","uri":"/git-faq/"},{"categories":["devtools","git"],"content":"git reset,git checkout 后依旧显示有修改,实际上没有修改怎么办？ 比较被修改的文件，发现实际没有任何修改提示： File mode changed from 100755 to 100644 原因：主要原因是因为文件的权限被修改了。 解决办法可参考: https://blog.csdn.net/qq_41872247/article/details/116457169 git config --global --add core.filemode false ","date":"2022-08-23","objectID":"/git-faq/:1:8","tags":["git"],"title":"git常见问题","uri":"/git-faq/"},{"categories":["devtools","git"],"content":"参考 git 删除历史已提交的大文件 Git删除历史记录（已提交）中的大文件 gitLab清理大文件_包括历史记录中的大文件 git-filter-repo ","date":"2022-08-23","objectID":"/git-faq/:2:0","tags":["git"],"title":"git常见问题","uri":"/git-faq/"},{"categories":["devtools"],"content":"解决gitlab占用内存太大的问题 最近gitlab服务器出现了占用内存太大的问题。虚拟机里的linux系统内存\u003e4G都被几乎用完了。 网上查询了相关资料，解决方法主要是修改一下配置。或者更换git服务器工具，比如更换为gogs或者gitea等。 因为时间关系暂且改一下配置解决一下问题: 配置文件路径为: /etc/gitlab/gitlab.rb 修改相关参数 postgresql['shared_buffers'] = \"64MB\" postgresql['max_worker_processes'] = 2 sidekiq['max-concurrency']=5 #禁用prometheus，可以进一步减少内存占用 prometheus_monitoring['enable'] = false sidekiq['concurrency'] = 25 重启服务 gitlab-ctl reconfigure gitlab-ctl restart 精简gitlab服务:https://zhuanlan.zhihu.com/p/389717047 ","date":"2022-08-22","objectID":"/gitlab-config/:0:0","tags":["gitlab"],"title":"解决gitlab占用内存太大的问题","uri":"/gitlab-config/"},{"categories":["devtools"],"content":"参考资料 https://zhuanlan.zhihu.com/p/348813603 https://my.oschina.net/sunhualong/blog/4275867 ","date":"2022-08-22","objectID":"/gitlab-config/:1:0","tags":["gitlab"],"title":"解决gitlab占用内存太大的问题","uri":"/gitlab-config/"},{"categories":["硬件"],"content":"cpu天梯图 在购买电脑的时候不知道怎么选电脑? 选电脑选好主要的cpu,显卡，主板等就不会吃大亏。这里给大家展示一下本人在百度贴吧找到的今年7月分最新的cpu天梯图。 ","date":"2022-08-20","objectID":"/cpu_ttt/:0:0","tags":["硬件"],"title":"cpu天梯图","uri":"/cpu_ttt/"},{"categories":["硬件"],"content":"天梯图 图片原址:https://tieba.baidu.com/p/5005825360?pn=19 (在这里感谢原作者分享，图片如有侵权，请联系本站删除。) ","date":"2022-08-20","objectID":"/cpu_ttt/:1:0","tags":["硬件"],"title":"cpu天梯图","uri":"/cpu_ttt/"},{"categories":["硬件"],"content":"cpu代数越高就越好吗？ 大的趋势是技术在进步，后面 出的cpu总地来说会更好，但是进步是需要踩坑的，也需要时间一代一代地迭代，中间版本过渡过程中，新的一代不一定就比旧的强。 本人家里的旧电脑cpu是i5-4590,公司用的旧电脑cpu是i5-6400,直观地看公司的电脑cpu似乎更好，但是看看天梯图，却发现其实i5-4590性能更强一些。 再去多查一些资料，根据网友的反馈来看，总体来看: 从性能上来说,4590比6400还要稍微强一点点 6代的6400比4代的4590功耗更低 6400是14nm工艺，4590是22nm工艺 对于现在而言都是很差的cpu了。不过平时办公日常需求也够用了。平时选购cpu时参考一下天梯图，再查查网友的使用对比，会比较 稳妥一些。 ","date":"2022-08-20","objectID":"/cpu_ttt/:2:0","tags":["硬件"],"title":"cpu天梯图","uri":"/cpu_ttt/"},{"categories":["硬件"],"content":"参考 2个cpu参数对比:https://cpu.bmcx.com/1537_1506_1496__cpu/ B站2个cpu的对比视频:https://www.bilibili.com/video/av5101266 ","date":"2022-08-20","objectID":"/cpu_ttt/:3:0","tags":["硬件"],"title":"cpu天梯图","uri":"/cpu_ttt/"},{"categories":[],"content":"web压力测试工具:httperf 下载地址: ","date":"2022-08-19","objectID":"/httperf/:0:0","tags":[],"title":"Httperf","uri":"/httperf/"},{"categories":[],"content":"使用demo: httperf --client=0/1 --server 192.168.2.127 --port 7100 --uri /loginReq --num-conns 30000 --rate 30000 --hog ","date":"2022-08-19","objectID":"/httperf/:1:0","tags":[],"title":"Httperf","uri":"/httperf/"},{"categories":[],"content":"教程: https://blog.csdn.net/qq_33391644/article/details/103794115 https://www.cnblogs.com/cllovewxq/p/5533487.html ","date":"2022-08-19","objectID":"/httperf/:2:0","tags":[],"title":"Httperf","uri":"/httperf/"},{"categories":["os","linux"],"content":"linux查看打开文件情况 查看进程skynet(config.login)的pid [root@dev127 login]# ps -ef | grep login root 657 1 0 6月20 ? 00:00:49 /usr/lib/systemd/systemd-logind root 113262 1 8 15:27 ? 00:02:19 /data/myb/sh/../skynet/skynet /data/myb/sh/login/config.login root 113983 107342 0 15:42 pts/4 00:00:02 tail login.20220819.log -f root 114702 112029 0 15:55 pts/2 00:00:00 grep --color=auto login 查看进程能打开的最大文件数目 [root@dev127 login]# cat /proc/113262/limits Limit Soft Limit Hard Limit Units Max cpu time unlimited unlimited seconds Max file size unlimited unlimited bytes Max data size unlimited unlimited bytes Max stack size 8388608 unlimited bytes Max core file size unlimited unlimited bytes Max resident set unlimited unlimited bytes Max processes 26047 26047 processes Max open files 1024 4096 files Max locked memory 65536 65536 bytes Max address space unlimited unlimited bytes Max file locks unlimited unlimited locks Max pending signals 26047 26047 signals Max msgqueue size 819200 819200 bytes Max nice priority 0 0 Max realtime priority 0 0 Max realtime timeout unlimited unlimited us [root@dev127 login]# ","date":"2022-08-19","objectID":"/lsof/:0:0","tags":["lsof"],"title":"linux查看打开文件情况","uri":"/lsof/"},{"categories":["os","linux"],"content":"参考链接 https://blog.csdn.net/jsugs/article/details/122056916 ","date":"2022-08-19","objectID":"/lsof/:1:0","tags":["lsof"],"title":"linux查看打开文件情况","uri":"/lsof/"},{"categories":["devtools"],"content":"常用工具下载地址汇总 ","date":"2022-08-19","objectID":"/tools_download/:0:0","tags":["devtools"],"title":"常用工具下载地址汇总","uri":"/tools_download/"},{"categories":["devtools"],"content":"在线工具 tool.lu: https://tool.lu ","date":"2022-08-19","objectID":"/tools_download/:1:0","tags":["devtools"],"title":"常用工具下载地址汇总","uri":"/tools_download/"},{"categories":["devtools"],"content":"智能命名工具 CODELF: https://unbug.github.io/codelf ","date":"2022-08-19","objectID":"/tools_download/:2:0","tags":["devtools"],"title":"常用工具下载地址汇总","uri":"/tools_download/"},{"categories":["devtools"],"content":"ssh远程连接 WindTerm: https://github.com/kingToolbox/WindTerm/releases git: https://git-scm.com/download/ windows版本的安装后会自带ssh客户端，配合.ssh/文件夹下的config文件使用也是非常方便的。 Xshell: https://www.xshell.com/zh/xshell/ ","date":"2022-08-19","objectID":"/tools_download/:3:0","tags":["devtools"],"title":"常用工具下载地址汇总","uri":"/tools_download/"},{"categories":["devtools"],"content":"git git: https://git-scm.com/download/ ","date":"2022-08-19","objectID":"/tools_download/:4:0","tags":["devtools"],"title":"常用工具下载地址汇总","uri":"/tools_download/"},{"categories":["devtools"],"content":"linux常用软件 截图工具flameshot: https://github.com/flameshot-org/flameshot wechat: https://www.ubuntukylin.com/applications/106-cn.html 飞书: https://www.feishu.cn/download 有道云笔记: https://note.youdao.com/download.html 流程图软件Dia: https://zhuanlan.zhihu.com/p/366116011 wps: https://www.wps.cn/product/wpslinux 安装:sudo apt install ./wps-office_11.1.0.11664_amd64.deb 字体问题: https://zhuanlan.zhihu.com/p/145114644 字体下载,链接: https://pan.baidu.com/s/18PWLr_t6Lub9PoEg9zUSzg 提取码: isiz ","date":"2022-08-19","objectID":"/tools_download/:5:0","tags":["devtools"],"title":"常用工具下载地址汇总","uri":"/tools_download/"},{"categories":["devtools"],"content":"linux开发工具 httpperf: https://github.com/httperf/httperf 教程: https://www.cnblogs.com/cllovewxq/p/5533487.html ","date":"2022-08-19","objectID":"/tools_download/:6:0","tags":["devtools"],"title":"常用工具下载地址汇总","uri":"/tools_download/"},{"categories":["devtools"],"content":"搜索资源工具 Bing: https://cn.bing.com/ DuckDuckGo: https://duckduckgo.com/ 不搜集用户信息，没有广告 Stack Overflow: https://stackoverflow.com/ 技术问题可以直接查这个网站 Gitlogs: https://www.gitlogs.com/ 搜索GitHub项目的搜索引擎 jiumo search: https://www.jiumodiary.com/ 文档搜索引擎 鸠摩搜书 pexels: https://www.pexels.com/ 高质量的图片网站。 在线画图,ProcessOn: https://www.processon.com/ draw.io: https://app.diagrams.net/ ","date":"2022-08-19","objectID":"/tools_download/:7:0","tags":["devtools"],"title":"常用工具下载地址汇总","uri":"/tools_download/"},{"categories":["devtools"],"content":"参考 https://www.toutiao.com/question/6689398047425691907 ","date":"2022-08-19","objectID":"/tools_download/:8:0","tags":["devtools"],"title":"常用工具下载地址汇总","uri":"/tools_download/"},{"categories":["devtools"],"content":"markdown 基础 ","date":"2022-08-17","objectID":"/markdown/:0:0","tags":["markdown"],"title":"Markdown需要掌握的基础","uri":"/markdown/"},{"categories":["devtools"],"content":"标题 # 标题1 ## 标题2 ### 标题3 #### 标题4 ##### 标题5 ###### 标题6 效果: 标题1 ","date":"2022-08-17","objectID":"/markdown/:1:0","tags":["markdown"],"title":"Markdown需要掌握的基础","uri":"/markdown/"},{"categories":["devtools"],"content":"标题2 ","date":"2022-08-17","objectID":"/markdown/:2:0","tags":["markdown"],"title":"Markdown需要掌握的基础","uri":"/markdown/"},{"categories":["devtools"],"content":"标题3 标题4 标题5 标题6 ","date":"2022-08-17","objectID":"/markdown/:2:1","tags":["markdown"],"title":"Markdown需要掌握的基础","uri":"/markdown/"},{"categories":["devtools"],"content":"分割线 可以使用三个及以上的星号、减号、下划线来表示一条分割线 --- *** ___ ","date":"2022-08-17","objectID":"/markdown/:3:0","tags":["markdown"],"title":"Markdown需要掌握的基础","uri":"/markdown/"},{"categories":["devtools"],"content":"效果: ","date":"2022-08-17","objectID":"/markdown/:4:0","tags":["markdown"],"title":"Markdown需要掌握的基础","uri":"/markdown/"},{"categories":["devtools"],"content":"删除线 ~~ del line ~~ 效果: del line ","date":"2022-08-17","objectID":"/markdown/:5:0","tags":["markdown"],"title":"Markdown需要掌握的基础","uri":"/markdown/"},{"categories":["devtools"],"content":"图片链接 ![公众号二维码](/images/gzh.jpeg#pic_center \"公众号\") 效果: 公众号 ","date":"2022-08-17","objectID":"/markdown/:6:0","tags":["markdown"],"title":"Markdown需要掌握的基础","uri":"/markdown/"},{"categories":["devtools"],"content":"脚注 cfanzp主页[^cfanzp] [^cfanzp]: 主页地址:[https://cfanzp.com](https://cfanzp.com) 效果: cfanzp主页1 ","date":"2022-08-17","objectID":"/markdown/:7:0","tags":["markdown"],"title":"Markdown需要掌握的基础","uri":"/markdown/"},{"categories":["devtools"],"content":"列表 ","date":"2022-08-17","objectID":"/markdown/:8:0","tags":["markdown"],"title":"Markdown需要掌握的基础","uri":"/markdown/"},{"categories":["devtools"],"content":"无序列表 - item1 - item2 效果: item1 item2 ","date":"2022-08-17","objectID":"/markdown/:8:1","tags":["markdown"],"title":"Markdown需要掌握的基础","uri":"/markdown/"},{"categories":["devtools"],"content":"有序列表 1. item1 2. item2 效果: item1 item2 ","date":"2022-08-17","objectID":"/markdown/:8:2","tags":["markdown"],"title":"Markdown需要掌握的基础","uri":"/markdown/"},{"categories":["devtools"],"content":"表格 :-标题栏左对齐 -:标题栏右边对齐 :-:标题栏中间对齐 | 左对齐 | 居中对齐 | 右对齐 | | :--- | :---: | ---: | | item1 | item2 | item3 | 效果: 左对齐 居中对齐 右对齐 item1 item2 item3 ","date":"2022-08-17","objectID":"/markdown/:9:0","tags":["markdown"],"title":"Markdown需要掌握的基础","uri":"/markdown/"},{"categories":["devtools"],"content":"Emoji表情 emoji表情参照表 使用:code:的方式使用,例如code为dog:使用: dog :,中间没有空格。 code icon code icon joy 😂 dog 🐶 smile 😄 cat 🐱 ok 🆗 +1 👍 ","date":"2022-08-17","objectID":"/markdown/:10:0","tags":["markdown"],"title":"Markdown需要掌握的基础","uri":"/markdown/"},{"categories":["devtools"],"content":"官方教程 https://blog.csdn.net/u012102104/article/details/78950290 代码块高亮 emoji表情 Emoji Unicode Tables github emoji-cheat-sheet ","date":"2022-08-17","objectID":"/markdown/:11:0","tags":["markdown"],"title":"Markdown需要掌握的基础","uri":"/markdown/"},{"categories":["devtools"],"content":"emoji表情 来源 People :bowtie: :bowtie: 😄 😄 😆 😆 😊 😊 😃 😃 ☺️ ☺️ 😏 😏 😍 😍 😘 😘 😚 😚 😳 😳 😌 😌 😆 😆 😁 😁 😉 😉 😜 😜 😝 😝 😀 😀 😗 😗 😙 😙 😛 😛 😴 😴 😟 😟 😦 😦 😧 😧 😮 😮 😬 😬 😕 😕 😯 😯 😑 😑 😒 😒 😅 😅 😓 😓 😥 😥 😩 😩 😔 😔 😞 😞 😖 😖 😨 😨 😰 😰 😣 😣 😢 😢 😭 😭 😂 😂 😲 😲 😱 😱 :neckbeard: :neckbeard: 😫 😫 😠 😠 😡 😡 😤 😤 😪 😪 😋 😋 😷 😷 😎 😎 😵 😵 👿 👿 😈 😈 😐 😐 😶 😶 😇 😇 👽 👽 💛 💛 💙 💙 💜 💜 ❤️ ❤️ 💚 💚 💔 💔 💓 💓 💗 💗 💕 💕 💞 💞 💘 💘 💖 💖 ✨ ✨ ⭐ ⭐ 🌟 🌟 💫 💫 💥 💥 💥 💥 💢 💢 ❗ ❗ ❓ ❓ ❕ ❕ ❔ ❔ 💤 💤 💨 💨 💦 💦 🎶 🎶 🎵 🎵 🔥 🔥 💩 💩 💩 💩 💩 💩 👍 👍 👍 👍 👎 👎 👎 👎 👌 👌 👊 👊 👊 👊 ✊ ✊ ✌️ ✌️ 👋 👋 ✋ ✋ ✋ ✋ 👐 👐 ☝️ ☝️ 👇 👇 👈 👈 👉 👉 🙌 🙌 🙏 🙏 👆 👆 👏 👏 💪 💪 🤘 🤘 🖕 🖕 🚶‍♂️ 🚶‍♂️ 🏃‍♂️ 🏃‍♂️ 🏃 🏃 👫 👫 👨‍👩‍👦 👨‍👩‍👦 👬 👬 👭 👭 💃 💃 👯‍♀️ 👯‍♀️ 🙆‍♀️ 🙆‍♀️ 🙅‍♀️ 🙅‍♀️ 💁‍♀️ 💁‍♀️ 🙋‍♀️ 🙋‍♀️ 👰 👰 🙎‍♀️ 🙎‍♀️ 🙍‍♀️ 🙍‍♀️ 🙇 🙇 💏 💏 💑 💑 💆‍♀️ 💆‍♀️ 💇‍♀️ 💇‍♀️ 💅 💅 👦 👦 👧 👧 👩 👩 👨 👨 👶 👶 👵 👵 👴 👴 👱‍♂️ 👱‍♂️ 👲 👲 👳‍♂️ 👳‍♂️ 👷‍♂️ 👷‍♂️ 👮‍♂️ 👮‍♂️ 👼 👼 👸 👸 😺 😺 😸 😸 😻 😻 😽 😽 😼 😼 🙀 🙀 😿 😿 😹 😹 😾 😾 👹 👹 👺 👺 🙈 🙈 🙉 🙉 🙊 🙊 💂‍♂️ 💂‍♂️ 💀 💀 🐾 🐾 👄 👄 💋 💋 💧 💧 👂 👂 👀 👀 👃 👃 👅 👅 💌 💌 👤 👤 👥 👥 💬 💬 💭 💭 :feelsgood: :feelsgood: :finnadie: :finnadie: :goberserk: :goberserk: :godmode: :godmode: :hurtrealbad: :hurtrealbad: :rage1: :rage1: :rage2: :rage2: :rage3: :rage3: :rage4: :rage4: :suspect: :suspect: :trollface: :trollface: Nature ☀️ ☀️ ☂️ ☂️ ☁️ ☁️ ❄️ ❄️ ☃️ ☃️ ⚡ ⚡ 🌀 🌀 🌁 🌁 🌊 🌊 🐱 🐱 🐶 🐶 🐭 🐭 🐹 🐹 🐰 🐰 🐺 🐺 🐸 🐸 🐯 🐯 🐨 🐨 🐻 🐻 🐷 🐷 🐽 🐽 🐮 🐮 🐗 🐗 🐵 🐵 🐒 🐒 🐴 🐴 🐎 🐎 🐫 🐫 🐑 🐑 🐘 🐘 🐼 🐼 🐍 🐍 🐦 🐦 🐤 🐤 🐥 🐥 🐣 🐣 🐔 🐔 🐧 🐧 🐢 🐢 🐛 🐛 🐝 🐝 🐜 🐜 🪲 🪲 🐌 🐌 🐙 🐙 🐠 🐠 🐟 🐟 🐳 🐳 🐋 🐋 🐬 🐬 🐄 🐄 🐏 🐏 🐀 🐀 🐃 🐃 🐅 🐅 🐇 🐇 🐉 🐉 🐐 🐐 🐓 🐓 🐕 🐕 🐖 🐖 🐁 🐁 🐂 🐂 🐲 🐲 🐡 🐡 🐊 🐊 🐪 🐪 🐆 🐆 🐈 🐈 🐩 🐩 🐾 🐾 💐 💐 🌸 🌸 🌷 🌷 🍀 🍀 🌹 🌹 🌻 🌻 🌺 🌺 🍁 🍁 🍃 🍃 🍂 🍂 🌿 🌿 🍄 🍄 🌵 🌵 🌴 🌴 🌲 🌲 🌳 🌳 🌰 🌰 🌱 🌱 🌼 🌼 🌾 🌾 🐚 🐚 🌐 🌐 🌞 🌞 🌝 🌝 🌚 🌚 🌑 🌑 🌒 🌒 🌓 🌓 🌔 🌔 🌕 🌕 🌖 🌖 🌗 🌗 🌘 🌘 🌜 🌜 🌛 🌛 🌔 🌔 🌍 🌍 🌎 🌎 🌏 🌏 🌋 🌋 🌌 🌌 ⛅ ⛅ :octocat: :octocat: :squirrel: :squirrel: Objects 🎍 🎍 💝 💝 🎎 🎎 🎒 🎒 🎓 🎓 🎏 🎏 🎆 🎆 🎇 🎇 🎐 🎐 🎑 🎑 🎃 🎃 👻 👻 🎅 🎅 🎄 🎄 🎁 🎁 🔔 🔔 🔕 🔕 🎋 🎋 🎉 🎉 🎊 🎊 🎈 🎈 🔮 🔮 💿 💿 📀 📀 💾 💾 📷 📷 📹 📹 🎥 🎥 💻 💻 📺 📺 📱 📱 ☎️ ☎️ ☎ ☎ 📞 📞 📟 📟 📠 📠 💽 💽 📼 📼 🔉 🔉 🔈 🔈 🔇 🔇 📢 📢 📣 📣 ⌛ ⌛ ⏳ ⏳ ⏰ ⏰ ⌚ ⌚ 📻 📻 🛰️ 🛰️ ➿ ➿ 🔍 🔍 🔎 🔎 🔓 🔓 🔒 🔒 🔏 🔏 🔐 🔐 🔑 🔑 💡 💡 🔦 🔦 🔆 🔆 🔅 🔅 🔌 🔌 🔋 🔋 📲 📲 ✉️ ✉️ 📫 📫 📮 📮 🛀 🛀 🛁 🛁 🚿 🚿 🚽 🚽 🔧 🔧 🔩 🔩 🔨 🔨 💺 💺 💰 💰 💴 💴 💵 💵 💷 💷 💶 💶 💳 💳 💸 💸 📧 📧 📥 📥 📤 📤 ✉ ✉ 📨 📨 📯 📯 📪 📪 📬 📬 📭 📭 🚪 🚪 🚬 🚬 💣 💣 🔫 🔫 🔪 🔪 💊 💊 💉 💉 📄 📄 📃 📃 📑 📑 📊 📊 📈 📈 📉 📉 📜 📜 📋 📋 📆 📆 📅 📅 📇 📇 📁 📁 📂 📂 ✂️ ✂️ 📌 📌 📎 📎 ✒️ ✒️ ✏️ ✏️ 📏 📏 📐 📐 📕 📕 📗 📗 📘 📘 📙 📙 📓 📓 📔 📔 📒 📒 📚 📚 🔖 🔖 📛 📛 🔬 🔬 🔭 🔭 📰 📰 🏈 🏈 🏀 🏀 ⚽ ⚽ ⚾ ⚾ 🎾 🎾 🎱 🎱 🏉 🏉 🎳 🎳 ⛳ ⛳ 🚵‍♂️ 🚵‍♂️ 🚴‍♂️ 🚴‍♂️ 🏇 🏇 🏂 🏂 🏊‍♂️ 🏊‍♂️ 🏄‍♂️ 🏄‍♂️ 🎿 🎿 ♠️ ♠️ ♥️ ♥️ ♣️ ♣️ ♦️ ♦️ 💎 💎 💍 💍 🏆 🏆 🎼 🎼 🎹 🎹 🎻 🎻 👾 👾 🎮 🎮 🃏 🃏 🎴 🎴 🎲 🎲 🎯 🎯 🀄 🀄 🎬 🎬 📝 📝 ✏ ✏ 📖 📖 🎨 🎨 🎤 🎤 🎧 🎧 🎺 🎺 🎷 🎷 🎸 🎸 👞 👞 👡 👡 👠 👠 💄 💄 👢 👢 👕 👕 👕 👕 👔 👔 👚 👚 👗 👗 🎽 🎽 👖 👖 👘 👘 👙 👙 🎀 🎀 🎩 🎩 👑 👑 👒 👒 👞 👞 🌂 🌂 💼 💼 👜 👜 👝 👝 👛 👛 👓 👓 🎣 🎣 ☕ ☕ 🍵 🍵 🍶 🍶 🍼 🍼 🍺 🍺 🍻 🍻 🍸 🍸 🍹 🍹 🍷 🍷 🍴 🍴 🍕 🍕 🍔 🍔 🍟 🍟 🍗 🍗 🍖 🍖 🍝 🍝 🍛 🍛 🍤 🍤 🍱 🍱 🍣 🍣 🍥 🍥 🍙 🍙 🍘 🍘 🍚 🍚 🍜 🍜 🍲 🍲 🍢 🍢 🍡 🍡 🥚 🥚 🍞 🍞 🍩 🍩 🍮 🍮 🍦 🍦 🍨 🍨 🍧 🍧 🎂 🎂 🍰 🍰 🍪 🍪 🍫 🍫 🍬 🍬 🍭 🍭 🍯 🍯 🍎 🍎 🍏 🍏 🍊 🍊 🍋 🍋 🍒 🍒 🍇 🍇 🍉 🍉 🍓 🍓 🍑 🍑 🍈 🍈 🍌 🍌 🍐 🍐 🍍 🍍 🍠 🍠 🍆 🍆 🍅 🍅 🌽 🌽 Places 🏠 🏠 🏡 🏡 🏫 🏫 🏢 🏢 🏣 🏣 🏥 🏥 🏦 🏦 🏪 🏪 🏩 🏩 🏨 🏨 💒 💒 ⛪ ⛪ 🏬 🏬 🏤 🏤 🌇 🌇 🌆 🌆 🏯 🏯 🏰 🏰 ⛺ ⛺ 🏭 🏭 🗼 🗼 🗾 🗾 🗻 🗻 🌄 🌄 🌅 🌅 🌠 🌠 🗽 🗽 🌉 🌉 🎠 🎠 🌈 🌈 🎡 🎡 ⛲ ⛲ 🎢 🎢 🚢 🚢 🚤 🚤 ⛵ ⛵ ⛵ ⛵ 🚣‍♂️ 🚣‍♂️ ⚓ ⚓ 🚀 🚀 ✈️ ✈️ 🚁 🚁 🚂 🚂 🚊 🚊 🚞 🚞 🚲 🚲 🚡 🚡 🚟 🚟 🚠 🚠 🚜 🚜 🚙 🚙 🚘 🚘 🚗 🚗 🚗 🚗 🚕 🚕 🚖 🚖 🚛 🚛 🚌 🚌 🚍 🚍 🚨 🚨 🚓 🚓 🚔 🚔 🚒 🚒 🚑 🚑 🚐 🚐 🚚 🚚 🚋 🚋 🚉 🚉 🚆 🚆 🚅 🚅 🚄 🚄 🚈 🚈 🚝 🚝 🚃 🚃 🚎 🚎 🎫 🎫 ⛽ ⛽ 🚦 🚦 🚥 🚥 ⚠️ ⚠️ 🚧 🚧 🔰 🔰 🏧 🏧 🎰 🎰 🚏 🚏 💈 💈 ♨️ ♨️ 🏁 🏁 🎌 🎌 🏮 🏮 🗿 🗿 🎪 🎪 🎭 🎭 📍 📍 🚩 🚩 🇯🇵 🇯🇵 🇰🇷 🇰🇷 🇨🇳 🇨🇳 🇺🇸 🇺🇸 🇫🇷 🇫🇷 🇪🇸 🇪🇸 🇮🇹 🇮🇹 🇷🇺 🇷🇺 🇬🇧 🇬🇧 🇬🇧 🇬🇧 🇩🇪 🇩🇪 Symbols 1️⃣ 1️⃣ 2️⃣ 2️⃣ 3️⃣ 3️⃣ 4️⃣ 4️⃣ 5️⃣ 5️⃣ 6️⃣ 6️⃣ 7️⃣ 7️⃣ 8️⃣ 8️⃣ 9️⃣ 9️⃣ 🔟 🔟 🔢 🔢 0️⃣ 0️⃣ #️⃣ #️⃣ 🔣 🔣 ◀️ ◀️ ⬇️ ⬇️ ▶️ ▶️ ⬅️ ⬅️ 🔠 🔠 🔡 🔡 🔤 🔤 ↙️ ↙️ ↘️ ↘️ ➡️ ➡️ ⬆️ ⬆️ ↖️ ↖️ ↗️ ↗️ ⏬ ⏬ ⏫ ⏫ 🔽 🔽 ⤵️ ⤵️ ⤴️ ⤴️ ↩️ ↩️ ↪️ ↪️ ↔️ ↔️ ↕️ ↕️ 🔼 🔼 🔃 🔃 🔄 🔄 ⏪ ⏪ ⏩ ⏩ ℹ️ ℹ️ 🆗 🆗 🔀 🔀 🔁 🔁 🔂 🔂 🆕 🆕 🔝 🔝 🆙 🆙 🆒 🆒 🆓 🆓 🆖 🆖 🎦 🎦 🈁 🈁 📶 📶 🈹 🈹 🈴 🈴 🈺 🈺 🈯 🈯 🈷️ 🈷️ 🈶 🈶 🈵 🈵 🈚 🈚 🈸 🈸 🈳 🈳 🈲 🈲 🈂️ 🈂️ 🚻 🚻 🚹 🚹 🚺 🚺 🚼 🚼 🚭 🚭 🅿️ 🅿️ ♿ ♿ 🚇 🚇 🛄 🛄 🉑 🉑 🚾 🚾 🚰 🚰 🚮 🚮 ㊙️ ㊙️ ㊗️ ㊗️ ⓜ️ ⓜ️ 🛂 🛂 🛅 🛅 🛃 🛃 🉐 🉐 🆑 🆑 🆘 🆘 🆔 🆔 🚫 🚫 🔞 🔞 📵 📵 🚯 🚯 🚱 🚱 🚳 🚳 🚷 🚷 🚸 🚸 ⛔ ⛔ ✳️ ✳️ ✴️ ✴️ 💟 💟 🆚 🆚 📳 📳 📴 📴 💹 💹 💱 💱 ♈ ♈ ♉ ♉ ♊ ♊ ♋ ♋ ♌ ♌ ♍ ♍ ♎ ♎ ♏ ♏ ♐ ♐ ♑ ♑ ♒ ♒ ♓ ♓ ⛎ ⛎ 🔯 🔯 ❎ ❎ 🅰️ 🅰️ 🅱️ 🅱️ 🆎 🆎 🅾️ 🅾️ 💠 💠 ♻️ ♻️ 🔚 🔚 🔛 🔛 🔜 🔜 🕐 🕐 🕜 🕜 🕙 🕙 🕥 🕥 🕚 🕚 🕦 🕦 🕛 🕛 🕧 🕧 🕑 🕑 🕝 🕝 🕒 🕒 🕞 🕞 🕓 🕓 🕟 🕟 🕔 🕔 🕠 🕠 🕕 🕕 🕡 🕡 🕖 🕖 🕢 🕢 🕗 🕗 🕣 🕣 🕘 🕘 🕤 🕤 💲 💲 ©️ ©️ ®️ ®️ ™️ ™️ ❌ ❌ ❗ ❗ ‼️ ‼️ ⁉️ ⁉️ ⭕ ⭕ ✖️ ✖️ ➕ ➕ ➖ ➖ ➗ ➗ 💮 💮 💯 💯 ✔️ ✔️ ☑️ ☑️ ","date":"2022-08-17","objectID":"/markdown/:12:0","tags":["markdown"],"title":"Markdown需要掌握的基础","uri":"/markdown/"},{"categories":["devtools"],"content":"学习资源扩展 GitHub风格的Markdown规范:https://gfm.docschina.org/zh-hans/ 主页地址:https://cfanzp.com ↩︎ ","date":"2022-08-17","objectID":"/markdown/:13:0","tags":["markdown"],"title":"Markdown需要掌握的基础","uri":"/markdown/"},{"categories":["devtools"],"content":"弱网测试环境的搭建 最近有一个线上项目反馈在弱网环境下，容易掉线。我们自己测试的时候网络环境都还比较好，想模拟一下弱网环境，这里介绍一下几个方案。 ","date":"2022-08-12","objectID":"/weak-net/:0:0","tags":["devtools"],"title":"弱网测试环境的搭建","uri":"/weak-net/"},{"categories":["devtools"],"content":"路由器限速 路由器可以直接对某个设备进行限速，这个登录路由器就可以配置了，方法比较简单，这里就不赘述了。 ","date":"2022-08-12","objectID":"/weak-net/:1:0","tags":["devtools"],"title":"弱网测试环境的搭建","uri":"/weak-net/"},{"categories":["devtools"],"content":"chrome开发者工具 chrome开发者工具自带网络限速功能，可以限制速度,可以自定义各种网络带宽，使用比较方便。 ","date":"2022-08-12","objectID":"/weak-net/:2:0","tags":["devtools"],"title":"弱网测试环境的搭建","uri":"/weak-net/"},{"categories":["devtools"],"content":"使用Charles设置代理限速 这种方法配置起来相比前面2种情况，稍微麻烦一些,另外有一个缺点，websockt限速好像没办法设置(Charles 4.6.2)。 ","date":"2022-08-12","objectID":"/weak-net/:3:0","tags":["devtools"],"title":"弱网测试环境的搭建","uri":"/weak-net/"},{"categories":["lua"],"content":"lua中的self ","date":"2022-08-09","objectID":"/lua-self/:0:0","tags":["lua"],"title":"lua中的self","uri":"/lua-self/"},{"categories":["lua"],"content":"self的用法 使用:定义的函数默认接收第一个参数是self 使用:调用函数默认传入第一个参数是调用者 使用.定义和调用函数不会接受或传入self :为我们省下了一个参数，下面例子中的A:Add()与A.Add(t)是等价的 local A = {x = 1, y = 2} function t:Add() return (self.x + self.y) end print(A:Add()) print(A.Add(A)) ","date":"2022-08-09","objectID":"/lua-self/:1:0","tags":["lua"],"title":"lua中的self","uri":"/lua-self/"},{"categories":[],"content":"git tag排序,解决默认看到的最后一个不是最新的tag的问题 ","date":"2022-08-09","objectID":"/git-tag-sort/:0:0","tags":[],"title":"git tag排序,解决默认看到的最后一个不是最新的tag的问题","uri":"/git-tag-sort/"},{"categories":[],"content":"git tag的问题 在使用git tag查看标签的时候，默认是按tag的字符串排序的，只有命名的顺序与字符串排序相同的时候,显示在最后的tag才是最新的,例如,有下面几个标签: v0.9.0 v0.10.0 v0.10.0按字符串排序会默认显示在上面: v0.10.0 v0.9.0 ","date":"2022-08-09","objectID":"/git-tag-sort/:1:0","tags":[],"title":"git tag排序,解决默认看到的最后一个不是最新的tag的问题","uri":"/git-tag-sort/"},{"categories":[],"content":"git tag加上排序 让git按照打标签的时间进行排序，加上参数–sort=taggerdate git tag -n --sort=taggerdate 为了方便平时输入在.gitconfig上加上缩写 [alias] stag = tag -n --sort=taggerdate git tag -n --sort=taggerdate ","date":"2022-08-09","objectID":"/git-tag-sort/:2:0","tags":[],"title":"git tag排序,解决默认看到的最后一个不是最新的tag的问题","uri":"/git-tag-sort/"},{"categories":["tools"],"content":"hugo学习笔记 ","date":"2022-08-08","objectID":"/hugo-note/:0:0","tags":["hugo"],"title":"Hugo学习笔记","uri":"/hugo-note/"},{"categories":["tools"],"content":"hugo 下载 linux,ubuntu wget https://github.com/gohugoio/hugo/releases/download/v0.101.0/hugo_0.101.0_Linux-64bit.tar.gz 扩展版本 wget https://github.com/gohugoio/hugo/releases/download/v0.101.0/hugo_extended_0.101.0_Linux-64bit.tar.gz macos wget https://github.com/gohugoio/hugo/releases/download/v0.101.0/hugo_0.101.0_macOS-64bit.tar.gz 如果是需要使用custom.scss配置需要使用扩展版本: wget https://github.com/gohugoio/hugo/releases/download/v0.101.0/hugo_extended_0.101.0_macOS-64bit.tar.gz m1 https://github.com/gohugoio/hugo/releases/download/v0.111.3/hugo_extended_0.111.3_darwin-universal.tar.gz ","date":"2022-08-08","objectID":"/hugo-note/:1:0","tags":["hugo"],"title":"Hugo学习笔记","uri":"/hugo-note/"},{"categories":["tools"],"content":"hugo集成搜索 hugo在集成搜索的时候还是有多种方案的，LoveIt默认的方案个人不太喜欢。这里个人测试了hugo-search-fuse-js的方案和gcse的方案，目前在使用的是hugo-search-fuse-js的方案。 注意 hugo-search-fuse-js 在配置搜索时，默认显示有点不正常,需要添加一点自定义的css样式到_custom.scss中。 这里的hugo需要安装扩展版本的。 hugo集成hugo-search-fuse-js hugo-search-fuse-js:https://github.com/kaushalmodi/hugo-search-fuse-js 添加站内搜索(gcse) mac m1 hugo-search-fuse-js报错 Error: Error building site: failed to render pages: render of \"page\" failed: \"/linux_dev_blog/themes/hugo-search-fuse-js/layouts/_default/search.html:124:66\": execute of template failed: template: _default/search.html:124:66: executing \"footer\" at \u003cfingerprint\u003e: error calling fingerprint: \u003cnil\u003e can not be transformed ","date":"2022-08-08","objectID":"/hugo-note/:1:1","tags":["hugo"],"title":"Hugo学习笔记","uri":"/hugo-note/"},{"categories":["tools"],"content":"默认启动端口 1313 ","date":"2022-08-08","objectID":"/hugo-note/:1:2","tags":["hugo"],"title":"Hugo学习笔记","uri":"/hugo-note/"},{"categories":["tools"],"content":"hugo推荐主题LoveIt LoveIt ","date":"2022-08-08","objectID":"/hugo-note/:1:3","tags":["hugo"],"title":"Hugo学习笔记","uri":"/hugo-note/"},{"categories":["tools"],"content":"LoveIt主题使用demo网站 https://hugoloveit.com/ https://dillonzq.com/ https://lewky.cn/ https://cfanzp.com https://i.scwy.net/ https://kevin-shi.gitee.io/ ","date":"2022-08-08","objectID":"/hugo-note/:1:4","tags":["hugo"],"title":"Hugo学习笔记","uri":"/hugo-note/"},{"categories":["devtools"],"content":"tmux常用快捷键 ","date":"2022-08-08","objectID":"/tmux-shortcut-key/:0:0","tags":["tmux","快捷键","terminal"],"title":"tmux常用快捷键","uri":"/tmux-shortcut-key/"},{"categories":["devtools"],"content":"注意 c-a:表示ctrl+a,我这里修改了默认的ctrl+b为ctrl+a ","date":"2022-08-08","objectID":"/tmux-shortcut-key/:1:0","tags":["tmux","快捷键","terminal"],"title":"tmux常用快捷键","uri":"/tmux-shortcut-key/"},{"categories":["devtools"],"content":"常用快捷键 c-a +z:在全屏和窗口之间切换 c-a +c:创建一个新的窗口 c-a+%:竖直创建一个新的pannel c-a+,:水平创建一个新的pannel c-a+(h,j,kl):在各个pannel间切换，需要在.tmux.conf配置文件中配置 c-a+[:进入复制模式，q:退出复制模式 c-a+w:查看所有窗口列表 c-a+$:重命名当前的session ","date":"2022-08-08","objectID":"/tmux-shortcut-key/:2:0","tags":["tmux","快捷键","terminal"],"title":"tmux常用快捷键","uri":"/tmux-shortcut-key/"},{"categories":["mac"],"content":"mac快捷键汇总 ","date":"2022-08-08","objectID":"/mac-shortcut-key/:0:0","tags":["mac","快捷键"],"title":"mac快捷键汇总","uri":"/mac-shortcut-key/"},{"categories":["mac"],"content":"注意 这里Win键对应mac键盘的Command键 ","date":"2022-08-08","objectID":"/mac-shortcut-key/:1:0","tags":["mac","快捷键"],"title":"mac快捷键汇总","uri":"/mac-shortcut-key/"},{"categories":["mac"],"content":"常用快捷键 command + backspace: 删除文件 选中文件+enter: 重命名文件 ","date":"2022-08-08","objectID":"/mac-shortcut-key/:2:0","tags":["mac","快捷键"],"title":"mac快捷键汇总","uri":"/mac-shortcut-key/"},{"categories":["mac"],"content":"打开搜索 win/command+space：打开搜索 ","date":"2022-08-08","objectID":"/mac-shortcut-key/:2:1","tags":["mac","快捷键"],"title":"mac快捷键汇总","uri":"/mac-shortcut-key/"},{"categories":["mac"],"content":"切换应用 win/command+tab:切换应用 ","date":"2022-08-08","objectID":"/mac-shortcut-key/:2:2","tags":["mac","快捷键"],"title":"mac快捷键汇总","uri":"/mac-shortcut-key/"},{"categories":["mac"],"content":"刷新chrome网页 win+r:刷新chrome网页 ","date":"2022-08-08","objectID":"/mac-shortcut-key/:2:3","tags":["mac","快捷键"],"title":"mac快捷键汇总","uri":"/mac-shortcut-key/"},{"categories":["mac"],"content":"terminal 新建一个terminal command+N:新建一个terminal 多个terminal之间切换 command+`:在多个terminal之间切换 这个时非常实用的，但是每次想用的时候都不记得快捷键了，相当尴尬。。。 ","date":"2022-08-08","objectID":"/mac-shortcut-key/:2:4","tags":["mac","快捷键"],"title":"mac快捷键汇总","uri":"/mac-shortcut-key/"},{"categories":["mac"],"content":"切换输入法 ctrl+space:切换输入法 ","date":"2022-08-08","objectID":"/mac-shortcut-key/:2:5","tags":["mac","快捷键"],"title":"mac快捷键汇总","uri":"/mac-shortcut-key/"},{"categories":["mac"],"content":"在全屏和窗口模式间相互切换 ctrl+command+F:在全屏和窗口模式间相互切换 mac要进入窗口最大化的方式就是双击标题栏，而没有键盘快捷键，这个有点不太友好。 取而代之的时mac推荐用command + control + F进入全屏模式专注于当前的工作 ","date":"2022-08-08","objectID":"/mac-shortcut-key/:2:6","tags":["mac","快捷键"],"title":"mac快捷键汇总","uri":"/mac-shortcut-key/"},{"categories":["devtools"],"content":"http测试工具 ","date":"2022-08-08","objectID":"/http-req/:0:0","tags":["devtools"],"title":"http测试工具","uri":"/http-req/"},{"categories":["devtools"],"content":"curl 官网:https://curl.se/ ","date":"2022-08-08","objectID":"/http-req/:1:0","tags":["devtools"],"title":"http测试工具","uri":"/http-req/"},{"categories":["devtools"],"content":"Postman 官网:https://www.postman.com/ ","date":"2022-08-08","objectID":"/http-req/:2:0","tags":["devtools"],"title":"http测试工具","uri":"/http-req/"},{"categories":["devtools"],"content":"Apifox 官网:https://www.apifox.cn/ ","date":"2022-08-08","objectID":"/http-req/:3:0","tags":["devtools"],"title":"http测试工具","uri":"/http-req/"},{"categories":["devtools"],"content":"VSCode插件Thunder Client 用法:https://github.com/rangav/thunder-client-support#usage ","date":"2022-08-08","objectID":"/http-req/:4:0","tags":["devtools"],"title":"http测试工具","uri":"/http-req/"},{"categories":["devtools"],"content":"常用的http请求分析工具 charles(收费) fiddler(windows免费) ","date":"2022-08-08","objectID":"/http-proxy-package/:0:0","tags":["devtools","http"],"title":"常用的http请求分析工具","uri":"/http-proxy-package/"},{"categories":["lua","language"],"content":"lua面向对象编程 对象定义: local logger = require \"common.logger\" local date = require \"common.date\" local uuid = require \"uuid\" uuid.seed() -- 初始化uuid种子 local Tracer = { tid = \"\", uid = 0, msgid = 0, start_time = 0, end_time = 0 } local function get_new_id() local tmp_uuid = uuid() local new_uuid = string.gsub(tmp_uuid,\"-\",\"\") return new_uuid end local function get_traceid(a_uid,a_msgid,start_time) local uid = a_uid if a_uid == nil then uid = \"\" end local msgid = a_msgid if a_msgid == nil then msgid = \"\" end local id = get_new_id() local tid = \"utid_\" .. tostring(uid) .. \"_\" ..msgid .. \"_\".. id tid = tid .. \"_\" .. tostring(start_time) return tid,start_time end function Tracer:new(a_uid,a_msgid) local o = {} self.__index = self setmetatable(o,self) o.uid = a_uid o.msgid = a_msgid o.start_time = date.skynet_time() local tid = get_gate_traceid(a_uid,a_msgid,o.start_time) o.tid = tid return o end function Tracer:get_tid() return self.tid end local function check_time(tid,start_time,end_time,...) local diff_time = math.floor(end_time - start_time) if diff_time \u003e ERROR_TIME then local str_time = string.format(\"\\x1b[31mERROR NEED UPDATE-%dms\\x1b[0m\", diff_time) ELOG(string.format(\"[%s][%s]\", tid, str_time ),...) elseif diff_time \u003e WARN_TIME then local str_time = string.format(\"\\x1b[33mTOO SLOW-%dms\\x1b[0m\", diff_time) WLOG(string.format(\"[%s][%s]\", tid, str_time ),...) elseif diff_time \u003e DEBUG_TIME then local str_time = string.format(\"\\x1b[34mSLOW-%dms\\x1b[0m\", diff_time) WLOG(string.format(\"[%s][%s]\", tid, str_time),...) else local str_time = string.format(\"\\x1b[32mFAST-%dms\\x1b[0m\", diff_time) NLOG(string.format(\"[%s][%s]\", tid, str_time),...) end end function Tracer:trace_ret(end_time,...) self.end_time = end_time --ELOG(\"self.start_time:\",self.start_time) check_time(self.tid,self.start_time,end_time,...) end return Tracer 使用举例: local Tracer = require \"common.tracer\" local cur_tracer = Tracer:new(msg.uid,msgid) local tid = cur_tracer:get_tid() DLOG(tid,\"req:\",msgid,utils.dump(body_req)) local ret = msg_helper.calllobby_byhttpgate(msg,tid) --WLOG(tid,\"calllobby_byhttpgate_ret:\",msgid,utils.dump(ret)) cur_tracer:trace_ret(date.skynet_time(),\"calllobby_byhttpgate_ret\",msgid,utils.dump(ret)) 我们可以用.来访问属性: local tid = cur_tracer.tid local uid = cur_tracer.uid ","date":"2022-08-08","objectID":"/lua-new/:1:0","tags":["lua"],"title":"lua面向对象编程","uri":"/lua-new/"},{"categories":["lua","language"],"content":"参考链接: lua面向对象 ","date":"2022-08-08","objectID":"/lua-new/:2:0","tags":["lua"],"title":"lua面向对象编程","uri":"/lua-new/"},{"categories":["vim"],"content":"vim-surround插件用法 ","date":"2022-08-05","objectID":"/vim-surround/:0:0","tags":["vim"],"title":"vim-surround插件用法","uri":"/vim-surround/"},{"categories":["vim"],"content":"vim-surround插件有什么用？ vim-surround插件能够帮助我们方便地处理代码中成对的符号，包括: 成对增加符号 成对修改符号 成对删除符号 ","date":"2022-08-05","objectID":"/vim-surround/:1:0","tags":["vim"],"title":"vim-surround插件用法","uri":"/vim-surround/"},{"categories":["vim"],"content":"使用plug插件管理器安装方法 在.vimrc中加入如下配置: Plug 'tpope/vim-surround' ","date":"2022-08-05","objectID":"/vim-surround/:2:0","tags":["vim"],"title":"vim-surround插件用法","uri":"/vim-surround/"},{"categories":["vim"],"content":"如何使用vim-surround? ","date":"2022-08-05","objectID":"/vim-surround/:3:0","tags":["vim"],"title":"vim-surround插件用法","uri":"/vim-surround/"},{"categories":["vim"],"content":"普通模式使用vim-surround-添加成对符号 普通模式在单词2边加上双引号: ysiw\" 普通模式在整行加上双引号: yss\" ","date":"2022-08-05","objectID":"/vim-surround/:3:1","tags":["vim"],"title":"vim-surround插件用法","uri":"/vim-surround/"},{"categories":["vim"],"content":"普通模式使用vim-surround-修改成对符号 普通模式在单词2边加上双引号改为单引号: cs\"' ","date":"2022-08-05","objectID":"/vim-surround/:3:2","tags":["vim"],"title":"vim-surround插件用法","uri":"/vim-surround/"},{"categories":["vim"],"content":"普通模式使用vim-surround-删除成对符号 普通模式删除单词2边双引号: ds\" ","date":"2022-08-05","objectID":"/vim-surround/:3:3","tags":["vim"],"title":"vim-surround插件用法","uri":"/vim-surround/"},{"categories":["vim"],"content":"参考链接 https://github.com/tpope/vim-surround https://zhuanlan.zhihu.com/p/158604935/ ","date":"2022-08-05","objectID":"/vim-surround/:4:0","tags":["vim"],"title":"vim-surround插件用法","uri":"/vim-surround/"},{"categories":["vim"],"content":"总结 上面列举的是个人觉得比较实用的几种用法，更多用法可以参考一下上面的参考链接。 ","date":"2022-08-05","objectID":"/vim-surround/:5:0","tags":["vim"],"title":"vim-surround插件用法","uri":"/vim-surround/"},{"categories":["nginx"],"content":"nginx如何检查配置文件是否正确？ nginx如何检查配置文件是否正确？当然是靠自己了，只有自己才知道自己想用nginx干啥，当然你还可叫上你的同事、朋友帮你看看配置是否有错。nginx其实可以帮助你检查一些基础的语法错误。命令很简单: nginx -t -c /etc/nginx/nginx.conf ","date":"2022-08-05","objectID":"/nginx-config-check/:0:0","tags":["nginx"],"title":"nginx如何检查配置文件是否正确？","uri":"/nginx-config-check/"},{"categories":["nginx"],"content":"有些情况线上需要修改配置文件怎么办？ 保险的做法是: 先检查一下配置文件 nginx -t 然后热加载配置 nginx -s reload 最后去检查一下业务是否能够正常访问 ","date":"2022-08-05","objectID":"/nginx-config-check/:1:0","tags":["nginx"],"title":"nginx如何检查配置文件是否正确？","uri":"/nginx-config-check/"},{"categories":["linux","devtools"],"content":"ranger如何配置预览图片？ ranger的配置文件在目录~/.config/ranger/rc.conf中，配置预览只需要在配置文件中加入2项配置即可: set preview_images true set preview_images_method w3m ","date":"2022-08-05","objectID":"/ranger-config/:0:0","tags":["linux","ranger"],"title":"ranger如何配置预览图片？","uri":"/ranger-config/"},{"categories":["linux","devtools"],"content":"更多 其它ranger的使用技巧可以参考这篇文件: https://zhuanlan.zhihu.com/p/476289339 ","date":"2022-08-05","objectID":"/ranger-config/:1:0","tags":["linux","ranger"],"title":"ranger如何配置预览图片？","uri":"/ranger-config/"},{"categories":["git"],"content":"git配置文件","date":"2022-08-03","objectID":"/config-git/","tags":["git","config"],"title":"git配置文件.gitconfig","uri":"/config-git/"},{"categories":["git"],"content":"git配置文件.gitconfig .gitconfig 配置 [alias] co = checkout ci = commit st = status sh = stash sa = stash apply sp = stash pop ap = add -p br = branch cp = checkout -p cv = commit -v dc = diff --cached d = difftool pr = pull --rebase ps = push l = log --graph --pretty=format:'%C(yellow)%h%Creset %C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)\u003c%an\u003e%Creset' --abbrev-commit --date=short --all lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)\u003c%an\u003e%Creset' --abbrev-commit --all lgfile = log --name-status --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)\u003c%an\u003e%Creset' --abbrev-commit --all [user] email = cfanzp@qq.com name = mac_zp [diff] tool = vimdiff [difftool] prompt = false [color] status = auto diff = auto branch = auto interactive = auto [core] editor = vim whitespace = cr-at-eol autocrlf = input ","date":"2022-08-03","objectID":"/config-git/:0:0","tags":["git","config"],"title":"git配置文件.gitconfig","uri":"/config-git/"},{"categories":["vim"],"content":"vimrc配置文件.vimrc 下面是我的vim配置，这里记录一下 \"set term=screen set ruler set laststatus=2 \" make the last line where the status is two lines deep so you can see status always set backspace=indent,eol,start \" make that backspace key work the way it should set nocompatible \" vi compatible is LAME set showmode \" show the current mode syntax on \" turn syntax highlighting on by default \"set fdm=indent \" \"\"行号{ set nu! \"set relativenumber \"} \" \"set guifont=h12 set hls \"set background=dark set t_Co=256 \"设置配色方案{ left g:molokai_original = 1 let g:rehash256 = 1 \"desert \"colorscheme solarized molokai github lucius desert \"} \" markdown theme \"let g:detorte_theme_mode = 'dark' \"tab{ set tabstop=2 set expandtab \"\"} filetype off call plug#begin('~/.vim/plugged') Plug 'git://github.com/tomasr/molokai.git' Plug 'preservim/nerdtree' \"jPlug 'preservim/nerdtree' | \" \\ Plug 'xuyuanp/nerdtree-git-plugin' | \" \\ Plug 'ryanoasis/vim-devicons' Plug 'tiagofumo/vim-nerdtree-syntax-highlight' Plug 'vim-airline/vim-airline' Plug 'vim-airline/vim-airline-themes' Plug 'michaelHL/awesome-vim-colorschemes' Plug 'majutsushi/tagbar' Plug 'godlygeek/tabular' Plug 'ctrlpvim/ctrlp.vim' \"Plug 'ack.vim' \"Plug 'vim-scripts/luainspect.vim' \"Plug 'xolox/vim-misc' \"Plug 'xolox/vim-lua-ftplugin' Plug 'Shougo/neocomplcache' Plug 'nathanaelkane/vim-indent-guides' Plug 'Yggdroot/indentLine' Plug 'airblade/vim-gitgutter' Plug 'gregsexton/gitv' \"Plug 'tpope/vim-fugitive' Plug 'git://github.com/rking/ag.vim.git' \" Multiple Plug commands can be written in a single line using | separators \"Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets' Plug 'tpope/vim-surround' Plug 'scrooloose/syntastic' Plug 'Chiel92/vim-autoformat' Plug 'tpope/vim-commentary' Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } \"Plug '/usr/bin/fzf' Plug 'junegunn/fzf.vim' \"Plug 'Yggdroot/LeaderF', { 'do': './install.sh' } Plug 'mg979/vim-visual-multi' \"Plug 'voldikss/vim-browser-search' Plug 'kien/rainbow_parentheses.vim' Plug 'uarun/vim-protobuf' \"Plug 'tpope/vim-abolish' \"Plug 'fatih/vim-go' \"Plug 'w0rp/ale' \"Plug 'tamlok/detorte' \"Plug 'tamlok/vim-markdown' Plug 'iamcco/mathjax-support-for-mkdp' Plug 'iamcco/markdown-preview.vim' \"Plug 'neoclide/coc.nvim', {'branch': 'release'} \" Initialize plugin system call plug#end() colorscheme molokai \"neon evening molokai solarized molokai github lucius filetype plugin indent on \" required \"set runtimepath^=~/.vim/bundle/ag set runtimepath^=~/.vim/plugged/ag \"path{ set path=./,../, \"set path=./,/usr/include,,..,../lualib, \"} \" vim-indent-guides { \"let g:indent_guides_enable_on_vim_startup = 1 \"添加行，vim启动时启用 \"let g:indent_guides_start_level = 1 \"添加行，开始显示对齐线的缩进级别 \"let g:indent_guides_guide_size = 1 \"添加行，对齐线的宽度，（1字符） \"let g:indent_guides_tab_guides = 0 \"添加行，对tab对齐的禁用 \"} \" \"indentLine{ \"let g:indentLine_char='|' let g:indentLine_char='|' let g:indentLine_enabled = 1 \"} \"ctrlp{ let g:ctrlp_cmd = 'CtrlP' let g:ctrlp_map = '\u003cc-p\u003e' set wildignore+=*.o,*.exe,*.git,*.pdb,*.bak,*.so,*.a let g:ctrlp_by_filename = 1 \" only lookup file name let g:ctrlp_max_height = 15 let g:ctrlp_clear_cache_on_exit = 0 let g:ctrlp_cache_dir = $HOME.'/.ctrlp/cache/' let g:ctrlp_working_path_mode = 'rw' let g:ctrlp_custom_ignore = { \\ 'dir': '\\v[\\/]\\.(git|hg|svn)$', \\ 'file': '\\v\\.(exe|so|dll|bak|gds|lib|suo|exp)$', \\ 'link': 'SOME_BAD_SYMBOLIC_LINKS', \\ } \"} \"调用ag进行搜索提升速度，同时不使用缓存文件 if executable('ag') set grepprg=ag\\ --nogroup\\ --nocolor let g:ctrlp_user_command = 'ag %s -l --nocolor -g \"\"' let g:ctrlp_use_caching = 0 endif \"ctags{ set tags=tags; \"set autochdir nnoremap \u003csilent\u003e \u003cF12\u003e :A\u003cCR\u003e \":set grepprg=grep\\ -nri \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \" Tag list (ctags) \" \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" let Tlist_Ctags_Cmd = '/usr/bin/ctags' \"Tagbar let g:tagbar_ctags_bin = '/usr/bin/ctags' let Tlist_Show_One_File = 1 \"不同时显示多个文件的tag，只显示当前文件的 \"let Tlist_Exit_OnlyWindow = 1 \"如果taglist窗口是最后一个窗口，则退出vim let Tlist_Use_Right_Window = 1 \"在右侧窗口中显示taglist窗口 let Tlist_File_Fold_Auto_Close=1 \"让不被编辑的文件的方法列表自动折叠起来","date":"2022-08-03","objectID":"/config-vimrc/:0:0","tags":["vim","config"],"title":"vim配置文件.vimrc","uri":"/config-vimrc/"},{"categories":["redis"],"content":"redis基础入门 ","date":"2022-08-03","objectID":"/redis/:0:0","tags":["redis"],"title":"redis基础入门","uri":"/redis/"},{"categories":["redis"],"content":"redis是什么? Redis 是一个高性能的 key-value 数据库。 Redis 是完全开源的，遵守 BSD 协议。 Redis支持数据的持久化，即写入文件保存。 Redis 支持简单的key-value类型的数据，提供list，set，zset，hash等数据结构的存储。 Redis 支持数据的备份，即master-slave模式的数据备份。 ","date":"2022-08-03","objectID":"/redis/:1:0","tags":["redis"],"title":"redis基础入门","uri":"/redis/"},{"categories":["redis"],"content":"如何下载？ 例如:下载版本5.0.4 wget http://download.redis.io/releases/redis-5.0.4.tar.gz 其它版本下载，访问下面地址获取: http://download.redis.io/releases/ ","date":"2022-08-03","objectID":"/redis/:2:0","tags":["redis"],"title":"redis基础入门","uri":"/redis/"},{"categories":["redis"],"content":"redis相关资源地址有哪些？ 官网:https://redis.io/ 官方文档:https://redis.io/documentation 中文官方网站:http://redis.cn/ github地址:https://github.com/redis/redis ","date":"2022-08-03","objectID":"/redis/:3:0","tags":["redis"],"title":"redis基础入门","uri":"/redis/"},{"categories":["redis"],"content":"如何安装？ tar -xzvf redis-5.0.4.tar.gz cd redis-5.0.4 make \u0026\u0026 make test \u0026\u0026 make install ","date":"2022-08-03","objectID":"/redis/:4:0","tags":["redis"],"title":"redis基础入门","uri":"/redis/"},{"categories":["redis"],"content":"如何配置开机启动？ [root@dev127 redis-5.0.4]# cd utils/ [root@dev127 utils]# ls build-static-symbols.tcl corrupt_rdb.c generate-command-help.rb hashtable install_server.sh redis-copy.rb redis_init_script.tpl releasetools whatisdoing.sh cluster_fail_time.tcl create-cluster graphs hyperloglog lru redis_init_script redis-sha1.rb speed-regression.tcl [root@dev127 utils]# ./install_server.sh Welcome to the redis service installer This script will help you easily set up a running redis server Please select the redis port for this instance: [6379] 8001 Please select the redis config file name [/etc/redis/8001.conf] Selected default - /etc/redis/8001.conf Please select the redis log file name [/var/log/redis_8001.log] Selected default - /var/log/redis_8001.log Please select the data directory for this instance [/var/lib/redis/8001] Selected default - /var/lib/redis/8001 Please select the redis executable path [/usr/local/bin/redis-server] Selected config: Port : 8001 Config file : /etc/redis/8001.conf Log file : /var/log/redis_8001.log Data dir : /var/lib/redis/8001 Executable : /usr/local/bin/redis-server Cli Executable : /usr/local/bin/redis-cli Is this ok? Then press ENTER to go on or Ctrl-C to abort. Copied /tmp/8001.conf =\u003e /etc/init.d/redis_8001 Installing service... Successfully added to chkconfig! Successfully added to runlevels 345! Starting Redis server... Installation successful! [root@dev127 utils]# chkconfig Note: This output shows SysV services only and does not include native systemd services. SysV configuration data might be overridden by native systemd configuration. If you want to list systemd services use 'systemctl list-unit-files'. To see services enabled on particular target use 'systemctl list-dependencies [target]'. jenkins 0:off 1:off 2:off 3:on 4:off 5:on 6:off netconsole 0:off 1:off 2:off 3:off 4:off 5:off 6:off network 0:off 1:off 2:on 3:on 4:on 5:on 6:off redis_8001 0:off 1:off 2:on 3:on 4:on 5:on 6:off [root@dev127 utils]# 修改配置文件/etc/redis/8001.conf #把daemonize no改成daemonize yes daemonize yes 启动 service redis_8001 start 关闭 service redis_8001 stop 成功配置目录 Selected config: Port : 8001 Config file : /etc/redis/8001.conf Log file : /var/log/redis_8001.log Data dir : /var/lib/redis/8001 Executable : /usr/local/bin/redis-server Cli Executable : /usr/local/bin/redis-cli ","date":"2022-08-03","objectID":"/redis/:5:0","tags":["redis"],"title":"redis基础入门","uri":"/redis/"},{"categories":["redis"],"content":"常用配置 参数 作用 daemonize no 默认不以守护进程的方式运行，yes：启用守护进程 pidfile /var/run/redis_8001.pid redis pid写入的对应文件 port 8001 指定端口 8001 bind 127.0.0.1 绑定主机地址 timeout 300 客户端闲置读少秒后关闭连接，设置为0则关闭该功能 loglevel notice 日志级别,可选值:debug,verbose,notice,warning logfile /var/log/redis_8001.log 日志文件目录 databases 16 数据库数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库 save 900 1 900秒内有1次更新就写入文件，可以多个条件配合 rdbcompression yes 数据本地存储是否压缩数据库，yes文件小,消耗cpu，no文件大 dbfilename dump.rdb 指定数据库名为dump.rdb dir /var/lib/redis/8001 指定数据库目录 requirepass foobared123456 redis密码 maxclients 10000 同一时间redis最大客户端连接个数 maxmemory 同一时间最大客户端连接数，默认无限制，同时打开的客户端连接数为 Redis 进程可以打开的最大文件描述符数，设置0，表示不限制。连接数到达限制时，Redis 会关闭新的连接并向客户端返回 max number of clients reached appendonly no 是否在每次更新操作后记录日志，默认情况下是异步的把数据写入磁盘，不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis 本身同步数据文件是按上面 save 条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为 no。 appendfilename “appendonly.aof” 指定更新日志文件名 appendfsync everysec 更新日志条件:always,everysec,no vm-enabled no 是否启用vm机制 vm-swap-file /tmp/redis.swap 虚拟内存文件路径 vm-pages 134217728 swap 文件page数 vm-max-threads 4 访问额swap文件线程数 glueoutputbuf yes 给客户端发包，是否将较小的包合并为一个包发送 activerehashing yes 是否激活重置哈希 #include /path/to/local.conf 指定包含其它配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件,没有注释即可。 ","date":"2022-08-03","objectID":"/redis/:6:0","tags":["redis"],"title":"redis基础入门","uri":"/redis/"},{"categories":["redis"],"content":"redis 如何配置开机启动 https://blog.csdn.net/yexiaomodemo/article/details/94626231 ","date":"2022-08-03","objectID":"/redis/:7:0","tags":["redis"],"title":"redis基础入门","uri":"/redis/"},{"categories":["redis"],"content":"参考 https://blog.csdn.net/qq_35949344/article/details/109012039?utm_source=app\u0026app_version=5.0.1\u0026code=app_1562916241\u0026uLinkId=usr1mkqgl919blen https://blog.csdn.net/weixin_33709590/article/details/91849380 https://www.cnblogs.com/Sungeek/p/11691231.html ","date":"2022-08-03","objectID":"/redis/:8:0","tags":["redis"],"title":"redis基础入门","uri":"/redis/"},{"categories":["linux"],"content":"linux查看哪个进程占用了端口? 方法1:使用lsof命令 [root@dev127 paoshang]# lsof -i:8201 COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME skynet 110379 root 6u IPv4 7563011 0t0 TCP localhost:trivnet2 (LISTEN) 方法2:使用netstat命令 [root@dev127 paoshang]# netstat -tunlp | grep 8201 tcp 0 0 127.0.0.1:8201 0.0.0.0:* LISTEN 110379/skynet ","date":"2022-08-03","objectID":"/linux-process-port/:1:0","tags":["linux"],"title":"linux查看哪个进程占用了端口?","uri":"/linux-process-port/"},{"categories":["lua"],"content":"lua第三方开源库学习整理 skynet框架:https://github.com/cloudwu/skynet lua的protobuf工具-pbc:https://github.com/cloudwu/pbc lua-cjson库:https://github.com/mpx/lua-cjson 一个lua写的websocket库https://github.com/flaribbit/love2d-lua-websocket lua-protobuf库https://github.com/starwing/lua-protobuf/blob/master/README.zh.md ","date":"2022-08-03","objectID":"/lua-3rd/:0:0","tags":["lua"],"title":"lua第三方开源库学习整理","uri":"/lua-3rd/"},{"categories":["lua"],"content":"lua中string.pack,string.unpack的用法 lua string.pack的用法,查看lua5.4的官方帮助手册不难找到下面的解释: string.pack (fmt, v1, v2, ···) Returns a binary string containing the values v1, v2, etc. serialized in binary form (packed) according to the format string fmt (see §6.4.2). 最近一个新项目要将brotobuf协议包裹在http协议内进行传输，刚好用到了这个函数,在pb数据包封包后，协议按3部分拼接: 数据包长度(msgid + pb_data) + 协议ID + pb数据包体 封包过程如下: local pb_data = pb_helper.pb_encode(msgname, msg) local buf = string.pack(\"\u003eI4c\" .. #pb_data, msgid, pb_data) local send_buf = string.pack(\"\u003es2\", buf) 解包过程如下: local buf = msg --des_decode(secret, msg) local len = string.unpack(\"\u003eI2\", buf) -- 取长度 local msgid = string.unpack(\"\u003eI4\", buf, 3) -- 取消息号,3是标记buf从哪里开始读 其中的\"\u003e,s2,I2,I4,c..$pb_buf\"含义在手册上也能清楚查到: \u003c: sets little endian \u003e: sets big endian =: sets native endian ![n]: sets maximum alignment to n (default is native alignment) b: a signed byte (char) B: an unsigned byte (char) h: a signed short (native size) H: an unsigned short (native size) l: a signed long (native size) L: an unsigned long (native size) j: a lua_Integer J: a lua_Unsigned T: a size_t (native size) i[n]: a signed int with n bytes (default is native size) I[n]: an unsigned int with n bytes (default is native size) f: a float (native size) d: a double (native size) n: a lua_Number cn: a fixed-sized string with n bytes z: a zero-terminated string s[n]: a string preceded by its length coded as an unsigned integer with n bytes (default is a size_t) x: one byte of padding Xop: an empty item that aligns according to option op (which is otherwise ignored) ' ': (space) ignored ","date":"2022-08-03","objectID":"/lua-string-pack/:0:0","tags":["lua"],"title":"lua中string.pack,string.unpack的用法","uri":"/lua-string-pack/"},{"categories":["lua"],"content":"参考 lua5.4手册英文版 ","date":"2022-08-03","objectID":"/lua-string-pack/:1:0","tags":["lua"],"title":"lua中string.pack,string.unpack的用法","uri":"/lua-string-pack/"},{"categories":["linux","nginx"],"content":"nginx配置https转发 ","date":"2022-08-02","objectID":"/nginx-https/:0:0","tags":["linux","nginx"],"title":"nginx配置https转发","uri":"/nginx-https/"},{"categories":["linux","nginx"],"content":"下载nginx http://nginx.org/en/download.html wget http://nginx.org/download/nginx-1.20.2.tar.gz ","date":"2022-08-02","objectID":"/nginx-https/:1:0","tags":["linux","nginx"],"title":"nginx配置https转发","uri":"/nginx-https/"},{"categories":["linux","nginx"],"content":"安装nginx 参考: https://www.cnblogs.com/-wei/p/15219624.html tar -xzvf nginx-1.20.2.tar.gz cd nginx-1.20.2 ./configure --prefix=/opt/nginx --with-http_ssl_module make \u0026\u0026 make install ","date":"2022-08-02","objectID":"/nginx-https/:2:0","tags":["linux","nginx"],"title":"nginx配置https转发","uri":"/nginx-https/"},{"categories":["linux","nginx"],"content":"aliyun申请免费证书 这里以www.cfanzp.com为例子，具体申请流程这里就不赘述了。 申请成功后得到ngnix配置需要的证书和证书秘钥 #证书 5837690_www.cfanzp.com.pem #证书秘钥 5837690_www.cfanzp.com.key ","date":"2022-08-02","objectID":"/nginx-https/:3:0","tags":["linux","nginx"],"title":"nginx配置https转发","uri":"/nginx-https/"},{"categories":["linux","nginx"],"content":"将证书秘钥放到配置目录 #证书位置 etc/nginx/cert/5837690_www.cfanzp.com.pem #证书秘钥位置 /etc/nginx/cert/5837690_www.cfanzp.com.key nginx.conf demo: #user nobody; worker_processes 1; #error_log logs/error.log; #error_log logs/error.log notice; #error_log logs/error.log info; #pid logs/nginx.pid; events { worker_connections 1024; } http { include mime.types; default_type application/octet-stream; #log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' # '$status $body_bytes_sent \"$http_referer\" ' # '\"$http_user_agent\" \"$http_x_forwarded_for\"'; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; # HTTPS server # server { listen 443 ssl; #监听的端口 server_name localhost; #开启ssl验证 #ssl on; root html; index index.html index.htm; #证书位置 ssl_certificate /etc/nginx/cert/5837690_www.cfanzp.com.pem; #证书秘钥位置 ssl_certificate_key /etc/nginx/cert/5837690_www.cfanzp.com.key; #ssl会话超时时间 ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; #根据项目名称代理跳转具体的项目 location / { #代理跳转地址 proxy_pass http://127.0.0.1:9000; #设置代理的host信息（websocket时因为后面少加了端口，导致wss一直连不上，花了很长时间） proxy_set_header Host $host:$server_port; proxy_http_version 1.1; #设置可以代理websocket proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header X-real-ip $remote_addr; proxy_set_header X-Forwarded-For $remote_addr; } } } ","date":"2022-08-02","objectID":"/nginx-https/:4:0","tags":["linux","nginx"],"title":"nginx配置https转发","uri":"/nginx-https/"},{"categories":["nginx"],"content":"nginx web负载均衡配置 ","date":"2022-08-02","objectID":"/nginx-web-balance/:0:0","tags":["nginx"],"title":"nginx web负载均衡配置","uri":"/nginx-web-balance/"},{"categories":["nginx"],"content":"下载nginx http://nginx.org/en/download.html wget http://nginx.org/download/nginx-1.20.2.tar.gz ","date":"2022-08-02","objectID":"/nginx-web-balance/:1:0","tags":["nginx"],"title":"nginx web负载均衡配置","uri":"/nginx-web-balance/"},{"categories":["nginx"],"content":"安装nginx 参考: https://www.cnblogs.com/-wei/p/15219624.html ./configure --prefix=/opt/nginx 或 ./configure --prefix=/opt/nginx --with-http_ssl_module make make install ","date":"2022-08-02","objectID":"/nginx-web-balance/:2:0","tags":["nginx"],"title":"nginx web负载均衡配置","uri":"/nginx-web-balance/"},{"categories":["nginx"],"content":"报错 ./configure: error: the HTTP rewrite module requires the PCRE library yum -y install pcre-devel ./configure: error: the HTTP gzip module requires the zlib library. yum -y install zlib-devel ./configure: error: SSL modules require the OpenSSL library. yum -y install openssl openssl-devel ","date":"2022-08-02","objectID":"/nginx-web-balance/:3:0","tags":["nginx"],"title":"nginx web负载均衡配置","uri":"/nginx-web-balance/"},{"categories":["nginx"],"content":"nginx限制请求数据包大小 client_max_body_size 1000m; ","date":"2022-08-02","objectID":"/nginx-web-balance/:4:0","tags":["nginx"],"title":"nginx web负载均衡配置","uri":"/nginx-web-balance/"},{"categories":["nginx"],"content":"负载均衡配置 参考: https://www.cnblogs.com/telwanggs/p/14977290.html upstream test_group { # If there is no specific strategy, round-robin # would be the default strategy. # least_conn; # ip_hash; server 172.16.217.109:8501 weight=1 max_fails=2 fail_timeout=30s; server 172.16.217.109:8502 weight=1 max_fails=2 fail_timeout=30s; } location / { #root html; #index index.html index.htm; client_max_body_size 3m; proxy_pass http://test_group; } ","date":"2022-08-02","objectID":"/nginx-web-balance/:5:0","tags":["nginx"],"title":"nginx web负载均衡配置","uri":"/nginx-web-balance/"},{"categories":["nginx"],"content":"nginx负载均衡策略 轮询：将客户端发起的请求，平均分配给每一台服务器 权重：将客户的的请求，根据服务器的权重值不同，分配不同的数量 ip_hash：基于发起请求的客户端的ip地址不同，他始终会将请求发送到指定的服务器上，客户端ip地址不变，就会一直发送到一个服务器上。 ","date":"2022-08-02","objectID":"/nginx-web-balance/:6:0","tags":["nginx"],"title":"nginx web负载均衡配置","uri":"/nginx-web-balance/"},{"categories":["nginx"],"content":"轮询 upstream my_server{ server IP:8080; server IP:8081; } server { listen 80; listen [::]:80; server_name localhost; location / { proxy_pass http://my_server/; #Tomcat首页 } } ","date":"2022-08-02","objectID":"/nginx-web-balance/:6:1","tags":["nginx"],"title":"nginx web负载均衡配置","uri":"/nginx-web-balance/"},{"categories":["nginx"],"content":"权重 upstream my_server{ server IP:8080 weight=10; server IP:8081 weight=2; } server { listen 80; listen [::]:80; server_name localhost; location / { proxy_pass http://my_server/; #Tomcat首页 } } ","date":"2022-08-02","objectID":"/nginx-web-balance/:6:2","tags":["nginx"],"title":"nginx web负载均衡配置","uri":"/nginx-web-balance/"},{"categories":["nginx"],"content":"ip_hash upstream my_server{ ip_hash; server IP:8080 weight=10; server IP:8081 weight=2; } server { listen 80; listen [::]:80; server_name localhost; location / { proxy_pass http://my_server/; } } ","date":"2022-08-02","objectID":"/nginx-web-balance/:6:3","tags":["nginx"],"title":"nginx web负载均衡配置","uri":"/nginx-web-balance/"},{"categories":["nginx"],"content":"nginx配置笔记 ","date":"2022-08-02","objectID":"/nginx-config/:0:0","tags":["nginx"],"title":"nginx基本用法与配置笔记","uri":"/nginx-config/"},{"categories":["nginx"],"content":"基本概念 惊群现象：一个网路连接到来，多个睡眠的进程被同时叫醒，但只有一个进程能获得链接，这样会影响系统性能。 ","date":"2022-08-02","objectID":"/nginx-config/:1:0","tags":["nginx"],"title":"nginx基本用法与配置笔记","uri":"/nginx-config/"},{"categories":["nginx"],"content":"全局块 nginx服务器用户组 nginx进程pid 日志存放路径 配置文件引入 允许生成worker process数 ","date":"2022-08-02","objectID":"/nginx-config/:2:0","tags":["nginx"],"title":"nginx基本用法与配置笔记","uri":"/nginx-config/"},{"categories":["nginx"],"content":"event块 配置影响nginx服务器或与用户的网络连接。包括: 每个进程的最大连接数 选取那种事件驱动模型处理连接请求 是否允许同时接受多个网路连接 开启多个网络连接序列化等。 ","date":"2022-08-02","objectID":"/nginx-config/:3:0","tags":["nginx"],"title":"nginx基本用法与配置笔记","uri":"/nginx-config/"},{"categories":["nginx"],"content":"http块 可以嵌套多个server 配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。 文件引入 mime-type定义 日志定义 是否使用sendfile传输文件 连接超时时间 单连接请求数 ","date":"2022-08-02","objectID":"/nginx-config/:4:0","tags":["nginx"],"title":"nginx基本用法与配置笔记","uri":"/nginx-config/"},{"categories":["nginx"],"content":"server块 配置虚拟主机的相关参数，一个http中可以有多个server块 ","date":"2022-08-02","objectID":"/nginx-config/:5:0","tags":["nginx"],"title":"nginx基本用法与配置笔记","uri":"/nginx-config/"},{"categories":["nginx"],"content":"location 块 配置请求的路由，以及各种页面的请求情况 ","date":"2022-08-02","objectID":"/nginx-config/:6:0","tags":["nginx"],"title":"nginx基本用法与配置笔记","uri":"/nginx-config/"},{"categories":["nginx"],"content":"nginx文件结构 ... #全局块 events { #events块 ... } http #http块 { ... #http全局块 server #server块 { ... #server全局块 location [PATTERN] #location块 { ... } location [PATTERN] { ... } } server { ... } ... #http全局块 } ","date":"2022-08-02","objectID":"/nginx-config/:7:0","tags":["nginx"],"title":"nginx基本用法与配置笔记","uri":"/nginx-config/"},{"categories":["nginx"],"content":"一个nginx 配置文件的拆解分析 ########### 每个指令必须有分号结束。################# #user administrator administrators; #配置用户或者组，默认为nobody nobody。 #worker_processes 2; #允许生成的进程数，默认为1 #pid /nginx/pid/nginx.pid; #指定nginx进程运行文件存放地址 error_log log/error.log debug; #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg events { accept_mutex on; #设置网路连接序列化，防止惊群现象发生，默认为on multi_accept on; #设置一个进程是否同时接受多个网络连接，默认为off #use epoll; #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport worker_connections 1024; #最大连接数，默认为512 } http { include mime.types; #文件扩展名与文件类型映射表 default_type application/octet-stream; #默认文件类型，默认为text/plain #access_log off; #取消服务日志 log_format myFormat '$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for'; #自定义格式 access_log log/access.log myFormat; #combined为日志格式的默认值 sendfile on; #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。 sendfile_max_chunk 100k; #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。 keepalive_timeout 65; #连接超时时间，默认为75s，可以在http，server，location块。 upstream mysvr { server 127.0.0.1:7878; server 192.168.10.121:3333 backup; #热备 } error_page 404 https://www.baidu.com; #错误页 server { keepalive_requests 120; #单连接请求上限次数。 listen 4545; #监听端口 server_name 127.0.0.1; #监听地址 location ~*^.+$ { #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。 #root path; #根目录 #index vv.txt; #设置默认页 proxy_pass http://mysvr; #请求转向mysvr 定义的服务器列表 deny 127.0.0.1; #拒绝的ip allow 172.18.5.54; #允许的ip } } } ","date":"2022-08-02","objectID":"/nginx-config/:8:0","tags":["nginx"],"title":"nginx基本用法与配置笔记","uri":"/nginx-config/"},{"categories":["nginx"],"content":"参考 https://www.runoob.com/w3cnote/nginx-setup-intro.html https://www.jianshu.com/p/96d3b1fba09b https://www.jianshu.com/p/96d3b1fba09b ","date":"2022-08-02","objectID":"/nginx-config/:9:0","tags":["nginx"],"title":"nginx基本用法与配置笔记","uri":"/nginx-config/"},{"categories":["skynet"],"content":"skynet中使用uuid库 最近在使用之前一位同学写的uuid库时发现了uuid在不通的skynet虚拟机中可能会产生相同的值的现象，这里记录一下。产生的原因是，这2个虚拟机是在服务启动的时候创建的，间隔时间很短，随机种子估计是一样的。后面产生的随机序列都是一样的。 ","date":"2022-08-02","objectID":"/skynet-uuid/:0:0","tags":["skynet"],"title":"skynet中使用uuid库","uri":"/skynet-uuid/"},{"categories":["skynet"],"content":"uuid库初始化种子 相同时间初始化种子，后续产生的随机数是相同的,随机种子初始化代码如下: local uuid = require \"uuid\" uuid.seed() -- 初始化uuid种子 不同lua虚拟机中使用uuid可能生成相同的uuid,下面就是2个skynet服务在相同时间创建并初始化uuid种子的例子,不难看出，2个服务轮询接受请求，依次产生的uuid是相同的。 [:0000001a] [2022-07-29 11:36:36.561] [W] [login_web_agent1] service/login/platform/account_login.lua:111: req: 40a1bbf6-2e44-4b4a-cb9d-7a383472184b [:0000001b] [2022-07-29 11:36:44.059] [W] [login_web_agent2] service/login/platform/account_login.lua:111: req: 40a1bbf6-2e44-4b4a-cb9d-7a383472184b [:0000001a] [2022-07-29 11:36:55.069] [W] [login_web_agent1] service/login/platform/account_login.lua:111: req: bc96f82f-c94c-4398-c346-e956a92dcc11 [:0000001b] [2022-07-29 11:41:13.213] [W] [login_web_agent2] service/login/platform/account_login.lua:111: req: bc96f82f-c94c-4398-c346-e956a92dcc11 ","date":"2022-08-02","objectID":"/skynet-uuid/:1:0","tags":["skynet"],"title":"skynet中使用uuid库","uri":"/skynet-uuid/"},{"categories":["skynet"],"content":"总结 这个uuid库的使用需要保证uuid的使用是在一个虚拟机内。如果想uuid不重复，又要保证唯一性，可以创建一个专有的skynet虚拟机来提供uuid的分配工作。 ","date":"2022-08-02","objectID":"/skynet-uuid/:2:0","tags":["skynet"],"title":"skynet中使用uuid库","uri":"/skynet-uuid/"},{"categories":["lua"],"content":"luacheck luacheck 是一个lua代码的静态检查工具，可以用来发现lua代码中的一些缺陷，规范lua代码的书写。lua是一们解释型语言，很多错误只有在运行时才会暴露出来。借助静态检查工具能够方便我们在前期就发现一些低级错误并及时修正。 ","date":"2022-08-01","objectID":"/lua-luacheck/:0:0","tags":["linux","luacheck"],"title":"lua-luacheck","uri":"/lua-luacheck/"},{"categories":["lua"],"content":"安装 ","date":"2022-08-01","objectID":"/lua-luacheck/:1:0","tags":["linux","luacheck"],"title":"lua-luacheck","uri":"/lua-luacheck/"},{"categories":["lua"],"content":"ubuntu sudo apt install lua-check ","date":"2022-08-01","objectID":"/lua-luacheck/:1:1","tags":["linux","luacheck"],"title":"lua-luacheck","uri":"/lua-luacheck/"},{"categories":["lua"],"content":"centos yum install luarocks 这里使用luarocks来安装luacheck,安装过程中可能遇到报错的问题。 安装报错信息: root@mybonline1 mybonline]# luarocks install luacheck Installing https://luarocks.org/luacheck-0.25.0-1.src.rock... Using https://luarocks.org/luacheck-0.25.0-1.src.rock... switching to 'build' mode Missing dependencies for luacheck: luafilesystem \u003e= 1.6.3 argparse \u003e= 0.6.0 Using https://luarocks.org/luafilesystem-1.8.0-1.src.rock... switching to 'build' mode gcc -O2 -fPIC -I/usr/include -c src/lfs.c -o src/lfs.o src/lfs.c:84:10: fatal error: lua.h: No such file or directory 84 | #include \u003clua.h\u003e | ^~~~~~~ compilation terminated. Error: Failed installing dependency: https://luarocks.org/luafilesystem-1.8.0-1.src.rock - Build error: Failed compiling object src/lfs.o centos 安装luarocks -$ wget https://luarocks.org/releases/luarocks-3.8.0.tar.gz -$ tar zxpf luarocks-3.8.0.tar.gz -$ cd luarocks-3.8.0 ./configure --with-lua-include=/usr/local/include make make install /usr/local/bin/luarocks install luacheck 使用luarocks 安装 sudo apt install luarocks luarocks install luacheck ","date":"2022-08-01","objectID":"/lua-luacheck/:1:2","tags":["linux","luacheck"],"title":"lua-luacheck","uri":"/lua-luacheck/"},{"categories":["lua"],"content":"github安装帮助 https://github.com/luarocks/luarocks/wiki/Installation-instructions-for-Unix ","date":"2022-08-01","objectID":"/lua-luacheck/:2:0","tags":["linux","luacheck"],"title":"lua-luacheck","uri":"/lua-luacheck/"},{"categories":["lua"],"content":"配置文件 .luacheckrc ","date":"2022-08-01","objectID":"/lua-luacheck/:3:0","tags":["linux","luacheck"],"title":"lua-luacheck","uri":"/lua-luacheck/"},{"categories":["lua"],"content":"配置参数 ignore = { \"631\", -- max_line_length \"212/_.*\", -- unused argument, for vars with \"_\" prefix } ","date":"2022-08-01","objectID":"/lua-luacheck/:4:0","tags":["linux","luacheck"],"title":"lua-luacheck","uri":"/lua-luacheck/"},{"categories":["lua"],"content":"使用 忽略注释长度超过限制 luacheck --no-max-comment-line-length inject_test.lua 查看错误代码codes luacheck --codes inject_test.lua ","date":"2022-08-01","objectID":"/lua-luacheck/:5:0","tags":["linux","luacheck"],"title":"lua-luacheck","uri":"/lua-luacheck/"},{"categories":["lua"],"content":"vim中配置luacheck \"no-unused-args 忽略不使用的参数 \"no-redefined 忽略重定义 \"no-max-line-length 忽略每行最长的检测 \"ignore 542 551 忽略if条件的body为空(如...elseif ret == nil then end，then和end中间没有语句)；忽略空语句(如;)，如果用了;则成对出现该语法检测warning \"有语法错误的一行左侧栏会有S\u0026gt;标识，光标移动到改行，vim下发会给出提示。修改正确后保存，则该'S\u0026gt;'会消失。 \"let g:syntastic_lua_checkers = [\"luac\", \"luacheck\"] let g:syntastic_lua_checkers = [\"/use/bin/luac5.4.3\", \"luacheck\"] \"let g:syntastic_lua_luacheck_args = \"--codes --no-max-comment-line-length --ignore 542 551\" let g:syntastic_lua_luacheck_args = \"--codes\" ","date":"2022-08-01","objectID":"/lua-luacheck/:6:0","tags":["linux","luacheck"],"title":"lua-luacheck","uri":"/lua-luacheck/"},{"categories":["linux"],"content":"linux-计算器命令bc ","date":"2022-08-01","objectID":"/linux-bc/:0:0","tags":["bc"],"title":"linux-计算器命令bc","uri":"/linux-bc/"},{"categories":["linux"],"content":"基本用法 查看版本 $ bc -v bc 1.07.1 Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006, 2008, 2012-2017 Free Software Foundation, Inc. 查看帮助 $ bc -h usage: bc [options] [file ...] -h --help print this usage and exit -i --interactive force interactive mode -l --mathlib use the predefined math routines -q --quiet don't print initial banner -s --standard non-standard bc constructs are errors -w --warn warn about non-standard bc constructs -v --version print version information and exit ","date":"2022-08-01","objectID":"/linux-bc/:1:0","tags":["bc"],"title":"linux-计算器命令bc","uri":"/linux-bc/"},{"categories":["linux"],"content":"支持的运算 +:加 -:减 *:乘 /:除 ^:指数 %:求余数 sqrt:开方 ibase:输入进制 obase:输出进制 ;要计算多个结果用分号分隔 scale:小数部分位数 ","date":"2022-08-01","objectID":"/linux-bc/:2:0","tags":["bc"],"title":"linux-计算器命令bc","uri":"/linux-bc/"},{"categories":["linux"],"content":"1. 使用 echo 命令来传递运算式或命令 3除以2保留3位小数:echo ‘scale=3; 3/2’ | bc [root@dev127 myb]# echo 'scale=3; 3/2' scale=3; 3/2 [root@dev127 myb]# echo 'scale=3; 3/2' | bc 1.500 [root@dev127 myb]# ","date":"2022-08-01","objectID":"/linux-bc/:3:0","tags":["bc"],"title":"linux-计算器命令bc","uri":"/linux-bc/"},{"categories":["linux"],"content":"2. 交换模式 输入bc进入交互模式 [root@dev127 myb]# bc bc 1.06.95 Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006 Free Software Foundation, Inc. This is free software with ABSOLUTELY NO WARRANTY. For details type `warranty'. 5/3 1 scale=5;5/3 1.66666 exit 0 ^C ","date":"2022-08-01","objectID":"/linux-bc/:4:0","tags":["bc"],"title":"linux-计算器命令bc","uri":"/linux-bc/"},{"categories":["linux"],"content":"进制转换 10进制的3转换为2进制:echo “obase=2;3” |bc [root@dev127 myb]# echo \"obase=2;3\" |bc 11 10进制的11转换为16进制:echo “obase=16;11” |bc [root@dev127 myb]# echo \"obase=16;11\" |bc B 2进制转16进制:echo “obase=16;ibase=2;11” |bc [root@dev127 myb]# echo \"obase=16;ibase=2;11\" |bc F 2进制转10进制:echo “obase=10;ibase=2;11” |bc [root@dev127 myb]# echo \"obase=10;ibase=2;11\" |bc 3 [root@dev127 myb]# echo \"obase=10;ibase=2;1111\" |bc 15 计算平方根:100是10的平方 [root@dev127 myb]# echo \"sqrt(100)\" |bc 10 计算m的n次方:10的3次方,10的2次方,3的5次方: [root@dev127 myb]# echo \"10^3;10^2;3^5\" |bc 1000 100 243 ","date":"2022-08-01","objectID":"/linux-bc/:5:0","tags":["bc"],"title":"linux-计算器命令bc","uri":"/linux-bc/"},{"categories":["linux"],"content":"注意事项 注意：obase 要尽量放在 ibase 前面，因为 ibase 设置后，后面的数字都是以 ibase 的进制来换算的。 ","date":"2022-08-01","objectID":"/linux-bc/:6:0","tags":["bc"],"title":"linux-计算器命令bc","uri":"/linux-bc/"},{"categories":["linux"],"content":"参考 http://c.biancheng.net/view/2680.html ","date":"2022-08-01","objectID":"/linux-bc/:7:0","tags":["bc"],"title":"linux-计算器命令bc","uri":"/linux-bc/"},{"categories":["linux"],"content":"xfreerdp ","date":"2022-08-01","objectID":"/linux-xfreerdp/:0:0","tags":["xfreerdp"],"title":"linux-xfreerdp","uri":"/linux-xfreerdp/"},{"categories":["linux"],"content":"使用举例 远程192.168.2.3这台机器并挂载/home/admin/share目录 xfreerdp +clipboard /w:1920 /h:1050 /u:Administrator /p:admin1234567890 /v:192.168.2.3:3389 /drive:share,/home/admin/share ","date":"2022-08-01","objectID":"/linux-xfreerdp/:1:0","tags":["xfreerdp"],"title":"linux-xfreerdp","uri":"/linux-xfreerdp/"},{"categories":["linux"],"content":"使用帮助 xfreerdp –help [zp@zp-pc dev]$ xfreerdp --help FreeRDP - A Free Remote Desktop Protocol Implementation See www.freerdp.com for more information Usage: xfreerdp [file] [options] [/v:\u003cserver\u003e[:port]] Syntax: /flag (enables flag) /option:\u003cvalue\u003e (specifies option with value) +toggle -toggle (enables or disables toggle, where '/' is a synonym of '+') /a:\u003caddin\u003e[,\u003coptions\u003e] Addin /action-script:\u003cfile-name\u003e Action script /admin Admin (or console) session +aero Enable desktop composition /app:\u003cpath\u003e or ||\u003calias\u003e Remote application program /app-cmd:\u003cparameters\u003e Remote application command-line parameters /app-file:\u003cfile-name\u003e File to open with remote application /app-guid:\u003capp-guid\u003e Remote application GUID /app-icon:\u003cicon-path\u003e Remote application icon for user interface /app-name:\u003capp-name\u003e Remote application name for user interface /app-workdir:\u003cworkspace path\u003e Remote application workspace path /assistance:\u003cpassword\u003e Remote assistance password /auto-request-control Automatically request remote assistance input control +async-channels Enable Asynchronous channels (experimental) +async-input Enable Asynchronous input +async-update Enable Asynchronous update /audio-mode:\u003cmode\u003e Audio output mode +auth-only Enable Authenticate only -authentication Disable Authentication (experimental) +auto-reconnect Enable Automatic reconnection /auto-reconnect-max-retries:\u003cretries\u003e Automatic reconnection maximum retries, 0 for unlimited [0,1000] +bitmap-cache Enable bitmap cache /bpp:\u003cdepth\u003e Session bpp (color depth) /buildconfig Print the build configuration /cert:[deny,ignore,name:\u003cname\u003e,tofu,fingerprint:\u003chash\u003e:\u003chash as hex\u003e [,fingerprint:\u003chash\u003e:\u003canother hash\u003e]] Certificate accept options. Use with care! * deny ... Automatically abort connection if the certificate does not match, no user interaction. * ignore ... Ignore the certificate checks altogether (overrules all other options) * name ... Use the alternate \u003cname\u003e instead of the certificate subject to match locally stored certificates * tofu ... Accept certificate unconditionally on first connect and deny on subsequent connections if the certificate does not match * fingerprints ... A list of certificate hashes that are accepted unconditionally for a connection /cert-deny [deprecated, use /cert:deny] Automatically abort connection for any certificate that can not be validated. /cert-ignore [deprecated, use /cert:ignore] Ignore certificate /cert-name:\u003cname\u003e [deprecated, use /cert:name:\u003cname\u003e] Certificate name /cert-tofu [deprecated, use /cert:tofu] Automatically accept certificate on first connect /client-build-number:\u003cnumber\u003e Client Build Number sent to server (influences smartcard behaviour, see [MS-RDPESC]) /client-hostname:\u003cname\u003e Client Hostname to send to server -clipboard[:[use-selection:\u003catom\u003e]] Disable Redirect clipboard. * use-selection:\u003catom\u003e ... (X11) Specify which X selection to access. Default is CLIPBOARD. PRIMARY is the X-style middle-click selection. /codec-cache:[rfx|nsc|jpeg] Bitmap codec cache -compression Disable compression /compression-level:\u003clevel\u003e Compression level (0,1,2) +credentials-delegation Enable credentials delegation /d:\u003cdomain\u003e Domain -decorations Disable Window decorations /disp Display control /drive:\u003cname\u003e,\u003cpath\u003e Redirect directory \u003cpath\u003e as named share \u003cname\u003e. Hotplug support is enabled with /drive:hotplug,*. This argument provides the same function as \"Drives that I plug in later\" option in MSTSC. +drives Enable Redirect all mount points as shares /dvc:\u003cchannel\u003e[,\u003coptions\u003e] Dynamic virtual channel /dynamic-resolution Send resolution updates when the window is resized /echo Echo channel -encryption Disable Encryption (experimental) /encryption-methods:[40,][56,][128,][FIPS] RDP standard security encryption methods /f Fullscreen mode (\u003cCtrl\u003e+\u003cAlt\u003e+\u003cEnter\u003e toggles fullscreen) -fast-path Disable fast-path input/output +fipsmode Enable FIPS mode /floatbar[:sticky:[on|off],default:[visible|hidden],show: [always|fullscreen||window]] floatbar is disabled by defaul","date":"2022-08-01","objectID":"/linux-xfreerdp/:2:0","tags":["xfreerdp"],"title":"linux-xfreerdp","uri":"/linux-xfreerdp/"},{"categories":["development-manual"],"content":"开发手册汇总 mysql8.0中文参考手册: https://mysql.bookhub.tech/#/README mysql5.7: https://www.docs4dev.com/docs/zh/mysql/5.7/reference/ mysql5.6：https://dev.mysql.com/doc/refman/5.6/en/ redis命令手册: https://www.redis.net.cn/order/ ","date":"2022-08-01","objectID":"/dev-manual/:1:0","tags":["linux","manual"],"title":"开发手册汇总","uri":"/dev-manual/"},{"categories":["development-manual"],"content":"语言 golang:https://go.dev/doc/ 在线运行golang程序 lua5.3开发手册: https://cloud.tencent.com/developer/doc/1141 lua5.4 官网英文版: http://www.lua.org/manual/5.4/manual.html rust: https://github.com/rust-lang/reference ","date":"2022-08-01","objectID":"/dev-manual/:1:1","tags":["linux","manual"],"title":"开发手册汇总","uri":"/dev-manual/"},{"categories":["development-manual"],"content":"工具 markdown-GFM: https://gfm.docschina.org/zh-hans/ 印记中文: https://docschina.org/ 正则表达式: https://github.com/any86/any-rule ","date":"2022-08-01","objectID":"/dev-manual/:1:2","tags":["linux","manual"],"title":"开发手册汇总","uri":"/dev-manual/"},{"categories":["skynet"],"content":"skynet升级到1.5.0 skynet升级到1.5.0 对应lua版本:lua5.4.3 ","date":"2022-08-01","objectID":"/skynet-update-log/:1:0","tags":["skynet"],"title":"skynet 更新记录","uri":"/skynet-update-log/"},{"categories":["skynet"],"content":"skynet地址 https://github.com/cloudwu/skynet/releases/tag/v1.5.0 下载地址:https://github.com/cloudwu/skynet/archive/refs/tags/v1.5.0.tar.gz 加速地址:https://github.91chi.fun//https://github.com//cloudwu/skynet/archive/refs/tags/v1.5.0.tar.gz ","date":"2022-08-01","objectID":"/skynet-update-log/:2:0","tags":["skynet"],"title":"skynet 更新记录","uri":"/skynet-update-log/"},{"categories":["skynet"],"content":"升级步骤 创建分支skynet1.5 删除skynet目录的所有文件，解压或同步skynet1.5.0的代码到skynet目录 rm ./skynet/* -rf 初始化skynet git submodule update --init jemalloc库若未初始化成功,可手动克隆到3rd/jemalloc目录中 git clone https://gitee.com/mirrors/jemalloc.git ","date":"2022-08-01","objectID":"/skynet-update-log/:3:0","tags":["skynet"],"title":"skynet 更新记录","uri":"/skynet-update-log/"},{"categories":["skynet"],"content":"编译报错 skynet-src/spinlock.h:50:23: fatal error: stdatomic.h: No such file or directory 升级Gcc值4.9及以上版本 ","date":"2022-08-01","objectID":"/skynet-update-log/:4:0","tags":["skynet"],"title":"skynet 更新记录","uri":"/skynet-update-log/"},{"categories":["skynet"],"content":"gcc多版本共存。 devtoolset对应gcc版本 devtoolset-3对应gcc4.x.x版本 devtoolset-4对应gcc5.x.x版本 devtoolset-6对应gcc6.x.x版本 devtoolset-7对应gcc7.x.x版本 devtoolset-8对应gcc8.x.x版本 devtoolset-9对应gcc9.x.x版本 devtoolset-10对应gcc10.x.x版本 https://www.cnblogs.com/jixiaohua/p/11732225.html sudo yum install centos-release-scl 安装devtoolset，注意，如果想安装11.版本的，就改成devtoolset-11-gcc sudo yum install devtoolset-11-gcc* 激活对应的devtoolset，可以一次安装多个版本的devtoolset，需要的时候用下面这条命令切换到对应的版本 这仅仅在当前bash生效，如果需要永久生效，可以请自行添加环境变量。 scl enable devtoolset-11 bash #或 source /opt/rh/devtoolset-8/enable gcc版本永久生效 echo \"source /opt/rh/devtoolset-11/enable\" \u003e\u003e/etc/profile 查看gcc版本号 gcc -v ","date":"2022-08-01","objectID":"/skynet-update-log/:5:0","tags":["skynet"],"title":"skynet 更新记录","uri":"/skynet-update-log/"},{"categories":["skynet"],"content":"gcc安装报错 报错问题: Transaction check error: file /usr/lib/debug/usr/lib64/libitm.so.1.0.0.debug from install of devtoolset-8-gcc-debuginfo-8.3.1-3.2.el7.x86_64 conflicts with file from package gcc-base-debuginfo-4.8.5-39.el7.x86_64 file /usr/lib/debug/usr/lib64/libatomic.so.1.debug from install of devtoolset-8-gcc-debuginfo-8.3.1-3.2.el7.x86_64 conflicts with file from package gcc-debuginfo-4.8.5-39.el7.x86_64 file /usr/lib/debug/usr/lib64/libtsan.so.0.0.0.debug from install of devtoolset-8-gcc-debuginfo-8.3.1-3.2.el7.x86_64 conflicts with file from package gcc-debuginfo-4.8.5-39.el7.x86_64 解决方案 yum remove gcc-base-debuginfo-4.8.5-39.el7.x86_64 ","date":"2022-08-01","objectID":"/skynet-update-log/:6:0","tags":["skynet"],"title":"skynet 更新记录","uri":"/skynet-update-log/"},{"categories":["skynet"],"content":"skynet服务启动报错 [root@dev127 myb_dev]# sh/test/debug_test.sh try open snlua failed : luaclib/snlua.so: cannot open shared object file: No such file or directory [:00000000] Bootstrap error : snlua bootstrap ./skynet example/config 报错 [root@dev127 skynet]# ./skynet examples/config try open snlua failed : ./cservice/snlua.so: undefined symbol: lua_resetthread [:00000000] Bootstrap error : snlua bootstrap 解决方案 make clean make all ","date":"2022-08-01","objectID":"/skynet-update-log/:7:0","tags":["skynet"],"title":"skynet 更新记录","uri":"/skynet-update-log/"},{"categories":["skynet"],"content":"源码安装gcc11.2.0 https://blog.csdn.net/qq_41054313/article/details/119453611 https://blog.csdn.net/skykingf/article/details/120701069 ","date":"2022-08-01","objectID":"/skynet-update-log/:8:0","tags":["skynet"],"title":"skynet 更新记录","uri":"/skynet-update-log/"},{"categories":["skynet"],"content":"skynet升级改动文件 文件 修改 skynet/service-src/service_logger.c * 添加文件日志及转储功能。 skynet/lualib-src/lua-clientwebsocket.c + skynet/lualib-src/lua-mysqlaux.c + skynet/lualib-src/lua-profile.c + skynet/lualib-src/lua-websocketnetpack.c + skynet/lualib/snax/wsgateserver.lua + skynet/service/debug_console.lua * 添加ag等命令 skynet/service/wsgate.lua + skynet/Makefile * 添加 wsnetpack.so等库 ","date":"2022-08-01","objectID":"/skynet-update-log/:9:0","tags":["skynet"],"title":"skynet 更新记录","uri":"/skynet-update-log/"},{"categories":["skynet"],"content":"skynet热更新-clearcache的使用体会 ","date":"2022-08-01","objectID":"/skynet-clearcache/:0:0","tags":["skynet"],"title":"skynet-clearcache","uri":"/skynet-clearcache/"},{"categories":["skynet"],"content":"skynet 热更新主要有2种方法 第一种：使用clearcache 第二种：使用console inject lua脚本 ","date":"2022-08-01","objectID":"/skynet-clearcache/:1:0","tags":["skynet"],"title":"skynet-clearcache","uri":"/skynet-clearcache/"},{"categories":["skynet"],"content":"动态创建的服务的热更新 如果一个skynet服务是在业务流程中动态创建的，那么在修改代码后，使用clearcache就可以保证下次再创建的新的服务是使用的新的代码。 ","date":"2022-08-01","objectID":"/skynet-clearcache/:2:0","tags":["skynet"],"title":"skynet-clearcache","uri":"/skynet-clearcache/"},{"categories":["skynet"],"content":"创建后长期不销毁重建的服务，如何热更新？ 如果是在进程启动时创建，或创建后就一直存在的服务需要热更新怎么办呢？ 方法1: 对于这种情况目前inject是首选。但是有时候需要修改的代码量比较大，inject 脚本的方式就非常复杂且容易出错。 方法2: 当然，还有一种方式就是采用轮服的机制解决。从进程级别解决问题。但是这个代价又太大了，比clearcache的成本还高。 这里我们还有一个思路就是可以在业务服前加一个管理调度服务。例如A1 skynet服务需要发消息给B1 skynet服务来实现某个功能。消息流为： A1 ---\u003e B1 我们可以在B1前加一个B_manager服务，A服务通过B_manager服来传递消息给B1服务， 消息流为： A1 ---\u003e B_Manager ---\u003e B1 这个时候如果B1的业务有大量需要修改的。只需要clearcache一下，然后创建一个新的B1服务，这里称为B2,B_Manager再将A1的请求转发到B2即可，这个时候的消息流为: A1 ---\u003e B_Manager ---\u003e B2 这个时候B1就不会接收到新的消息了。介意B1的存在可以销毁它，如果资源占用不大，也可以不销毁。 当然这里有几个必须要注意的问题: 如果B1服务是有状态的，那么这个方法是有很大限制的，需要把B1服务的数据通过消息或共享内存，缓存等方式转移到B2服务上。 如果B1服务上有定时器等可能会影响业务的逻辑时时，必须要关闭定时器或销毁B2服务。 如果B1是无状态的那就简单多了，创建新的服务B2后，B_mananger将所有需要转发给B1的请求全都转发给B2即可。 消息中间多了一层B_Manager会不会损失性能，这个需要视业务要求来具体分析，大部分情况，这点性能损失都可以忽略不计的；当然如果你很介意的话，还是建议业务刚上线时使用B_Manager，业务稳定后，可以在某次更新时将这层转发层去掉。 上面的方法也是一种折中的方法，个人感觉还是比较好用的，但也是不完美的。 ","date":"2022-08-01","objectID":"/skynet-clearcache/:3:0","tags":["skynet"],"title":"skynet-clearcache","uri":"/skynet-clearcache/"},{"categories":["skynet"],"content":"总结 关于skynet的热更新，如果你有什么更好的方案，希望能够指点一二！ 个人的一点想法，分享给大家！如果你也在使用skynet，关注我，一起学习，交流一下！ ","date":"2022-08-01","objectID":"/skynet-clearcache/:4:0","tags":["skynet"],"title":"skynet-clearcache","uri":"/skynet-clearcache/"},{"categories":["skynet"],"content":"skynet：debug console添加搜索功能 ","date":"2022-08-01","objectID":"/skynet-debug_console-ag/:0:0","tags":["skynet"],"title":"skynet-给debug_console添加ag搜索","uri":"/skynet-debug_console-ag/"},{"categories":["skynet"],"content":"为什么要给skynet的debug console添加搜索功能? 使用skynet一段时间后，发现，在动态创建skynet service的情况下，如果service很多,有时很难找到我们想要找到我们要找的那个skynet服务，用skynet的list命令会罗列所有的服务，因此我们需要像grep,ag这样的命令功能来搜索skynet的服务。 ","date":"2022-08-01","objectID":"/skynet-debug_console-ag/:1:0","tags":["skynet"],"title":"skynet-给debug_console添加ag搜索","uri":"/skynet-debug_console-ag/"},{"categories":["skynet"],"content":"实现搜索命令ag local function get_all_list(key_string) local table_list={} local all_services = skynet.call(\".launcher\", \"lua\", \"LIST\") local count = 0 for k,v in pairs(all_services) do if string.match(k, key_string) or string.match(v, key_string) then table_list[k] = v count = count + 1 end end table_list[\"total_count\"] = count return table_list end function COMMAND.ag(key_string) if key_string == nil then skynet.error(\"ag nil string:\") return nil end skynet.error(\"ag:\",key_string) return get_all_list(key_string) end 查找包含vip字段的服务 ag vip :0000003b snlua vip_service :0000003c snlua vip_agent 1 total_count 2 \u003cCMD OK\u003e 查找包含3b的服务 ag 3b :0000003b snlua vip_service total_count 1 \u003cCMD OK\u003e ","date":"2022-08-01","objectID":"/skynet-debug_console-ag/:2:0","tags":["skynet"],"title":"skynet-给debug_console添加ag搜索","uri":"/skynet-debug_console-ag/"},{"categories":["linux"],"content":"git-ftp的使用 ","date":"2022-07-31","objectID":"/git-ftp/:0:0","tags":["linux","git","ftp"],"title":"git-ftp的使用","uri":"/git-ftp/"},{"categories":["linux"],"content":"git-ftp有什么用？ git-ftp 能够方便的帮助我们将自己管理的git项目相关代码或资源提交到自己的ftp服务器上 ","date":"2022-07-31","objectID":"/git-ftp/:1:0","tags":["linux","git","ftp"],"title":"git-ftp的使用","uri":"/git-ftp/"},{"categories":["linux"],"content":"git-ftp命令 git ftp init git ftp push ","date":"2022-07-31","objectID":"/git-ftp/:2:0","tags":["linux","git","ftp"],"title":"git-ftp的使用","uri":"/git-ftp/"},{"categories":["linux"],"content":"安装 首次使用需要下载安装git-ftp并进行配置 ","date":"2022-07-31","objectID":"/git-ftp/:3:0","tags":["linux","git","ftp"],"title":"git-ftp的使用","uri":"/git-ftp/"},{"categories":["linux"],"content":"ubuntu安装 sudo apt-get install git-ftp ","date":"2022-07-31","objectID":"/git-ftp/:3:1","tags":["linux","git","ftp"],"title":"git-ftp的使用","uri":"/git-ftp/"},{"categories":["linux"],"content":"mac 安装 brew install git-ftp mac安装过程中相关依赖可能会报错，我安装的时候遇到了报错问题，这里记录一下: Error: No such file or directory @ rb_sysopen - /Users/zp/Library/Caches/Homebrew/downloads/8687c3e085e812f09d11aeca541ef9cdefbc8f971d9dd3c407c8b18bb3954957--libnghttp2-1.47.0.monterey.bottle.tar.gz 报错解决方案:安装相关库即可 brew install libnghttp2 brew install openldap brew install brotli brew install zstd brew install curl brew install git-ftp ","date":"2022-07-31","objectID":"/git-ftp/:3:2","tags":["linux","git","ftp"],"title":"git-ftp的使用","uri":"/git-ftp/"},{"categories":["linux"],"content":"配置 简单配置,修改.git/config添加如下配置 [git-ftp] url = your-ftp-url user = your-ftp-user password = your_ftp_url syncroot = your-local-upload-fullpath remote-root= your-ftp-upload-path(eg:htdocs) ","date":"2022-07-31","objectID":"/git-ftp/:4:0","tags":["linux","git","ftp"],"title":"git-ftp的使用","uri":"/git-ftp/"},{"categories":["linux"],"content":"参考 官方文档:https://github.com/git-ftp/git-ftp/blob/master/man/git-ftp.1.md ","date":"2022-07-31","objectID":"/git-ftp/:5:0","tags":["linux","git","ftp"],"title":"git-ftp的使用","uri":"/git-ftp/"},{"categories":["devtools"],"content":"github资源整理 ","date":"2022-07-31","objectID":"/code-github/:1:0","tags":["github"],"title":"github资源整理","uri":"/code-github/"},{"categories":["devtools"],"content":"本文主要用于收集整理平时发现的一些优秀的github资源，以便后续学习使用 工具类 WindTerm: 一个ssh远程工具 源码:https://github.com/kingToolbox/WindTerm 下载地址:https://github.com/kingToolbox/WindTerm/releases 服务端框架 skynet框架:https://github.com/cloudwu/skynet c + lua 服务端开发框架 ","date":"2022-07-31","objectID":"/code-github/:1:1","tags":["github"],"title":"github资源整理","uri":"/code-github/"},{"categories":["devtools"],"content":"ftp工具 git-ftp:https://github.com/git-ftp/git-ftp ","date":"2022-07-31","objectID":"/code-github/:1:2","tags":["github"],"title":"github资源整理","uri":"/code-github/"},{"categories":["language","development-manual","lua"],"content":"lua5.3开发手册 https://cloud.tencent.com/developer/doc/1141 云风翻译:http://cloudwu.github.io/lua53doc/manual.html ","date":"2022-07-31","objectID":"/lua-man/:1:0","tags":["lua"],"title":"Lua开发手册","uri":"/lua-man/"},{"categories":["language","development-manual","lua"],"content":"lua5.4开发手册 官网英文版:http://www.lua.org/manual/5.4/manual.html ","date":"2022-07-31","objectID":"/lua-man/:2:0","tags":["lua"],"title":"Lua开发手册","uri":"/lua-man/"},{"categories":["language","development-manual","lua"],"content":"lua匹配库Lpeg 官网: http://www.inf.puc-rio.br/~roberto/lpeg/ 帮助: https://www.jianshu.com/p/e8e1c5abfdbb tutorial: https://lua-users.org/wiki/LpegTutorial ","date":"2022-07-31","objectID":"/lua-man/:3:0","tags":["lua"],"title":"Lua开发手册","uri":"/lua-man/"},{"categories":["language","development-manual","lua"],"content":"luasocket github: https://github.com/lunarmodules/luasocket 使用demo: https://blog.csdn.net/h1023417614/article/details/52297408 ","date":"2022-07-31","objectID":"/lua-man/:4:0","tags":["lua"],"title":"Lua开发手册","uri":"/lua-man/"},{"categories":["language","development-manual","lua"],"content":"lua md5 github: https://github.com/keplerproject/md5 ","date":"2022-07-31","objectID":"/lua-man/:5:0","tags":["lua"],"title":"Lua开发手册","uri":"/lua-man/"},{"categories":["language","development-manual","lua"],"content":"jemalloc http://jemalloc.net/ ","date":"2022-07-31","objectID":"/lua-man/:6:0","tags":["lua"],"title":"Lua开发手册","uri":"/lua-man/"},{"categories":["language"],"content":"rust语言基础 ","date":"2022-07-30","objectID":"/language-rust/:0:0","tags":["rust"],"title":"rust语言基础","uri":"/language-rust/"},{"categories":["language"],"content":"rust语言的优点 c/c++ 性能好，但是类型系统和内存都不太安全。 java/c#, 有GC,内存安全有很多优秀的特性，但性能不行。 Rust:安全，无需GC,易于维护 ","date":"2022-07-30","objectID":"/language-rust/:1:0","tags":["rust"],"title":"rust语言基础","uri":"/language-rust/"},{"categories":["language"],"content":"rust的缺点 难学 ","date":"2022-07-30","objectID":"/language-rust/:2:0","tags":["rust"],"title":"rust语言基础","uri":"/language-rust/"},{"categories":["language"],"content":"Rust特别擅长的领域 高性能Web Service WebAssemble 命令行工具 网络编程 嵌入式设备 系统编程 ","date":"2022-07-30","objectID":"/language-rust/:3:0","tags":["rust"],"title":"rust语言基础","uri":"/language-rust/"},{"categories":["language"],"content":"Rust的用户和案例 Google:新操作系统Fuschia,Rust:30% Amazon：基于Linux开发的直接可以在裸机、虚拟机上运行容器的操作系统 System76：纯Rust开发了下一代安全操作系统Redox 蚂蚁金服:库操作系统Occlum 斯坦福和密歇根大学:嵌入式实时操作系统，应用于Google的加密产品。 微软:Rust重写Windows系统中的一些低级组件 微软:WinRT/Rust项目 Dropbox、Yelp、LINE、npm、百度、华为、Deno等 ","date":"2022-07-30","objectID":"/language-rust/:4:0","tags":["rust"],"title":"rust语言基础","uri":"/language-rust/"},{"categories":["language"],"content":"注意 Rust有很多独有的概念，他们和现在大多主流语言都不通。 学习Rust必须从基础概念一步一步学，否则会懵。 ","date":"2022-07-30","objectID":"/language-rust/:5:0","tags":["rust"],"title":"rust语言基础","uri":"/language-rust/"},{"categories":["language"],"content":"参考教材 Rust权威指南(The rust programming language) ","date":"2022-07-30","objectID":"/language-rust/:6:0","tags":["rust"],"title":"rust语言基础","uri":"/language-rust/"},{"categories":["language"],"content":"Rust安装 curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh info: downloading installer Welcome to Rust! This will download and install the official compiler for the Rust programming language, and its package manager, Cargo. Rustup metadata and toolchains will be installed into the Rustup home directory, located at: /Users/zp/.rustup This can be modified with the RUSTUP_HOME environment variable. The Cargo home directory is located at: /Users/zp/.cargo This can be modified with the CARGO_HOME environment variable. The cargo, rustc, rustup and other commands will be added to Cargo's bin directory, located at: /Users/zp/.cargo/bin This path will then be added to your PATH environment variable by modifying the profile files located at: /Users/zp/.profile /Users/zp/.bash_profile /Users/zp/.bashrc /Users/zp/.zshenv You can uninstall at any time with rustup self uninstall and these changes will be reverted. Current installation options: default host triple: x86_64-apple-darwin default toolchain: stable (default) profile: default modify PATH variable: yes 1) Proceed with installation (default) 2) Customize installation 3) Cancel installation \u003e 选1，提示如下则安装成功 info: profile set to 'default' info: default host triple is x86_64-apple-darwin info: syncing channel updates for 'stable-x86_64-apple-darwin' 703.5 KiB / 703.5 KiB (100 %) 671.4 KiB/s in 1s ETA: 0s info: latest update on 2022-06-30, rust version 1.62.0 (a8314ef7d 2022-06-27) info: downloading component 'cargo' 4.7 MiB / 4.7 MiB (100 %) 2.8 MiB/s in 1s ETA: 0s info: downloading component 'clippy' info: downloading component 'rust-docs' 18.3 MiB / 18.3 MiB (100 %) 5.3 MiB/s in 4s ETA: 0s info: downloading component 'rust-std' 24.6 MiB / 24.6 MiB (100 %) 4.0 MiB/s in 6s ETA: 0s info: downloading component 'rustc' 52.6 MiB / 52.6 MiB (100 %) 1.5 MiB/s in 20s ETA: 0s info: downloading component 'rustfmt' 2.4 MiB / 2.4 MiB (100 %) 1.4 MiB/s in 2s ETA: 0s info: installing component 'cargo' info: installing component 'clippy' info: installing component 'rust-docs' 18.3 MiB / 18.3 MiB (100 %) 1.7 MiB/s in 21s ETA: 0s info: installing component 'rust-std' 24.6 MiB / 24.6 MiB (100 %) 8.9 MiB/s in 2s ETA: 0s info: installing component 'rustc' 52.6 MiB / 52.6 MiB (100 %) 10.4 MiB/s in 5s ETA: 0s info: installing component 'rustfmt' info: default toolchain set to 'stable-x86_64-apple-darwin' stable-x86_64-apple-darwin installed - rustc 1.62.0 (a8314ef7d 2022-06-27) Rust is installed now. Great! To get started you may need to restart your current shell. This would reload your PATH environment variable to include Cargo's bin directory ($HOME/.cargo/bin). To configure your current shell, run: source \"$HOME/.cargo/env\" 查看版本号 localhost:~ zp$ rustc --version rustc 1.62.0 (a8314ef7d 2022-06-27) 卸载 rustup self uninstall ","date":"2022-07-30","objectID":"/language-rust/:7:0","tags":["rust"],"title":"rust语言基础","uri":"/language-rust/"},{"categories":["language"],"content":"总结 今天简单了解了一下rust语言，学习了rust语言的优点和缺点。 学习了rust的下载安装和基本配置。 rust是一门安全又高效的语言，这个足以秒杀现在的大部分语言了。 大厂都在用的语言，如果有时间还是有必要学习一下。 ","date":"2022-07-30","objectID":"/language-rust/:8:0","tags":["rust"],"title":"rust语言基础","uri":"/language-rust/"},{"categories":["devtools"],"content":"flameshot ","date":"2022-07-30","objectID":"/devtools-flameshot/:0:0","tags":["flameshot"],"title":"devtools-flameshot","uri":"/devtools-flameshot/"},{"categories":["devtools"],"content":"简介 flameshot 是一款跨平台的截图工具。 ","date":"2022-07-30","objectID":"/devtools-flameshot/:1:0","tags":["flameshot"],"title":"devtools-flameshot","uri":"/devtools-flameshot/"},{"categories":["devtools"],"content":"配置文件路经 linux: ~/.config/flameshot/flameshot.ini windows: C:\\Users\\{YOURNAME}\\AppData\\Roaming\\flameshot\\flameshot.ini ","date":"2022-07-30","objectID":"/devtools-flameshot/:2:0","tags":["flameshot"],"title":"devtools-flameshot","uri":"/devtools-flameshot/"},{"categories":["devtools"],"content":"github地址: https://github.com/flameshot-org/flameshot ","date":"2022-07-30","objectID":"/devtools-flameshot/:3:0","tags":["flameshot"],"title":"devtools-flameshot","uri":"/devtools-flameshot/"},{"categories":["devtools"],"content":"下载 https://github.com/flameshot-org/flameshot/releases/tag/v0.10.2 ","date":"2022-07-30","objectID":"/devtools-flameshot/:4:0","tags":["flameshot"],"title":"devtools-flameshot","uri":"/devtools-flameshot/"},{"categories":["devtools"],"content":"常见平台安装 MacOS brew install --cask flameshot Manjaro pacman -S flameshot Ubuntu 16.04 wget https://github.com/flameshot-org/flameshot/releases/download/v11.0.rc1/Flameshot-11.0.rc1.x86_64.AppImage Ubuntu 18.04+ apt install flameshot Ubuntu 20.04+ 下载deb包安装 https://github.com/flameshot-org/flameshot/releases wget http://github.com/flameshot-org/flameshot/releases/download/v11.0.0/flameshot-11.0.0-1.ubuntu-20.04.amd64.deb sudo apt install ./flameshot-11.0.0-1.ubuntu-20.04.amd64.deb Debian 10+ apt install flameshot windows 直接下载安装包,下载地址: https://github.com/flameshot-org/flameshot/releases/tag/v0.10.2 ","date":"2022-07-30","objectID":"/devtools-flameshot/:5:0","tags":["flameshot"],"title":"devtools-flameshot","uri":"/devtools-flameshot/"},{"categories":["devtools"],"content":"常用快捷键 按PrintScreen键 激活 Ctrl + c 拷贝到剪贴版 Ctrl + s 保存到文件 Ctrl + z 撤销 ","date":"2022-07-30","objectID":"/devtools-flameshot/:6:0","tags":["flameshot"],"title":"devtools-flameshot","uri":"/devtools-flameshot/"},{"categories":["devtools"],"content":"常见问题 运行时提示 linux下提示/usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.14’ not found 解决办法 sudo pacman -Ss gcc sudo pacman -S core/gcc ","date":"2022-07-30","objectID":"/devtools-flameshot/:7:0","tags":["flameshot"],"title":"devtools-flameshot","uri":"/devtools-flameshot/"},{"categories":["linux"],"content":"mysql-使用mysqldump来备份数据库 ","date":"2022-07-30","objectID":"/linux-mysqldump/:0:0","tags":["linux","mysql"],"title":"mysql-使用mysqldump来备份数据库","uri":"/linux-mysqldump/"},{"categories":["linux"],"content":"导出单个表 mysqldump -u root -p123456 testdb t_user \u003e t_user.sql ","date":"2022-07-30","objectID":"/linux-mysqldump/:1:0","tags":["linux","mysql"],"title":"mysql-使用mysqldump来备份数据库","uri":"/linux-mysqldump/"},{"categories":["linux"],"content":"去掉注释 这个太重要了，方便保存后通过git等代码管理工具比较差异 --skip-comments ","date":"2022-07-30","objectID":"/linux-mysqldump/:1:1","tags":["linux","mysql"],"title":"mysql-使用mysqldump来备份数据库","uri":"/linux-mysqldump/"},{"categories":["linux"],"content":"输出更少的信息 --compact 相当于 --skip-add-drop-table --skip-add-locks --skip-comments --skip-disable-keys ","date":"2022-07-30","objectID":"/linux-mysqldump/:1:2","tags":["linux","mysql"],"title":"mysql-使用mysqldump来备份数据库","uri":"/linux-mysqldump/"},{"categories":["linux"],"content":"插入语句单行输出 这一点很重要，如果记录比较多的话，生成的sql没法看。 --extended-insert=FALSE ","date":"2022-07-30","objectID":"/linux-mysqldump/:1:3","tags":["linux","mysql"],"title":"mysql-使用mysqldump来备份数据库","uri":"/linux-mysqldump/"},{"categories":["linux"],"content":"备份多个表 在all_base_table.txt中存放需要备份的表名 cat all_base_table.txt t_user_config t_login_config t_game_config 执行下面的脚本就可以批量备份表以及里面的数据 #!/bin/bash for tbname in $(cat all_base_table.txt) do echo tbname: $tbname mysqldump -h192.168.2.127 -P3306 -uroot -p123456 --opt testdb $tbname--skip-comments --extended-insert=FALSE \u003e./base_table/$tbname.sql echo basetable: $tbname done ","date":"2022-07-30","objectID":"/linux-mysqldump/:2:0","tags":["linux","mysql"],"title":"mysql-使用mysqldump来备份数据库","uri":"/linux-mysqldump/"},{"categories":["linux"],"content":"备份整个数据库的结构: des_file=testdb_no_data_v0.0.1.sql mysqldump -h192.168.2.127 -P3306 -uroot -p123456 testdb --no-data --routines --skip-comments \u003e $des_file ","date":"2022-07-30","objectID":"/linux-mysqldump/:3:0","tags":["linux","mysql"],"title":"mysql-使用mysqldump来备份数据库","uri":"/linux-mysqldump/"},{"categories":["linux"],"content":"备份整个数据库的结构和数据并压缩 dt=$(date +%Y%m%d_%H%M%S) des_file=testdb_bak_$dt.sql bak_file=testdb_bak_$dt.tar.gz mysqldump -h192.168.2.127 -P3306 -uroot -p123456 testdb --routines \u003e $des_file tar -czvf $bak_file $des_file mv $bak_file ./bak/ rm -f $des_file ","date":"2022-07-30","objectID":"/linux-mysqldump/:4:0","tags":["linux","mysql"],"title":"mysql-使用mysqldump来备份数据库","uri":"/linux-mysqldump/"},{"categories":["linux"],"content":"备份数据恢复 mysql -uroot -p use testdb source /data/testdb.sql ","date":"2022-07-30","objectID":"/linux-mysqldump/:5:0","tags":["linux","mysql"],"title":"mysql-使用mysqldump来备份数据库","uri":"/linux-mysqldump/"},{"categories":["linux"],"content":"不想导入备份中的某些大表怎么办？ 这里提供一个思路，如果你知道是那些表太大了，那就可以把这些表的insert语句删掉再进行导入。 例如：条record_round和表record_game太大了，不导入这2个表的记录那么可以用sed命令删除掉相关记录 sed '/INTO `record_round` VALUES/d;/INTO `record_game` VALUES/d' testdb.sql \u003etestdb_min.sql ","date":"2022-07-30","objectID":"/linux-mysqldump/:6:0","tags":["linux","mysql"],"title":"mysql-使用mysqldump来备份数据库","uri":"/linux-mysqldump/"},{"categories":["linux"],"content":"总结 上面只是列举了常用的几种用法 mysqldump的用法还很多，有需要的同学可以深入研究学习一下。 mysqldump的笔记先就记到这里，后面有更有价值的用法再行补充。 ","date":"2022-07-30","objectID":"/linux-mysqldump/:7:0","tags":["linux","mysql"],"title":"mysql-使用mysqldump来备份数据库","uri":"/linux-mysqldump/"},{"categories":["linux"],"content":"ubuntu 远程连接windows的几种方法 ","date":"2022-07-30","objectID":"/linux-ubuntu-remotedesktop/:0:0","tags":["linux","ubuntu"],"title":"ubuntu-远程连接windows的几种方法","uri":"/linux-ubuntu-remotedesktop/"},{"categories":["linux"],"content":"1. 使用rdesktop 安装 sudo apt install rdesktop 使用举例 rdesktop -g 1024x768 -a 16 -u Administrator -p your_password -0 192.168.2.189:3389 常用使用参数 -f 全屏 -g 桌面大小 -a 16 16位色深 -u 用户名 -p 密码 -r clipboard 表示允许在远程主机和本机之间共享剪切板，可以复制粘贴 -r clipboard:PRIMARYCLIPBOARD 共享剪贴板，连接到window7 -r disk:share=/home 共享/home目录 ctrl+alt+enter 退出全屏 ","date":"2022-07-30","objectID":"/linux-ubuntu-remotedesktop/:1:0","tags":["linux","ubuntu"],"title":"ubuntu-远程连接windows的几种方法","uri":"/linux-ubuntu-remotedesktop/"},{"categories":["linux"],"content":"使用rdesktop常见问题 1. 连接失败,提示如下: Connecting to server using NLA... Core(warning): Certificate received from server is NOT trusted by this system, an exception has been added by the user to trust this specific certificate. TLS Session info: (TLS1.2)-(RSA)-(AES-256-GCM) Failed to initialize NLA, do you have correct Kerberos TGT initialized ? Failed to connect using NLA, trying with SSL Failed to connect, CredSSP required by server (check if server has disabled old TLS versions, if yes use -V option). 解决方法是: 1.先通过其他方式远程连接服务器。 2.右键我的电脑--\u003e属性--\u003e远程设置--\u003e远程 3.取消勾选 仅允许运行使用网络界别身份验证的远程桌面的计算机连接(建议)(N) 2. 如何共享磁盘？ 加上 -r disk:share_home=/home参数（Ubuntu 20.04.4 LTS 测试正常） rdesktop -g 1024x768 -a 16 -u Administrator -p your_password -0 192.168.2.189:3389 -r clipboard:PRIMARYCLIPBOARD -r disk:share_home=/home ","date":"2022-07-30","objectID":"/linux-ubuntu-remotedesktop/:1:1","tags":["linux","ubuntu"],"title":"ubuntu-远程连接windows的几种方法","uri":"/linux-ubuntu-remotedesktop/"},{"categories":["linux"],"content":"扩展使用 使用i3wm桌面管理器时，该方法同样可用 manjaro中可用 ","date":"2022-07-30","objectID":"/linux-ubuntu-remotedesktop/:1:2","tags":["linux","ubuntu"],"title":"ubuntu-远程连接windows的几种方法","uri":"/linux-ubuntu-remotedesktop/"},{"categories":["linux"],"content":"参考链接 https://blog.csdn.net/weixin_39895167/article/details/116716315 ","date":"2022-07-30","objectID":"/linux-ubuntu-remotedesktop/:1:3","tags":["linux","ubuntu"],"title":"ubuntu-远程连接windows的几种方法","uri":"/linux-ubuntu-remotedesktop/"},{"categories":["linux"],"content":"2. xfreerdp ","date":"2022-07-30","objectID":"/linux-ubuntu-remotedesktop/:2:0","tags":["linux","ubuntu"],"title":"ubuntu-远程连接windows的几种方法","uri":"/linux-ubuntu-remotedesktop/"},{"categories":["linux"],"content":"3. Remmina 桌面共享客户端 ","date":"2022-07-30","objectID":"/linux-ubuntu-remotedesktop/:3:0","tags":["linux","ubuntu"],"title":"ubuntu-远程连接windows的几种方法","uri":"/linux-ubuntu-remotedesktop/"},{"categories":["linux"],"content":"1. 安装 sudo apt-get install remmina remmina-plugin-* ","date":"2022-07-30","objectID":"/linux-ubuntu-remotedesktop/:3:1","tags":["linux","ubuntu"],"title":"ubuntu-远程连接windows的几种方法","uri":"/linux-ubuntu-remotedesktop/"},{"categories":["linux"],"content":"总结 目前就个人而言，如果是在终端里面我个人比较喜欢用的是rdesktop和xfreerdp。 GUI管理工具的话，Remmina目前也在用，感觉还是挺不错的，推荐给大家。 如果大家有更好的linux远程windows的工具，欢迎推荐。 ","date":"2022-07-30","objectID":"/linux-ubuntu-remotedesktop/:4:0","tags":["linux","ubuntu"],"title":"ubuntu-远程连接windows的几种方法","uri":"/linux-ubuntu-remotedesktop/"},{"categories":["skynet"],"content":"【skynet学习笔记】skynet的目录结构 ","date":"2022-07-29","objectID":"/skynet_dir/:0:0","tags":["skynet"],"title":"skynet-skynet目录结构","uri":"/skynet_dir/"},{"categories":["skynet"],"content":"skynet目录结构 学习skynet必须先了解一下skynet的目录结构。 skynet的目录结构十分清晰，一目了然。 下面来具体看看各个目录。 [root@lzw skynet]# tree -f -L 1 . ├── ./3rd ├── ./cservice ├── ./examples ├── ./HISTORY.md ├── ./LICENSE ├── ./luaclib ├── ./lualib ├── ./lualib-src ├── ./Makefile ├── ./platform.mk ├── ./README.md ├── ./service ├── ./service-src ├── ./skynet ├── ./skynet-src └── ./test ","date":"2022-07-29","objectID":"/skynet_dir/:1:0","tags":["skynet"],"title":"skynet-skynet目录结构","uri":"/skynet_dir/"},{"categories":["skynet"],"content":"目录结构分析 ","date":"2022-07-29","objectID":"/skynet_dir/:2:0","tags":["skynet"],"title":"skynet-skynet目录结构","uri":"/skynet_dir/"},{"categories":["skynet"],"content":"3rd目录 ./3rd：存放第三方库里面包括了:jemalloc,lpeg,lua,lua-md5 jemalloc:是个内存管理库，可以提高内存是利用率，减少内存碎片。skynet中可以通过编译选项来决定是否使用这个库。 lpeg:是一个模式匹配库。 lua:lua源代码，目前skynet1.5.0用的lua版本是5.4.4。 lua-md5:一个lua的md5库。 [root@lzw skynet]# tree -f -L 1 3rd/ 3rd ├── 3rd/jemalloc ├── 3rd/lpeg ├── 3rd/lua └── 3rd/lua-md5 ","date":"2022-07-29","objectID":"/skynet_dir/:2:1","tags":["skynet"],"title":"skynet-skynet目录结构","uri":"/skynet_dir/"},{"categories":["skynet"],"content":"cservice目录 cservice目录存放c语言实现的skynet服务 [root@lzw skynet]# tree -f -L 1 cservice/ cservice ├── cservice/gate.so ├── cservice/harbor.so ├── cservice/logger.so └── cservice/snlua.so examples：存放skynet的一些官方的例子，这里不展开介绍了，后面会逐个分析一下各个例子。 [root@lzw skynet]# tree -f -L 1 examples/ examples ├── examples/abort.lua ├── examples/agent.lua ├── examples/checkdeadloop.lua ├── examples/client.lua ├── examples/cluster1.lua ├── examples/cluster2.lua ├── examples/clustername.lua ├── examples/config ├── examples/config.c1 ├── examples/config.c2 ├── examples/config_log ├── examples/config.login ├── examples/config.mc ├── examples/config.mongodb ├── examples/config.mysql ├── examples/config.path ├── examples/config.userlog ├── examples/globallog.lua ├── examples/injectlaunch.lua ├── examples/login ├── examples/main_log.lua ├── examples/main.lua ├── examples/main_mongodb.lua ├── examples/main_mysql.lua ├── examples/preload.lua ├── examples/protoloader.lua ├── examples/proto.lua ├── examples/share.lua ├── examples/simpledb.lua ├── examples/simplemonitor.lua ├── examples/simpleweb.lua ├── examples/simplewebsocket.lua ├── examples/userlog.lua └── examples/watchdog.lua ","date":"2022-07-29","objectID":"/skynet_dir/:2:2","tags":["skynet"],"title":"skynet-skynet目录结构","uri":"/skynet_dir/"},{"categories":["skynet"],"content":"luaclib目录 luaclib目录存放.so库 [root@lzw skynet]# tree -f -L 1 luaclib/ luaclib ├── luaclib/bson.so ├── luaclib/client.so ├── luaclib/clientws.so ├── luaclib/lpeg.so ├── luaclib/ltls.so ├── luaclib/md5.so ├── luaclib/mysqlaux.so ├── luaclib/skynet.so ├── luaclib/sproto.so └── luaclib/wsnetpack.so ","date":"2022-07-29","objectID":"/skynet_dir/:2:3","tags":["skynet"],"title":"skynet-skynet目录结构","uri":"/skynet_dir/"},{"categories":["skynet"],"content":"lualib目录 存放skynet的lua库 [root@lzw skynet]# tree lualib -L 1 lualib ├── compat10 ├── http ├── loader.lua ├── md5.lua ├── skynet ├── skynet.lua ├── snax ├── sprotoloader.lua ├── sproto.lua └── sprotoparser.lua ","date":"2022-07-29","objectID":"/skynet_dir/:2:4","tags":["skynet"],"title":"skynet-skynet目录结构","uri":"/skynet_dir/"},{"categories":["skynet"],"content":"lualib-src目录 存放skynetlua库的源码 [root@lzw skynet]# tree -f -L 1 lualib-src lualib-src ├── lualib-src/lsha1.c ├── lualib-src/ltls.c ├── lualib-src/lua-bson.c ├── lualib-src/lua-clientsocket.c ├── lualib-src/lua-clientwebsocket.c ├── lualib-src/lua-cluster.c ├── lualib-src/lua-crypt.c ├── lualib-src/lua-datasheet.c ├── lualib-src/lua-debugchannel.c ├── lualib-src/lua-memory.c ├── lualib-src/lua-mongo.c ├── lualib-src/lua-multicast.c ├── lualib-src/lua-mysqlaux.c ├── lualib-src/lua-netpack.c ├── lualib-src/lua-profile.c ├── lualib-src/lua-seri.c ├── lualib-src/lua-seri.h ├── lualib-src/lua-sharedata.c ├── lualib-src/lua-sharetable.c ├── lualib-src/lua-skynet.c ├── lualib-src/lua-socket.c ├── lualib-src/lua-stm.c ├── lualib-src/lua-websocketnetpack.c └── lualib-src/sproto ","date":"2022-07-29","objectID":"/skynet_dir/:2:5","tags":["skynet"],"title":"skynet-skynet目录结构","uri":"/skynet_dir/"},{"categories":["skynet"],"content":"service目录 service目录存放一些lua实现的skynet服务 [root@lzw skynet]# tree -f -L 1 service service ├── service/bootstrap.lua ├── service/cdummy.lua ├── service/clusteragent.lua ├── service/clusterd.lua ├── service/clusterproxy.lua ├── service/clustersender.lua ├── service/cmaster.lua ├── service/cmemory.lua ├── service/console.lua ├── service/cslave.lua ├── service/datacenterd.lua ├── service/dbg.lua ├── service/debug_agent.lua ├── service/debug_console.lua ├── service/gate.lua ├── service/launcher.lua ├── service/multicastd.lua ├── service/service_cell.lua ├── service/service_mgr.lua ├── service/service_provider.lua ├── service/sharedatad.lua ├── service/snaxd.lua └── service/wsgate.lua ","date":"2022-07-29","objectID":"/skynet_dir/:2:6","tags":["skynet"],"title":"skynet-skynet目录结构","uri":"/skynet_dir/"},{"categories":["skynet"],"content":"service-src目录 service-src目录存放c语言写的服务的源码 [root@lzw skynet]# tree -f -L 1 service-src service-src ├── service-src/databuffer.h ├── service-src/hashid.h ├── service-src/service_gate.c ├── service-src/service_harbor.c ├── service-src/service_logger.c └── service-src/service_snlua.c ","date":"2022-07-29","objectID":"/skynet_dir/:2:7","tags":["skynet"],"title":"skynet-skynet目录结构","uri":"/skynet_dir/"},{"categories":["skynet"],"content":"skynet-src目录 skynet-src目录存放skynet的核心c语言源码 [root@lzw skynet]# tree -f -L 1 skynet-src skynet-src ├── skynet-src/atomic.h ├── skynet-src/malloc_hook.c ├── skynet-src/malloc_hook.h ├── skynet-src/rwlock.h ├── skynet-src/skynet_daemon.c ├── skynet-src/skynet_daemon.h ├── skynet-src/skynet_env.c ├── skynet-src/skynet_env.h ├── skynet-src/skynet_error.c ├── skynet-src/skynet.h ├── skynet-src/skynet_handle.c ├── skynet-src/skynet_handle.h ├── skynet-src/skynet_harbor.c ├── skynet-src/skynet_harbor.h ├── skynet-src/skynet_imp.h ├── skynet-src/skynet_log.c ├── skynet-src/skynet_log.h ├── skynet-src/skynet_main.c ├── skynet-src/skynet_malloc.h ├── skynet-src/skynet_module.c ├── skynet-src/skynet_module.h ├── skynet-src/skynet_monitor.c ├── skynet-src/skynet_monitor.h ├── skynet-src/skynet_mq.c ├── skynet-src/skynet_mq.h ├── skynet-src/skynet_server.c ├── skynet-src/skynet_server.h ├── skynet-src/skynet_socket.c ├── skynet-src/skynet_socket.h ├── skynet-src/skynet_start.c ├── skynet-src/skynet_timer.c ├── skynet-src/skynet_timer.h ├── skynet-src/socket_buffer.h ├── skynet-src/socket_epoll.h ├── skynet-src/socket_info.h ├── skynet-src/socket_kqueue.h ├── skynet-src/socket_poll.h ├── skynet-src/socket_server.c ├── skynet-src/socket_server.h └── skynet-src/spinlock.h ","date":"2022-07-29","objectID":"/skynet_dir/:2:8","tags":["skynet"],"title":"skynet-skynet目录结构","uri":"/skynet_dir/"},{"categories":["skynet"],"content":"test目录 test目录存放skynet的测试代码 [root@lzw skynet]# tree -f -L 1 test test ├── test/pingserver.lua ├── test/sharemap.sp ├── test/testbson.lua ├── test/testcoroutine.lua ├── test/testcrypt.lua ├── test/testdatacenter.lua ├── test/testdatasheet.lua ├── test/testdeadcall.lua ├── test/testdeadloop.lua ├── test/testdns.lua ├── test/testecho.lua ├── test/testendless.lua ├── test/testharborlink.lua ├── test/testhttp.lua ├── test/testmemlimit.lua ├── test/testmongodb.lua ├── test/testmulticast2.lua ├── test/testmulticast.lua ├── test/testmysql.lua ├── test/testoverload.lua ├── test/testping.lua ├── test/testpipeline.lua ├── test/testqueue.lua ├── test/testredis2.lua ├── test/testrediscluster.lua ├── test/testredis.lua ├── test/testresponse.lua ├── test/testselect.lua ├── test/testservice ├── test/testsha.lua ├── test/testsharetable.lua ├── test/testsm.lua ├── test/testsocket.lua ├── test/teststm.lua ├── test/testterm.lua ├── test/testtimeout.lua ├── test/testtimer.lua ├── test/testtobeclosed.lua ├── test/testudp.lua └── test/time.lua ","date":"2022-07-29","objectID":"/skynet_dir/:2:9","tags":["skynet"],"title":"skynet-skynet目录结构","uri":"/skynet_dir/"},{"categories":["skynet"],"content":"总结 以上粗略地介绍了一下skynet的目录结构。后续会逐个分析一下每个目录里的文件以及作用。 在使用skynet进行开发的时候，我们最好不要在skynet这几个目录同级目录建立自己的项目，而是在他的上级目录去创建一个文件夹来包含skynet框架的代码，这样方便我们去更新和维护skynet的源代码。 在某些时候需要对skynet进行扩展时，最好不要直接修改代码，而是以新的模块的方式去扩展，这样更方便日后同步更新skynet框架。 ","date":"2022-07-29","objectID":"/skynet_dir/:3:0","tags":["skynet"],"title":"skynet-skynet目录结构","uri":"/skynet_dir/"},{"categories":["linux","i3wm"],"content":"i3wm-i3wm状态栏i3status如何配置显示星期？ ","date":"2022-07-28","objectID":"/i3wm-i3status-conf/:0:0","tags":["i3wm","i3status"],"title":"i3wm-i3wm状态栏i3status如何配置显示星期？","uri":"/i3wm-i3status-conf/"},{"categories":["linux","i3wm"],"content":"i3wm用的状态栏是i3status ","date":"2022-07-28","objectID":"/i3wm-i3status-conf/:1:0","tags":["i3wm","i3status"],"title":"i3wm-i3wm状态栏i3status如何配置显示星期？","uri":"/i3wm-i3status-conf/"},{"categories":["linux","i3wm"],"content":"i3status配置状态栏的方法如下: 配置文件路径/etc/i3status.conf vim /etc/i3status.conf tztime 结点中加入%A tztime local { format = \"%Y-%m-%d %H:%M:%S %A\" } ","date":"2022-07-28","objectID":"/i3wm-i3status-conf/:2:0","tags":["i3wm","i3status"],"title":"i3wm-i3wm状态栏i3status如何配置显示星期？","uri":"/i3wm-i3status-conf/"},{"categories":["mac"],"content":"mac-如何让terminal中能够看到不同的颜色? ","date":"2022-07-28","objectID":"/mac-terminal-color/:0:0","tags":["mac","terminal"],"title":"mac-如何让terminal中能够看到不同的颜色?","uri":"/mac-terminal-color/"},{"categories":["mac"],"content":"为什么要配置终端配色? 终端对不通类型的文件进行配色能够方便我们通过颜色区分文件夹，脚本文件，图片文件等，大大提高了寻找文件的效率。 ","date":"2022-07-28","objectID":"/mac-terminal-color/:1:0","tags":["mac","terminal"],"title":"mac-如何让terminal中能够看到不同的颜色?","uri":"/mac-terminal-color/"},{"categories":["mac"],"content":"如何配置？ 使用vim打开文件~/.bash_profile,在最后加入如下代码: alias ll='ls -la' # 命令别名 #export LS_OPTIONS='--color=auto' # 如果没有指定，则自动选择颜色 export CLICOLOR='Yes' # 是否输出颜色 export LSCOLORS='ExGxFxdaCxDaDahbadacec' # 指定颜色 export PS1=\"\\[\\033[01;31;01m\\][\\u@\\h \\W]\\$\\[\\033[01;00;00m\\] \" # 指定命令行提示符的颜色为红色 加完后不会立即生效，立即生效请执行: source ~/.bash_profile ","date":"2022-07-28","objectID":"/mac-terminal-color/:2:0","tags":["mac","terminal"],"title":"mac-如何让terminal中能够看到不同的颜色?","uri":"/mac-terminal-color/"},{"categories":["mac"],"content":"参考 https://www.cnblogs.com/FengZeng666/p/16026268.html ","date":"2022-07-28","objectID":"/mac-terminal-color/:3:0","tags":["mac","terminal"],"title":"mac-如何让terminal中能够看到不同的颜色?","uri":"/mac-terminal-color/"},{"categories":["skynet"],"content":"skynet debug_console 简介 ","date":"2022-07-28","objectID":"/debug_console/:0:0","tags":["skynet"],"title":"skynet-debug_console 简介","uri":"/debug_console/"},{"categories":["skynet"],"content":"skynet 自带了一个调试控制台服务。 skynet.newservice(\"debug_console\",8000) 这里的示例是监听 8000 端口，你可以修改成别的端口。 出于安全考虑，调试控制台只能监听本地地址 127.0.0.1。 所以如果需要远程使用，需要先登录到本机，然后再连接。 ","date":"2022-07-28","objectID":"/debug_console/:1:0","tags":["skynet"],"title":"skynet-debug_console 简介","uri":"/debug_console/"},{"categories":["skynet"],"content":"可以用 telnet 或 nc 登录调试控制台。启动后会显示 Welcome to skynet console 表示连接成功。 由于 skynet 使用自己的 IO 库，所以很难把 libreadline 接入（不能在 readline 的 hook 中 yield）。 如果你希望在控制台中使用 readline 的 history 等特性，可以自己使用 rlwrap 。 输入 help 可以列出目前支持的所有指令。 这份文档可能落后于实际版本，所以应以 help 列出的指令为准。 ","date":"2022-07-28","objectID":"/debug_console/:2:0","tags":["skynet"],"title":"skynet-debug_console 简介","uri":"/debug_console/"},{"categories":["skynet"],"content":"命令的一般格式是 命令 地址 ，有些命令不带地址，会针对所有的服务。 当输入地址时，可以使用 :00000001 这样的格式指代一个服务地址. 服务地址：由冒号开头的8位16进制数字， 前面两个数字的 harbor id， 01000001 可以简写为 1 。 所有活动的服务可以输入 list 列出。 ","date":"2022-07-28","objectID":"/debug_console/:3:0","tags":["skynet"],"title":"skynet-debug_console 简介","uri":"/debug_console/"},{"categories":["skynet"],"content":"常用的针对所有 lua 服务的指令有： 命令 作用 list 列出所有服务，以及启动服务的命令参数。 gc 强制让所有 lua 服务都执行一次垃圾回收，并报告回收后的内存。 mem 让所有 lua 服务汇报自己占用的内存。（注：它只能获取 lua 服务的 lua vm 内存占用情况，如果需要 C 模块中内存使用报告，请参考 MemoryHook 。 stat 列出所有 lua 服务的消息队列长度，以及被挂起的请求数量，处理的消息总数。如果在 Config 里设置 profile 为 true ，还会报告服务使用的 cpu 时间。 service 列出所有的唯一 lua 服务。并显示出请求还不存在的服务被挂起的请求。 netstat 列出网络连接的概况。 注意，由于这些指令是挨个向每个服务发送消息并等待回应，所以当某个 lua 服务过载时，可能需要等待很长时间才有返回。 ","date":"2022-07-28","objectID":"/debug_console/:4:0","tags":["skynet"],"title":"skynet-debug_console 简介","uri":"/debug_console/"},{"categories":["skynet"],"content":"针对单个 lua 服务的指令有： 命令 作用 exit address 让一个 lua 服务退出。 kill address 强制中止一个 lua 服务。 info address 让一个 lua 服务汇报自己的内部信息，参见 Profile 。 signal address sig 向服务发送一个信号，sig 默认为 0 。 当一个服务陷入死循环时，默认信号会打断正在执行的 lua 字节码，并抛出 error 显示调用栈。这是针对 endless loop 的 log 的有效调试方法。注：这里的信号并非系统信号。 task address 显示一个服务中所有被挂起的请求的调用栈。 debug address 针对一个 lua 服务启动内置的单步调试器。http://blog.codingnow.com/2015/02/skynet_debugger.html logon/logoff address 记录一个服务所有的输入消息到文件。需要在 Config 里配置 logpath 。 inject address script 将 script 名字对应的脚本插入到指定服务中运行（通常可用于热更新补丁）。 call address 调用一个服务的lua类型接口，格式为: call address “foo”, arg1, … 注意接口名和string型参数必须加引号,且以逗号隔开, address目前支持服务名方式。 ","date":"2022-07-28","objectID":"/debug_console/:5:0","tags":["skynet"],"title":"skynet-debug_console 简介","uri":"/debug_console/"},{"categories":["skynet"],"content":"使用举例 ","date":"2022-07-28","objectID":"/debug_console/:6:0","tags":["skynet"],"title":"skynet-debug_console 简介","uri":"/debug_console/"},{"categories":["skynet"],"content":"list list :00000004 snlua cdummy :00000006 snlua datacenterd :00000007 snlua service_mgr :00000009 snlua clusterd :0000000a snlua clustersender centernode mybonline130153 192.168.0.40 7002 :0000000b snlua debug_console 7701 :0000000c snlua redis_mgr :0000000d snlua mysql_mgr :0000000e snlua mysql_agent 1 :0000000f snlua mysql_agent 2 :00000010 snlua mysql_agent 3 :00000011 snlua dbservice :00000012 snlua gate :00000013 snlua dbservice_agent 1 :00000014 snlua dbservice_agent 2 :00000015 snlua dbservice_agent 3 :00000016 snlua clusteragent 9 18 8 :00000017 snlua clusteragent 9 18 9 :00000018 snlua clusteragent 9 18 11 :00000019 snlua clustersender gate1node mybonline130153 192.168.0.40 7005 \u003cCMD OK\u003e ","date":"2022-07-28","objectID":"/debug_console/:6:1","tags":["skynet"],"title":"skynet-debug_console 简介","uri":"/debug_console/"},{"categories":["skynet"],"content":"stat stat :00000004 cpu:0.000648 message:9 mqlen:0 task:0 :00000006 cpu:0.000417 message:7 mqlen:0 task:0 :00000007 cpu:0.001085 message:27 mqlen:0 task:0 :00000009 cpu:0.00093 message:27 mqlen:0 task:0 :0000000a cpu:0.001511 message:15 mqlen:0 task:1 :0000000b cpu:0.005971 message:36 mqlen:0 task:1 :0000000c cpu:0.002868 message:90 mqlen:0 task:1 :0000000d cpu:0.586735 message:32433 mqlen:0 task:0 :0000000e cpu:1.041848 message:16828 mqlen:0 task:2 :0000000f cpu:1.045539 message:16767 mqlen:0 task:2 :00000010 cpu:1.054712 message:17290 mqlen:0 task:2 :00000011 cpu:0.568066 message:32442 mqlen:0 task:0 :00000012 cpu:0.34314 message:20203 mqlen:0 task:0 :00000013 cpu:0.549106 message:10815 mqlen:0 task:0 :00000014 cpu:0.541082 message:10834 mqlen:0 task:0 :00000015 cpu:0.550082 message:10868 mqlen:0 task:0 :00000016 cpu:0.000717 message:9 mqlen:0 task:0 :00000017 cpu:0.677452 message:32350 mqlen:0 task:0 :00000018 cpu:0.002423 message:80 mqlen:0 task:0 :00000019 cpu:0.003337 message:81 mqlen:0 task:1 \u003cCMD OK\u003e ","date":"2022-07-28","objectID":"/debug_console/:6:2","tags":["skynet"],"title":"skynet-debug_console 简介","uri":"/debug_console/"},{"categories":["skynet"],"content":"info info d { agent_index_ = 1, balance_ = {}, mysql_agent_count_ = 3 } \u003cCMD OK\u003e ","date":"2022-07-28","objectID":"/debug_console/:6:3","tags":["skynet"],"title":"skynet-debug_console 简介","uri":"/debug_console/"},{"categories":["skynet"],"content":"task task e 22527 stack traceback: [C]: in function 'skynet.profile.yield' skynet/lualib/skynet.lua:141: in function \u003cskynet/lualib/skynet.lua:113\u003e 22530 stack traceback: [C]: in function 'skynet.profile.yield' skynet/lualib/skynet.lua:244: in upvalue 'suspend_sleep' skynet/lualib/skynet.lua:270: in function 'skynet.wait' skynet/lualib/skynet/socketchannel.lua:127: in upvalue 'pop_response' skynet/lualib/skynet/socketchannel.lua:167: in function \u003cskynet/lualib/skynet/socketchannel.lua:165\u003e [C]: in function 'pcall' skynet/lualib/skynet/socketchannel.lua:303: in upvalue 'f' skynet/lualib/skynet.lua:141: in function \u003cskynet/lualib/skynet.lua:113\u003e \u003cCMD OK\u003e ","date":"2022-07-28","objectID":"/debug_console/:6:4","tags":["skynet"],"title":"skynet-debug_console 简介","uri":"/debug_console/"},{"categories":["skynet"],"content":"call :0000002f snlua luckyshop_service :00000030 snlua luckyshop_agent 1 total_count 4 \u003cCMD OK\u003e call 30 \"reload\" n 0 \u003cCMD OK\u003e ","date":"2022-07-28","objectID":"/debug_console/:6:5","tags":["skynet"],"title":"skynet-debug_console 简介","uri":"/debug_console/"},{"categories":["skynet"],"content":"clearcache clearcache \u003cCMD OK\u003e ","date":"2022-07-28","objectID":"/debug_console/:6:6","tags":["skynet"],"title":"skynet-debug_console 简介","uri":"/debug_console/"},{"categories":["skynet"],"content":"service service clusterd :00000009 debug_console :0000000b mysql_mgr :0000000d redis_mgr :0000000c \u003cCMD OK\u003e ","date":"2022-07-28","objectID":"/debug_console/:6:7","tags":["skynet"],"title":"skynet-debug_console 简介","uri":"/debug_console/"},{"categories":["skynet"],"content":"exit list :00000004 snlua cdummy :00000006 snlua datacenterd :00000007 snlua service_mgr :00000009 snlua clusterd :0000000a snlua clustersender centernode dev1273031 192.168.2.127 7002 :0000000b snlua debug_console 7310 :0000000c snlua gateservice :0000000d snlua forward_service :0000000e snlua wsgate :0000000f snlua node_service :00000010 snlua node_agent 1 :00000011 snlua gate :00000012 snlua clustersender loginnode dev1273031 192.168.2.127 7001 :00000013 snlua clusteragent 9 17 6 :00000014 snlua clustersender lobbynode dev1273031 192.168.2.127 7003 :00000017 snlua clustersender matchnode dev1273031 192.168.2.127 7201 :00000018 snlua clusteragent 9 17 11 :00000036 snlua clustersender recreationnode dev1273031 192.168.2.127 7401 :00000039 snlua clusteragent 9 17 30 :00000040 snlua clustersender paynode dev1273031 192.168.2.127 7008 :00000042 snlua clusteragent 9 17 41 :0000009a snlua clusteragent 9 17 69 \u003cCMD OK\u003e exit 10 \u003cCMD OK\u003e list :00000004 snlua cdummy :00000006 snlua datacenterd :00000007 snlua service_mgr :00000009 snlua clusterd :0000000a snlua clustersender centernode dev1273031 192.168.2.127 7002 :0000000b snlua debug_console 7310 :0000000c snlua gateservice :0000000d snlua forward_service :0000000e snlua wsgate :0000000f snlua node_service :00000011 snlua gate :00000012 snlua clustersender loginnode dev1273031 192.168.2.127 7001 :00000013 snlua clusteragent 9 17 6 :00000014 snlua clustersender lobbynode dev1273031 192.168.2.127 7003 :00000017 snlua clustersender matchnode dev1273031 192.168.2.127 7201 :00000018 snlua clusteragent 9 17 11 :00000036 snlua clustersender recreationnode dev1273031 192.168.2.127 7401 :00000039 snlua clusteragent 9 17 30 :00000040 snlua clustersender paynode dev1273031 192.168.2.127 7008 :00000042 snlua clusteragent 9 17 41 :0000009a snlua clusteragent 9 17 69 扫描下方二维码，关注我的公众号，获取更多技术方面的知识 ","date":"2022-07-28","objectID":"/debug_console/:6:8","tags":["skynet"],"title":"skynet-debug_console 简介","uri":"/debug_console/"},{"categories":null,"content":"记录TODO项","date":"2022-07-28","objectID":"/todo/","tags":null,"title":"TODO","uri":"/todo/"},{"categories":null,"content":"TODO ","date":"2022-07-28","objectID":"/todo/:0:0","tags":null,"title":"TODO","uri":"/todo/"},{"categories":null,"content":"2024年 ","date":"2022-07-28","objectID":"/todo/:1:0","tags":null,"title":"TODO","uri":"/todo/"},{"categories":null,"content":"2023年 学习golang 学习acra 学习docker 复习计算机网络 ","date":"2022-07-28","objectID":"/todo/:2:0","tags":null,"title":"TODO","uri":"/todo/"},{"categories":null,"content":"源码学习 lua nginx redis skynet 3rd examples 其他 tars ","date":"2022-07-28","objectID":"/todo/:3:0","tags":null,"title":"TODO","uri":"/todo/"},{"categories":null,"content":"游戏开发 Unity3d cocos creator ","date":"2022-07-28","objectID":"/todo/:4:0","tags":null,"title":"TODO","uri":"/todo/"},{"categories":null,"content":"学习 《Vim实用技巧（第2版）》学习笔记 golang学习笔记 ","date":"2022-07-28","objectID":"/todo/:5:0","tags":null,"title":"TODO","uri":"/todo/"},{"categories":null,"content":"读书笔记","date":"2022-07-28","objectID":"/book/","tags":null,"title":"笔记列表","uri":"/book/"},{"categories":null,"content":"笔记列表 «Vim实用技巧第2版»学习笔记 ","date":"2022-07-28","objectID":"/book/:1:0","tags":null,"title":"笔记列表","uri":"/book/"},{"categories":null,"content":"关于作者","date":"2022-07-28","objectID":"/about/","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":" 本站主要记录个人Linux开发相关笔记。 欢迎通过微信或者邮件等方式与本人交流相关技术问题。 有不正确的地方希望能够帮忙指正。 邮箱:cfanzp@qq.com 微信号:cfanzp 本站关注的方向包括并不限于如下列表 ","date":"2022-07-28","objectID":"/about/:0:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"编程语言 c c++ lua golang rust python,java,c#,php 操作系统 linux centos ubuntu manjaro,debian 主流技术 docker,k8s,etcd,zk,elk 数据库 redis mysql mongodb,MS SQL,postgresql 游戏框架 skynet tars ","date":"2022-07-28","objectID":"/about/:0:1","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"客户端 cocos2d-x cocos-creator u3d ","date":"2022-07-28","objectID":"/about/:0:2","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"开发工具 git nginx svn jenkins,gitlab ","date":"2022-07-28","objectID":"/about/:0:3","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"更多 公众号 加我微信 CSDN ","date":"2022-07-28","objectID":"/about/:1:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"categories ","date":"2022-07-28","objectID":"/about/:1:1","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"tags ","date":"2022-07-28","objectID":"/about/:1:2","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"关于作者","date":"2022-07-28","objectID":"/devtools/","tags":null,"title":"开发工具","uri":"/devtools/"},{"categories":null,"content":"开发工具 ","date":"2022-07-28","objectID":"/devtools/:0:0","tags":null,"title":"开发工具","uri":"/devtools/"},{"categories":null,"content":"思维导图 freemind freeplane ","date":"2022-07-28","objectID":"/devtools/:1:0","tags":null,"title":"开发工具","uri":"/devtools/"},{"categories":null,"content":"转发 nginx ","date":"2022-07-28","objectID":"/devtools/:2:0","tags":null,"title":"开发工具","uri":"/devtools/"},{"categories":null,"content":"源码管理 git svn jenkins,gitlab ","date":"2022-07-28","objectID":"/devtools/:2:1","tags":null,"title":"开发工具","uri":"/devtools/"},{"categories":null,"content":"编辑器 vim ","date":"2022-07-28","objectID":"/devtools/:2:2","tags":null,"title":"开发工具","uri":"/devtools/"},{"categories":null,"content":"截图 flameshot ","date":"2022-07-28","objectID":"/devtools/:2:3","tags":null,"title":"开发工具","uri":"/devtools/"},{"categories":null,"content":"更多 公众号 CSDN email:cfanzp@qq.com ","date":"2022-07-28","objectID":"/devtools/:3:0","tags":null,"title":"开发工具","uri":"/devtools/"},{"categories":null,"content":"汽车","date":"2022-07-28","objectID":"/car/","tags":null,"title":"汽车","uri":"/car/"},{"categories":null,"content":"car 电池测试: 电压:12.96v 测试值:495 cca 额定值:585 cca 健康状态:4格/14格 电池十大品牌 ","date":"2022-07-28","objectID":"/car/:0:1","tags":null,"title":"汽车","uri":"/car/"},{"categories":null,"content":"前端开发笔记","date":"2022-07-28","objectID":"/client/","tags":null,"title":"前端开发","uri":"/client/"},{"categories":null,"content":"客户端 cocos2d-x cocos-creator u3d ","date":"2022-07-28","objectID":"/client/:0:1","tags":null,"title":"前端开发","uri":"/client/"},{"categories":null,"content":"更多 公众号 CSDN ","date":"2022-07-28","objectID":"/client/:1:0","tags":null,"title":"前端开发","uri":"/client/"},{"categories":null,"content":"网络","date":"2022-07-28","objectID":"/network/","tags":null,"title":"网络","uri":"/network/"},{"categories":null,"content":"网络 软件定义广域网–SDWAN 防火墙 安全访问服务边缘—SASE 零信任网络访问–ZTNA 云访问安全代理–CASB 数据泄露防护–DLP 软件即服务–SaaS ","date":"2022-07-28","objectID":"/network/:0:0","tags":null,"title":"网络","uri":"/network/"},{"categories":null,"content":"分享个人项目","date":"2022-07-28","objectID":"/proj/","tags":null,"title":"项目","uri":"/proj/"},{"categories":null,"content":"项目 ","date":"2022-07-28","objectID":"/proj/:0:0","tags":null,"title":"项目","uri":"/proj/"},{"categories":null,"content":"后端服务 python邮件发送服务 linux c消息队列 ","date":"2022-07-28","objectID":"/proj/:1:0","tags":null,"title":"项目","uri":"/proj/"},{"categories":null,"content":"开源项目 ACRA ","date":"2022-07-28","objectID":"/proj/:2:0","tags":null,"title":"项目","uri":"/proj/"},{"categories":null,"content":"游戏开发笔记","date":"2022-07-28","objectID":"/game/","tags":null,"title":"游戏开发","uri":"/game/"},{"categories":null,"content":"游戏开发 本站关注的游戏开发技术包括并不限于如下列表 ","date":"2022-07-28","objectID":"/game/:1:0","tags":null,"title":"游戏开发","uri":"/game/"},{"categories":null,"content":"服务端 操作系统 linux centos ubuntu 数据库 redis mysql mongodb,MS SQL,postgresql 游戏框架 skynet tars ","date":"2022-07-28","objectID":"/game/:1:1","tags":null,"title":"游戏开发","uri":"/game/"},{"categories":null,"content":"客户端 cocos2d-x cocos-creator u3d ","date":"2022-07-28","objectID":"/game/:1:2","tags":null,"title":"游戏开发","uri":"/game/"},{"categories":null,"content":"更多 公众号 CSDN ","date":"2022-07-28","objectID":"/game/:2:0","tags":null,"title":"游戏开发","uri":"/game/"},{"categories":["skynet"],"content":"给项目日志加上traceid ","date":"2022-07-25","objectID":"/skynet-traceid/:0:0","tags":["skynet"],"title":"skynet-给项目日志添加traceid","uri":"/skynet-traceid/"},{"categories":["skynet"],"content":"traceid是什么？ 这里所说的traceid是指在服务端收到客户端请求后到服务端返回给客户端结果的过程中给没一条日志添加一个相同的traceid来跟踪请求到返回的整个过程。 ","date":"2022-07-25","objectID":"/skynet-traceid/:1:0","tags":["skynet"],"title":"skynet-给项目日志添加traceid","uri":"/skynet-traceid/"},{"categories":["skynet"],"content":"为什么要给服务的日志加上traceid? 最近准备给项目里的日志都加上traceid。这样方便服务端网关在收到请求后到返回给客户端之前追踪整个请求的链路。方便排查线上的bug以及统计查询请求的性能瓶颈。 添加一个traceid，对于一个新项目而言并不是什么难事，但是对于一个已经成熟上线的项目而言，还是有很多要注意的地方。 目前我们这个上线的项目采用的微服务的思想:项目里面把功能相对独立的部分单独成进程。方便服务的快速迭代，快速部署和部分更新。实际上这样的拆分作用相当明显，需要功能都不需要停服就可以一做到热更新，大大降低了维护成本，提高了用户的体验。 ","date":"2022-07-25","objectID":"/skynet-traceid/:2:0","tags":["skynet"],"title":"skynet-给项目日志添加traceid","uri":"/skynet-traceid/"},{"categories":["skynet"],"content":"如何设计traceid? 这里把traceid分成4个部分: 用户相关的uid 消息相关的msgid 递增或唯一的tid 时间相关的时间戳timestamp 用户的uid不用说，方便识别这个业务和那个用户相关。 消息msgid就方便定位业务。 tid为了保证traceid的唯一性。 时间戳方便统计请求到返回消耗的时间，同时在每深入一步后可以计算出消耗的时间。 ","date":"2022-07-25","objectID":"/skynet-traceid/:3:0","tags":["skynet"],"title":"skynet-给项目日志添加traceid","uri":"/skynet-traceid/"},{"categories":["skynet"],"content":"traceid是否可以做到对业务透传？ 目前对于线上业务结构，还做不到透传。只能通过在节点间、函数调用间传递参数traceid的方式来使用traceid,这是最简单也是最繁琐的方案了。不过还挺实用，能够解决问题。目前先让各节点支持traceid的链路追踪，后续再进行优化。 ","date":"2022-07-25","objectID":"/skynet-traceid/:4:0","tags":["skynet"],"title":"skynet-给项目日志添加traceid","uri":"/skynet-traceid/"},{"categories":["skynet"],"content":"总结 traceid的添加还在进行中，目前已完成部分节点的链路日志打印。后续会添加链路时间消耗的统计。这里先行记录一下。后续会使用traceid来统计一下各个api的调用耗时。 ","date":"2022-07-25","objectID":"/skynet-traceid/:5:0","tags":["skynet"],"title":"skynet-给项目日志添加traceid","uri":"/skynet-traceid/"},{"categories":["linux"],"content":"xargs命令 ","date":"2022-07-20","objectID":"/linux-xargs/:0:0","tags":["linux","xargs"],"title":"linux-xargs用法简介","uri":"/linux-xargs/"},{"categories":["linux"],"content":"为啥必须要学会xargs命令？ 主要原因是xargs的作用太大了，应用十分广泛，以下是平时工作中经常用到的一部分: 读取文件并重新格式化 配合wc统计文件行数 查找文件后批量删除文件 批量关闭进程 批量修改文件的权限 批量解压文件 其它用法可使用xargs –help深入学习 [root@dev127 myb]# xargs --help Usage: xargs [OPTION]... COMMAND INITIAL-ARGS... Run COMMAND with arguments INITIAL-ARGS and more arguments read from input. Mandatory arguments to long options are mandatory for short options too. Non-mandatory arguments are indicated by [square brackets] -0, --null Items are separated by a null, not whitespace.使用 Disables quote and backslash processing -a, --arg-file=FILE Read arguments from FILE, not standard input -d, --delimiter=CHARACTER Input items are separated by CHARACTER, not by blank space. Disables quote and backslash processing -E END If END occurs as a line of input, the rest of the input is ignored. -e [END], --eof[=END] Equivalent to -E END if END is specified. Otherwise, there is no end-of-file string --help Print a summary of the options to xargs. -I R same as --replace=R (R must be specified) -i,--replace=[R] Replace R in initial arguments with names read from standard input. If R is unspecified, assume {} -L,-l, --max-lines=MAX-LINES Use at most MAX-LINES nonblank input lines per command line -l Use at most one nonblank input line per command line -n, --max-args=MAX-ARGS Use at most MAX-ARGS arguments per command line -P, --max-procs=MAX-PROCS Run up to max-procs processes at a time -p, --interactive Prompt before running commands --process-slot-var=VAR Set environment variable VAR in child processes -r, --no-run-if-empty If there are no arguments, run no command.使用 If this option is not given, COMMAND will be run at least once. -s, --max-chars=MAX-CHARS Limit commands to MAX-CHARS at most --show-limits Show limits on command-line length. -t, --verbose Print commands before executing them --version Print the version number -x, --exit Exit if the size (see -s) is exceeded Report bugs to \u003cbug-findutils@gnu.org\u003e. ","date":"2022-07-20","objectID":"/linux-xargs/:1:0","tags":["linux","xargs"],"title":"linux-xargs用法简介","uri":"/linux-xargs/"},{"categories":["linux"],"content":"xargs的使用 ","date":"2022-07-20","objectID":"/linux-xargs/:2:0","tags":["linux","xargs"],"title":"linux-xargs用法简介","uri":"/linux-xargs/"},{"categories":["linux"],"content":"读取文件并重新格式化 例如下面的命令把一个4行4个字母格式化为1行了: $ cat c.txt a b c d # zp @ zp-pc in ~/temp [21:02:54] $ cat c.txt |xargs a b c d 格式化为每行2项: $ cat c.txt |xargs -n2 a b c d 指定分割符号-d: $ echo \"a;b;c;d\" | xargs -d \";\" a b c d ","date":"2022-07-20","objectID":"/linux-xargs/:2:1","tags":["linux","xargs"],"title":"linux-xargs用法简介","uri":"/linux-xargs/"},{"categories":["linux"],"content":"统计文件行数 统计当前目录下所有文件的行数: $ wc ./* -l 40 ./b.txt 4 ./c.txt 130 ./tmp.txt 174 total 等价于: $ wc ./* -l 40 ./b.txt 4 ./c.txt 130 ./tmp.txt 174 total 查找a目录下的.txt结尾的文件并删除不询问 $ find ./a -name \"*.txt\" | xargs -i rm {} ","date":"2022-07-20","objectID":"/linux-xargs/:2:2","tags":["linux","xargs"],"title":"linux-xargs用法简介","uri":"/linux-xargs/"},{"categories":["linux"],"content":"查找并删除文件 查找a目录下的.log结尾的文件并询问是否删除: [root@lzw lobby]# find ./a -name \"*.log\" | xargs -p -i rm {} rm ./a/lobby.20220118.log ?...y rm ./a/lobby.20220118-2.log ?...y rm ./a/lobby.20220117-3.log ?...y rm ./a/lobby.20220117-2.log ?...y rm ./a/lobby.20220118-3.log ?...y rm ./a/lobby.20220118-1.log ?...y rm ./a/lobby.20220115.log ?...y rm ./a/lobby.20220117-5.log ?...y rm ./a/lobby.20220117-1.log ?...y rm ./a/lobby.20220116.log ?...y rm ./a/lobby.20220117.log ?...y rm ./a/lobby.20220117-4.log ?...y rm ./a/lobby.20220117-6.log ?...y ","date":"2022-07-20","objectID":"/linux-xargs/:2:3","tags":["linux","xargs"],"title":"linux-xargs用法简介","uri":"/linux-xargs/"},{"categories":["linux"],"content":"批量修改文件的权限 批量修改当前目录下的lua文件把权限为755的改为644: find ./ -name \"*.lua\" -perm 755 | xargs chmod 644 ","date":"2022-07-20","objectID":"/linux-xargs/:2:4","tags":["linux","xargs"],"title":"linux-xargs用法简介","uri":"/linux-xargs/"},{"categories":["linux"],"content":"批量关闭进程 批量杀掉包含关键字\"chrome\"的进程: ps -ef | grep chrome | grep \"grep\" -v |xargs kill 或 ps -ef | grep chrome | ag \"ag\" -v |xargs kill ","date":"2022-07-20","objectID":"/linux-xargs/:2:5","tags":["linux","xargs"],"title":"linux-xargs用法简介","uri":"/linux-xargs/"},{"categories":["linux"],"content":"批量解压文件 $ls gate.20220117*.log.gz | xargs -i tar -xzvf {} data/log/server/gate/gate.20220117-1.log data/log/server/gate/gate.20220117-2.log data/log/server/gate/gate.20220117-3.log data/log/server/gate/gate.20220117-4.log data/log/server/gate/gate.20220117.log ","date":"2022-07-20","objectID":"/linux-xargs/:2:6","tags":["linux","xargs"],"title":"linux-xargs用法简介","uri":"/linux-xargs/"},{"categories":["linux"],"content":"ag命令 https://geoff.greer.fm/ag/ https://github.com/ggreer/the_silver_searcher ","date":"2022-07-20","objectID":"/linux-ag/:1:0","tags":["linux","ag"],"title":"linux-ag命令","uri":"/linux-ag/"},{"categories":["linux"],"content":"ag的安装 ","date":"2022-07-20","objectID":"/linux-ag/:2:0","tags":["linux","ag"],"title":"linux-ag命令","uri":"/linux-ag/"},{"categories":["linux"],"content":"macOS brew install the_silver_searcher or port install the_silver_searcher ","date":"2022-07-20","objectID":"/linux-ag/:2:1","tags":["linux","ag"],"title":"linux-ag命令","uri":"/linux-ag/"},{"categories":["linux"],"content":"Linux Ubuntu apt-get install silversearcher-ag Arch pacman -S the_silver_searcher zypper install the_silver_searcher CentOS yum install the_silver_searcher ","date":"2022-07-20","objectID":"/linux-ag/:2:2","tags":["linux","ag"],"title":"linux-ag命令","uri":"/linux-ag/"},{"categories":["linux"],"content":"Windows Win32/64 Unofficial daily builds are available. winget winget install \"The Silver Searcher\" 下载地址:https://github.com/k-takata/the_silver_searcher-win32/releases ","date":"2022-07-20","objectID":"/linux-ag/:2:3","tags":["linux","ag"],"title":"linux-ag命令","uri":"/linux-ag/"},{"categories":["linux"],"content":"源码下载 git clone https://github.com/ggreer/the_silver_searcher.git ","date":"2022-07-20","objectID":"/linux-ag/:3:0","tags":["linux","ag"],"title":"linux-ag命令","uri":"/linux-ag/"},{"categories":["linux"],"content":"du命令 ","date":"2022-07-20","objectID":"/linux-du/:0:0","tags":["linux","du"],"title":"linux-du命令","uri":"/linux-du/"},{"categories":["linux"],"content":"du命令简介 du命令是linux系统里的文件大小查看的命令。 du命令的应用场景十分广泛： 需要查看单个目录里面多个文件总大小。 需要查看目录中每个文件的大小以及每个子文件夹中文件的大小。 查看日志文件的大小。 查看文件大小并排序，找出最大的或最小的文件。 其它需要统计文件大小的场景。 ls,df也有类似的功能，但是du更侧重于文件大小，并且更灵活好用。是运维人员、服务端开发人员以及其他linux用户很好的工具。掌握du命令的用法十分有必要。 ","date":"2022-07-20","objectID":"/linux-du/:1:0","tags":["linux","du"],"title":"linux-du命令","uri":"/linux-du/"},{"categories":["linux"],"content":"du命令的使用 查看帮助 用法：du [选项]... [文件]... 或：du [选项]... --files0-from=F 计算每个文件的磁盘用量，目录则取总用量。 必选参数对长短选项同时适用。 -0, --null 每行输出使用 NUL 空字符结尾而非使用换行符 -a, --all 输出所有文件的磁盘用量，不仅仅是目录 --apparent-size 显示表面用量，而并非是磁盘用量；虽然表面用量通常会 小一些，但有时它会因为稀疏文件间的“洞”、内部碎 片、非直接引用的块等原因显得更大一些。 -B, --block-size=大小 以指定大小为单位对块大小进行输出；例如， 'BM' 以 1,048,576 字节为单位输出大小； 详情请参见下方的“SIZE 格式”部分 -b, --bytes 等效于 '--apparent-size --block-size=1' -c, --total 显示总计信息 -D, --dereference-args 只在符号链接显式在命令行列出时对其进行解引用 -d, --max-depth=N 仅当目录（或在 --all 选项启用时包括文件）层级不高于 命令行参数指定的 N 层时输出对应目录或文件的对应大小； --max-depth=0 等效于 --summarize --files0-from=F 统计由文件 F 给出的由 NUL 空字符结束的文件名列表 所对应各个文件的信息；如果 F 是 -，则从标准输入 读取文件名列表 -H 等效于 --dereference-args (-D) -h, --human-readable 以人类可读的格式输出大小（例如，1K 234M 2G） --inodes 列出 inode 使用信息而非块使用信息 -k 等效于 --block-size=1K -L, --dereference 解引用所有符号链接 -l, --count-links 如果是硬连接，则重复计算其尺寸 -m 等效于 --block-size=1M -P, --no-dereference 不跟随任何符号链接（默认行为） -S, --separate-dirs 不包括子目录的占用量 --si 类似 -h，但使用 1000 的倍数，而非 1024 -s, --summarize 只分别计算命令列中每个参数所占的总用量 -t, --threshold=大小 如果指定大小为正值，排除比该值更小的项， 或者在值为负时排除更大的项 --time 显示目录中或其子目录下所有文件的最后修改时间 --time=关键字 显示指定关键字对应的时间而非最后修改时间： atime, access, use, ctime 或 status --time-style=格式 使用指定格式显示时间，格式可以为： full-iso, long-iso, iso 或 +FORMAT； FORMAT 字符串以与 'date' 工具类似的方式解读 -X, --exclude-from=文件 排除所有与指定\u003c文件\u003e所提供模式匹配的文件 --exclude=模式 排除所有与所给\u003c模式\u003e匹配的文件 -x, --one-file-system 跳过位于不同文件系统上的目录 --help 显示此帮助信息并退出 --version 显示版本信息并退出 所显示的数值是来自 --block-size、DU_BLOCK_SIZE、BLOCK_SIZE 及 BLOCKSIZE 环境变量中第一个可用的 SIZE 单位。 否则，默认单位是 1024 字节(或是 512，若设定 POSIXLY_CORRECT 的话)。 The SIZE argument is an integer and optional unit (example: 10K is 10*1024). Units are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers of 1000). GNU coreutils 在线帮助：\u003chttps://www.gnu.org/software/coreutils/\u003e 请向 \u003chttp://translationproject.org/team/zh_CN.html\u003e 报告 du 的翻译错误 完整文档请见：\u003chttps://www.gnu.org/software/coreutils/du\u003e 或者在本地使用：info '(coreutils) du invocation' du -h:查看当前目录各文件占用磁盘大小 $ du -h 8.0K ./.git/refs/heads 8.0K ./.git/refs/remotes/origin 12K ./.git/refs/remotes 4.0K ./.git/refs/tags 28K ./.git/refs 4.0K ./.git/branches 8.0K ./.git/info 2.0M ./.git/objects/pack 4.0K ./.git/objects/info 2.0M ./.git/objects 8.0K ./.git/logs/refs/heads 8.0K ./.git/logs/refs/remotes/origin 12K ./.git/logs/refs/remotes 24K ./.git/logs/refs 32K ./.git/logs 52K ./.git/hooks 2.1M ./.git 2.5M . du -s 查看文件夹总大小 $ du -s .git 2104 .git du -hd1 查看当前目录下各目录文件大小，层级深度为1 $ du -hd1 .git 28K .git/refs 4.0K .git/branches 8.0K .git/info 2.0M .git/objects 32K .git/logs 52K .git/hooks 2.1M .git du -ah1 查看所有文件大小，深度为1. $ du -ahd1 4.0K ./arg.h 20K ./config.h 2.1M ./.git 4.0K ./win.h 4.0K ./Makefile 4.0K ./config.mk 4.0K ./README 56K ./st.c 20K ./config.def.h 4.0K ./TODO 48K ./x.c 52K ./x.o 4.0K ./LICENSE 12K ./FAQ 52K ./st.o 4.0K ./st.1 4.0K ./st.info 92K ./st 4.0K ./st.h 4.0K ./LEGACY 2.5M . 查看文件大小并按由大到小的顺序排序 $ du -ahd1 | sort -hr 2.5M . 2.1M ./.git 92K ./st 56K ./st.c 52K ./x.o 52K ./st.o 48K ./x.c 20K ./config.h 20K ./config.def.h 12K ./FAQ 4.0K ./win.h 4.0K ./TODO 4.0K ./st.info 4.0K ./st.h 4.0K ./st.1 4.0K ./README 4.0K ./Makefile 4.0K ./LICENSE 4.0K ./LEGACY 4.0K ./config.mk 4.0K ./arg.h ","date":"2022-07-20","objectID":"/linux-du/:2:0","tags":["linux","du"],"title":"linux-du命令","uri":"/linux-du/"},{"categories":["devtools"],"content":"比gitbook更高效且简洁的markdown工具mdbook ","date":"2022-07-18","objectID":"/devtools-mdbook/:0:0","tags":["devtools","mdbook"],"title":"mdbook-比gitbook更高效且简洁的markdown工具mdbook","uri":"/devtools-mdbook/"},{"categories":["devtools"],"content":"mdbook简介 mdbook是一个用rust语言编写的md文档转换为html文档的工具。 mdbook与gitbook功能十分相似。 使用后直观感觉是mdbook速度比gitbook快不少。 mdbook与gitbook相比功能要少很多，但是速度快就是最大的优势。 mdbook只有一个可执行文件。相比gitbook不用安装一大堆的依赖库。 ","date":"2022-07-18","objectID":"/devtools-mdbook/:1:0","tags":["devtools","mdbook"],"title":"mdbook-比gitbook更高效且简洁的markdown工具mdbook","uri":"/devtools-mdbook/"},{"categories":["devtools"],"content":"github地址 https://github.com/rust-lang/mdBook ","date":"2022-07-18","objectID":"/devtools-mdbook/:2:0","tags":["devtools","mdbook"],"title":"mdbook-比gitbook更高效且简洁的markdown工具mdbook","uri":"/devtools-mdbook/"},{"categories":["devtools"],"content":"mdbook安装 ","date":"2022-07-18","objectID":"/devtools-mdbook/:3:0","tags":["devtools","mdbook"],"title":"mdbook-比gitbook更高效且简洁的markdown工具mdbook","uri":"/devtools-mdbook/"},{"categories":["devtools"],"content":"安装方法1 先安装rust curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh cargo install mdbook 显示如下提示说明安装成功了 Compiling hyper v0.14.20 Compiling warp v0.3.2 Compiling ammonia v3.2.0 Compiling mdbook v0.4.20 Finished release [optimized] target(s) in 12m 24s Installing /Users/zp/.cargo/bin/mdbook Installed package `mdbook v0.4.20` (executable `mdbook`) ","date":"2022-07-18","objectID":"/devtools-mdbook/:3:1","tags":["devtools","mdbook"],"title":"mdbook-比gitbook更高效且简洁的markdown工具mdbook","uri":"/devtools-mdbook/"},{"categories":["devtools"],"content":"安装方法2 直接下载二进制:https://github.com/rust-lang/mdBook/releases wget https://github.com/rust-lang/mdBook/releases/download/v0.4.20/mdbook-v0.4.20-x86_64-unknown-linux-gnu.tar.gz ","date":"2022-07-18","objectID":"/devtools-mdbook/:3:2","tags":["devtools","mdbook"],"title":"mdbook-比gitbook更高效且简洁的markdown工具mdbook","uri":"/devtools-mdbook/"},{"categories":["devtools"],"content":"使用 ","date":"2022-07-18","objectID":"/devtools-mdbook/:4:0","tags":["devtools","mdbook"],"title":"mdbook-比gitbook更高效且简洁的markdown工具mdbook","uri":"/devtools-mdbook/"},{"categories":["devtools"],"content":"初始化一本书或一个笔记项目 mdbook init 初始化后会在当前目录生成src文件夹 ","date":"2022-07-18","objectID":"/devtools-mdbook/:4:1","tags":["devtools","mdbook"],"title":"mdbook-比gitbook更高效且简洁的markdown工具mdbook","uri":"/devtools-mdbook/"},{"categories":["devtools"],"content":"启动mdbook 监听8000端口 mdbook serve --port 8000 ","date":"2022-07-18","objectID":"/devtools-mdbook/:4:2","tags":["devtools","mdbook"],"title":"mdbook-比gitbook更高效且简洁的markdown工具mdbook","uri":"/devtools-mdbook/"},{"categories":["devtools"],"content":"后台启动mdbook mdbook serve --port 8000 \u0026 ","date":"2022-07-18","objectID":"/devtools-mdbook/:4:3","tags":["devtools","mdbook"],"title":"mdbook-比gitbook更高效且简洁的markdown工具mdbook","uri":"/devtools-mdbook/"},{"categories":["devtools"],"content":"参考 文档: https://rust-lang.github.io/mdBook/ 文档2: https://www.wenjiangs.com/doc/5ljx1ugy 文档3: https://llever.com/mdBook-zh/README.zh.html 中文手册: https://hellowac.github.io/mdbook_doc/index.html ","date":"2022-07-18","objectID":"/devtools-mdbook/:5:0","tags":["devtools","mdbook"],"title":"mdbook-比gitbook更高效且简洁的markdown工具mdbook","uri":"/devtools-mdbook/"},{"categories":["vim"],"content":"vim插件-对齐插件tabular ","date":"2022-07-06","objectID":"/vim-plug-tabular/:0:0","tags":["vim"],"title":"Vim插件:对齐插件-Tabular","uri":"/vim-plug-tabular/"},{"categories":["vim"],"content":"简单介绍 vim中怎么按\"=\",\"+\" 等符号对齐代码呢？使用tabular插件可以轻松解决。 tabular英语单词，主要用作动词，意思是:列成表格的 ","date":"2022-07-06","objectID":"/vim-plug-tabular/:1:0","tags":["vim"],"title":"Vim插件:对齐插件-Tabular","uri":"/vim-plug-tabular/"},{"categories":["vim"],"content":"安装 使用Plug管理插件的话，.vimrc中加入如下代码: Plug 'godlygeek/tabular' 使用其它管理工具的安装方法类似，这里就不介绍了。 不了解Plug管理插件的同学可以先了解一下相关方面的知识。 ","date":"2022-07-06","objectID":"/vim-plug-tabular/:2:0","tags":["vim"],"title":"Vim插件:对齐插件-Tabular","uri":"/vim-plug-tabular/"},{"categories":["vim"],"content":"使用方法 ","date":"2022-07-06","objectID":"/vim-plug-tabular/:3:0","tags":["vim"],"title":"Vim插件:对齐插件-Tabular","uri":"/vim-plug-tabular/"},{"categories":["vim"],"content":"例如按=号对齐代码 visual模式选中要对齐的行 进入底行模式输入Tabularize/= 单词太长记不住怎么办？按Tab键会有提示的。 :Tabularize/= 执行前 local a = 1 local hello = \"hello\" ```lua - 执行后 local a = 1 local hello = “hello” ","date":"2022-07-06","objectID":"/vim-plug-tabular/:3:1","tags":["vim"],"title":"Vim插件:对齐插件-Tabular","uri":"/vim-plug-tabular/"},{"categories":["c++","ubuntu","mysql"],"content":"mysql++的使用 ","date":"2022-06-14","objectID":"/mysql-/:0:0","tags":["c++","mysql"],"title":"mysql++的使用","uri":"/mysql-/"},{"categories":["c++","ubuntu","mysql"],"content":"download wget https://tangentsoft.com/mysqlpp/releases/mysql++-3.3.0.tar.gz sudo apt-get install libmysqlclient15-dev #sudo apt-get install libmysqlclient-dev ./configure --prefix=/usr/local LDFLAGS='-pthread' make \u0026\u0026 make install ","date":"2022-06-14","objectID":"/mysql-/:1:0","tags":["c++","mysql"],"title":"mysql++的使用","uri":"/mysql-/"},{"categories":["c++","ubuntu","mysql"],"content":"报错 Didn't find mysqlclient_r library in '/usr/lib64 /usr/lib /usr/lib64/mysql ","date":"2022-06-14","objectID":"/mysql-/:2:0","tags":["c++","mysql"],"title":"mysql++的使用","uri":"/mysql-/"},{"categories":["c++","ubuntu","mysql"],"content":"doc https://tangentsoft.com/mysqlpp/doc/trunk/README-Linux.txt ","date":"2022-06-14","objectID":"/mysql-/:3:0","tags":["c++","mysql"],"title":"mysql++的使用","uri":"/mysql-/"},{"categories":["c++","ubuntu","mysql"],"content":"mysqlpp demo #include \u003cmysql++.h\u003e #include \u003cssqls.h\u003e // 定义数据表结构 sql_create_3(MyTable, 1, 3, mysqlpp::sql_int, id, mysqlpp::sql_varchar, name, mysqlpp::sql_int, age) int main() { // 创建一个MySQL对象并连接到数据库 mysqlpp::Connection conn(false); if (conn.connect(\"database_name\", \"localhost\", \"username\", \"password\")) { // 连接成功 // 创建一个查询对象 mysqlpp::Query query = conn.query(); // 执行查询操作 query \u003c\u003c \"SELECT * FROM my_table\"; mysqlpp::StoreQueryResult res = query.store(); if (res) { // 查询成功 // 遍历结果集 for (size_t i = 0; i \u003c res.num_rows(); ++i) { const MyTable\u0026 row = res[i]; std::cout \u003c\u003c \"ID: \" \u003c\u003c row.id \u003c\u003c \", Name: \" \u003c\u003c row.name \u003c\u003c \", Age: \" \u003c\u003c row.age \u003c\u003c std::endl; } } else { // 查询失败 std::cerr \u003c\u003c \"Query error: \" \u003c\u003c query.error() \u003c\u003c std::endl; } // 插入数据 MyTable newRow(0, \"John Doe\", 25); query.insert(newRow); if (mysqlpp::SimpleResult result = query.execute()) { // 插入成功 std::cout \u003c\u003c \"Insert successful. Affected rows: \" \u003c\u003c result.rows() \u003c\u003c std::endl; } else { // 插入失败 std::cerr \u003c\u003c \"Insert error: \" \u003c\u003c query.error() \u003c\u003c std::endl; } } else { // 连接失败 std::cerr \u003c\u003c \"Connection error: \" \u003c\u003c conn.error() \u003c\u003c std::endl; } return 0; } ","date":"2022-06-14","objectID":"/mysql-/:4:0","tags":["c++","mysql"],"title":"mysql++的使用","uri":"/mysql-/"},{"categories":["devtools"],"content":"tmux基本配置 ","date":"2022-04-25","objectID":"/devtools-tmux/:0:0","tags":["linux","tmux","terminal","vim"],"title":"tmux基本配置及vim适配","uri":"/devtools-tmux/"},{"categories":["devtools"],"content":"tmux是什么？ tmux是一个终端复用工具。对于服务端开发的程序员或运维人员而言用处十分大。大大提高了工作效率。 ","date":"2022-04-25","objectID":"/devtools-tmux/:1:0","tags":["linux","tmux","terminal","vim"],"title":"tmux基本配置及vim适配","uri":"/devtools-tmux/"},{"categories":["devtools"],"content":"下载 wget http://cznic.dl.sourceforge.net/project/tmux/tmux/tmux-1.9/tmux-1.9a.tar.gz ","date":"2022-04-25","objectID":"/devtools-tmux/:2:0","tags":["linux","tmux","terminal","vim"],"title":"tmux基本配置及vim适配","uri":"/devtools-tmux/"},{"categories":["devtools"],"content":"安装 centos安装 yum install libevent-devel ncurses-devel tar -zxvf tmux-1.9.tar.gz cd tmux-1.9 ./configure make make install ubuntu sudo apt install tmux 查看版本号 tmux -V ","date":"2022-04-25","objectID":"/devtools-tmux/:3:0","tags":["linux","tmux","terminal","vim"],"title":"tmux基本配置及vim适配","uri":"/devtools-tmux/"},{"categories":["devtools"],"content":"使用 tmux #开启tmux tmux ls #显示已有tmux列表（C-b s） tmux attach-session -t 数字 #选择tmux C-b c 创建一个新的窗口 C-b n 切换到下一个窗口 C-b p 切换到上一个窗口 C-b l 最后一个窗口,和上一个窗口的概念不一样哟,谁试谁知道 c-b w 通过上下键选择当前窗口中打开的会话 C-b 数字 直接跳到你按的数字所在的窗口 C-b \u0026 退出当前窗口 C-b d 临时断开会话 断开以后,还可以连上的哟:) C-b \" 分割出来一个窗口 C-b % 分割出来一个窗口 C-b o 在小窗口中切换 C-b (方向键) C-b ! 关闭所有小窗口 C-b x 关闭当前光标处的小窗口 C-b t 钟表 C-b pageup/pagedo ","date":"2022-04-25","objectID":"/devtools-tmux/:4:0","tags":["linux","tmux","terminal","vim"],"title":"tmux基本配置及vim适配","uri":"/devtools-tmux/"},{"categories":["devtools"],"content":"实用的tmux配置 ","date":"2022-04-25","objectID":"/devtools-tmux/:5:0","tags":["linux","tmux","terminal","vim"],"title":"tmux基本配置及vim适配","uri":"/devtools-tmux/"},{"categories":["devtools"],"content":"一个实用的tmux配置文件分享 存放路径~/.tmux.conf 配置贴出来很简单： set -g default-terminal \"screen-256color\" #-- base settings --# set -g mode-keys vi # prefix key (Ctrl+a) set -g prefix ^x unbind ^b bind x send-prefix #up bind-key k select-pane -U #down bind-key j select-pane -D #left bind-key h select-pane -L #right bind-key l select-pane -R ","date":"2022-04-25","objectID":"/devtools-tmux/:5:1","tags":["linux","tmux","terminal","vim"],"title":"tmux基本配置及vim适配","uri":"/devtools-tmux/"},{"categories":["devtools"],"content":"tmux插件配置文件分享 root@vpps:~/.tmux/plugins# cat ~/.tmux.conf set -g default-terminal \"screen-256color\" #-- base settings --# set -g mode-keys vi set-environment -g EDITOR nvim # prefix key (Ctrl+a) set -g prefix ^a unbind ^b bind a send-prefix #up bind-key k select-pane -U #down bind-key j select-pane -D #left bind-key h select-pane -L #right bind-key l select-pane -R unbind-key -Troot Enter # List of plugins set -g @plugin 'tmux-plugins/tpm' #set -g @plugin 'tmux-plugins/tmux-sensible' set -g @plugin 'tmux-plugins/tmux-open' set -g @plugin 'tmux-plugins/tmux-urlview' set -g @plugin 'tmux-plugins/tmux-yank' set -g @plugin 'tmux-plugins/tmux-copycat' set-option -g @urlview-command \"nvim {}\" set -g @shell_mode 'vi' # Other examples: # set -g @plugin 'github_username/plugin_name' # set -g @plugin 'github_username/plugin_name#branch' # set -g @plugin 'git@github.com:user/plugin' # set -g @plugin 'git@bitbucket.com:user/plugin' # Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf) run '~/.tmux/plugins/tpm/tpm' run-shell '~/.tmux/plugins/tmux-urlview/urlview.tmux' run-shell '~/.tmux/plugins/tmux-open/open.tmux' run-shell '~/.tmux/plugins/tmux-yank/yank.tmux' run-shell '~/.tmux/plugins/tmux-copycat/copycat.tmux' tmux无需过多配置，用vim的同学绑定hjkl就特别好用了。 ","date":"2022-04-25","objectID":"/devtools-tmux/:5:2","tags":["linux","tmux","terminal","vim"],"title":"tmux基本配置及vim适配","uri":"/devtools-tmux/"},{"categories":["devtools"],"content":"更新配置文件 当修改了.tmux.conf后不想重启tmux,可以使用下面的命令更新配置 tmux source-file ~/.tmux.conf ","date":"2022-04-25","objectID":"/devtools-tmux/:5:3","tags":["linux","tmux","terminal","vim"],"title":"tmux基本配置及vim适配","uri":"/devtools-tmux/"},{"categories":["devtools"],"content":"解决vim在tmux中显示颜色异常 # vim ~/.bashrc alias tmux=\"TERM=screen-256color-bce tmux\" ","date":"2022-04-25","objectID":"/devtools-tmux/:5:4","tags":["linux","tmux","terminal","vim"],"title":"tmux基本配置及vim适配","uri":"/devtools-tmux/"},{"categories":["devtools"],"content":"tmux中复制 tmux可以实现在终端中复制，方法很简单 Ctrl-a + [:进入复制模式 HJKL:选择需要复制的文本 Enter:复制并结束 Ctrl-a + ]:粘贴 ","date":"2022-04-25","objectID":"/devtools-tmux/:5:5","tags":["linux","tmux","terminal","vim"],"title":"tmux基本配置及vim适配","uri":"/devtools-tmux/"},{"categories":["devtools"],"content":"tmux插件 tmux-yank tmux-copycat vim-tmux-navigator urlview tmux-open ","date":"2022-04-25","objectID":"/devtools-tmux/:5:6","tags":["linux","tmux","terminal","vim"],"title":"tmux基本配置及vim适配","uri":"/devtools-tmux/"},{"categories":["devtools","git"],"content":"git学习笔记 ","date":"2021-10-10","objectID":"/git-base/:0:0","tags":["git"],"title":"git学习笔记","uri":"/git-base/"},{"categories":["devtools","git"],"content":"git 缩写配置 在home目录创建.gitconfig文件复制粘贴以下配置并保存退出 [user] name = xx email = xx@qq.com [color] interactive = auto diff = auto status = auto branch = auto ui = true repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true ignorecase = true precomposeunicode = false [alias] co = checkout ci = commit st = status sh = stash sa = stash apply sp = stash pop ap = add -p br = branch cp = checkout -p cv = commit -v dc = diff --cached d = diff pr = pull --rebase ps = push l = log --graph --pretty=format:'%C(yellow)%h%Creset %C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)\u003c%an\u003e%Creset' --abbrev-commit --date=short --all lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)\u003c%an\u003e%Creset' --abbrev-commit --all [hub] protocol = https [diff] tool = vimdiff [core] editor = vim ","date":"2021-10-10","objectID":"/git-base/:1:0","tags":["git"],"title":"git学习笔记","uri":"/git-base/"},{"categories":["devtools","git"],"content":"常用缩写 git co git br git st git lg ","date":"2021-10-10","objectID":"/git-base/:2:0","tags":["git"],"title":"git学习笔记","uri":"/git-base/"},{"categories":["devtools","git"],"content":"工作流 开发新功能a sequenceDiagram participant proj1 participant a proj1-\u003e\u003ea:基于proj1分支创建一个a分支(step1) a-\u003e\u003eproj1:a分支开发完后合并入proj1分支,并删除a分支(step2) step1: git br a proj1 git push origin a step2: git co proj1 git pull git co a git merge proj1 git push git co proj1 git merge a git push git br -D a ","date":"2021-10-10","objectID":"/git-base/:3:0","tags":["git"],"title":"git学习笔记","uri":"/git-base/"},{"categories":["devtools","git"],"content":"常用命令 删除远程分支a: 切换到本地其它分支,如master git co master 删除远程分支 git push origin --delete a 修改远程分支地址 git remote -v git remote rm origin git remote add origin git@gitee.com:cfanzp/linux_note.git git添加多个远程分支地址 git remote add gitee git@gitee.com:cfanzp/linux_note.git ","date":"2021-10-10","objectID":"/git-base/:4:0","tags":["git"],"title":"git学习笔记","uri":"/git-base/"},{"categories":["devtools","git"],"content":"git tag 命令 作用 git tag 查看标签列表 git tag -l “v1.0*” 模糊匹配查询 git tag –list “v0.0*” 模糊匹配查询 git tag -a v1.0 -m “my version 1.0” 添加附注标签 git show v1.0 查看标签相关信息 git tag -lw 创建轻量标签，git show 不会看到额外标签信息 git tag -a v0.9 9fceb02 后期打标签 git push origin –tags 将标签推送到远端 git tag -d v1.0 删除标签 git push origin –delete 删除远端标签 ","date":"2021-10-10","objectID":"/git-base/:4:1","tags":["git"],"title":"git学习笔记","uri":"/git-base/"},{"categories":["devtools","git"],"content":"git stash 当自己代码写了一半了，突然需要切换分支，去修改一下另外一个分支的某个问题的时候怎么办? 可以将当前分支放入暂存 git stash 当其它分支修改完后，想回到之前的状态怎么办?先checkout原来的分支，然后恢复暂存 git stash pop 当自己发现暂存的代码没用了如何删除? git stash drop 清空暂存的所有内容 git stash clear 查看暂存 git stash list ","date":"2021-10-10","objectID":"/git-base/:4:2","tags":["git"],"title":"git学习笔记","uri":"/git-base/"},{"categories":["devtools","git"],"content":"git diff 命令 作用 git diff 查看差异 git diff cached 查看工作版本和暂存的差异 git diff HEAD 查看工作版本和HEAD的差异 git diff HEAD^ HEAD 查看上上个版本和HEAD的差异 git diff –stat 查看差异的文件列表 git diff –stat ./client 查看client目录 差异的文件列表 git diff \u003e patch 使用git diff 打补丁 git apply –check patch 使用补丁,没有任何输出表示可以顺利接受这个补丁 git apply –reject patch 使用补丁,冲突会生成.rej文件 ","date":"2021-10-10","objectID":"/git-base/:4:3","tags":["git"],"title":"git学习笔记","uri":"/git-base/"},{"categories":["devtools","git"],"content":"git 回退到某个版本 git reset commit-id git push origin branch-name –force ","date":"2021-10-10","objectID":"/git-base/:4:4","tags":["git"],"title":"git学习笔记","uri":"/git-base/"},{"categories":["devtools","git"],"content":"远程分支更新 git remote update origin –prune ","date":"2021-10-10","objectID":"/git-base/:4:5","tags":["git"],"title":"git学习笔记","uri":"/git-base/"},{"categories":["devtools","git"],"content":"删除所有历史commit,创建一个新仓库 Checkout git checkout --orphan latest_branch Add all the files git add -A Commit the changes git commit -am \"commit message\" Delete the branch git branch -D master Rename the current branch to master git branch -m master Finally, force update your repository git push -f origin master ","date":"2021-10-10","objectID":"/git-base/:5:0","tags":["git"],"title":"git学习笔记","uri":"/git-base/"},{"categories":["ubuntu","c++"],"content":"ubuntu20.04配置gtest环境 ","date":"2021-06-11","objectID":"/gtest/:0:0","tags":["ubuntu"],"title":"ubuntu20.04配置gtest环境","uri":"/gtest/"},{"categories":["ubuntu","c++"],"content":"写一个脚本安装gtest ","date":"2021-06-11","objectID":"/gtest/:1:0","tags":["ubuntu"],"title":"ubuntu20.04配置gtest环境","uri":"/gtest/"},{"categories":["ubuntu","c++"],"content":"方法1 cat ./install_gtest1.8.1.sh cd /usr/local/src/ proxychains wget https://github.com/google/googletest/archive/release-1.8.1.tar.gz tar -xzvf release-1.8.1.tar.gz cd googletest-release-1.8.1/ mkdir build cd build cmake ../ make \u0026\u0026 make install ","date":"2021-06-11","objectID":"/gtest/:1:1","tags":["ubuntu"],"title":"ubuntu20.04配置gtest环境","uri":"/gtest/"},{"categories":["ubuntu","c++"],"content":"方法2 sudo apt install libgtest-dev cd /usr/src/gtest/ mkdir build cd build sudo cmake .. sudo make cp ./lib/*.a /usr/local/lib/ ","date":"2021-06-11","objectID":"/gtest/:1:2","tags":["ubuntu"],"title":"ubuntu20.04配置gtest环境","uri":"/gtest/"},{"categories":["ubuntu","c++"],"content":"编写一个测试程序 cat demo.cpp #include \"demo.h\" int add(int a, int b) { return (a + b); } cat demo.h #ifndef C_DEMO_H_ #define C_DEMO_H_ int add(int a, int b); #endif // C_DEMO_H_ cat test_demo.cpp #include \u003cgtest/gtest.h\u003e #include \"demo.cpp\" TEST(add, case1) { EXPECT_LT(2, add(0, 2)); EXPECT_EQ(7, add(5, 2)); ASSERT_LT(-2, add(1, 2)); ASSERT_EQ(3, add(1, 2)); } int main(int argc, char **argv) { testing::InitGoogleTest(\u0026argc, argv); return RUN_ALL_TESTS(); } ","date":"2021-06-11","objectID":"/gtest/:2:0","tags":["ubuntu"],"title":"ubuntu20.04配置gtest环境","uri":"/gtest/"},{"categories":["ubuntu","c++"],"content":"build g++ -std=c++11 test.cpp -o test -lgtest -lpthread ","date":"2021-06-11","objectID":"/gtest/:2:1","tags":["ubuntu"],"title":"ubuntu20.04配置gtest环境","uri":"/gtest/"},{"categories":["ubuntu","c++"],"content":"运行效果 [==========] Running 1 test from 1 test suite. [----------] Global test environment set-up. [----------] 1 test from add [ RUN ] add.case1 test_demo.cpp:5: Failure Expected: (2) \u003c (add(0, 2)), actual: 2 vs 2 [ FAILED ] add.case1 (0 ms) [----------] 1 test from add (0 ms total) [----------] Global test environment tear-down [==========] 1 test from 1 test suite ran. (0 ms total) [ PASSED ] 0 tests. [ FAILED ] 1 test, listed below: [ FAILED ] add.case1 ","date":"2021-06-11","objectID":"/gtest/:2:2","tags":["ubuntu"],"title":"ubuntu20.04配置gtest环境","uri":"/gtest/"},{"categories":["golang"],"content":"Golang库 ","date":"2020-11-25","objectID":"/golang-lib/:0:0","tags":["go","golang"],"title":"Golang库","uri":"/golang-lib/"},{"categories":["golang"],"content":"日志库 https://github.com/sirupsen/logrus ","date":"2020-11-25","objectID":"/golang-lib/:0:1","tags":["go","golang"],"title":"Golang库","uri":"/golang-lib/"},{"categories":["golang"],"content":"网络安全 开源的数据库加密解决方案Acra 安全存储和访问机密数据的工具Vault 跨平台加密库themis ","date":"2020-11-25","objectID":"/golang-lib/:0:2","tags":["go","golang"],"title":"Golang库","uri":"/golang-lib/"},{"categories":["golang"],"content":"http Hertz:应用在字节跳动自研 Golang HTTP 框 ","date":"2020-11-25","objectID":"/golang-lib/:0:3","tags":["go","golang"],"title":"Golang库","uri":"/golang-lib/"},{"categories":["golang"],"content":"RPC Ginex KiteX:字节自有 RPC 框架 ","date":"2020-11-25","objectID":"/golang-lib/:0:4","tags":["go","golang"],"title":"Golang库","uri":"/golang-lib/"},{"categories":["golang"],"content":"json库 sonic(字节优化版的json库): https://github.com/bytedance/sonic gjson: github.com/tidwall/gjson ","date":"2020-11-25","objectID":"/golang-lib/:0:5","tags":["go","golang"],"title":"Golang库","uri":"/golang-lib/"},{"categories":["golang"],"content":"算法 AES256算法 crypto ","date":"2020-11-25","objectID":"/golang-lib/:0:6","tags":["go","golang"],"title":"Golang库","uri":"/golang-lib/"},{"categories":["linux","i3wm"],"content":"i3wm-基础快捷键 多屏显示 xrandr --output HDMI2 --auto --right-of HDMI-3 mod ctrl: $mod config alt :Mod1 Win键:Mod4 打开一个虚拟终端 mod+enter 拆分 mod+enter mod+v ++ mod+enter;水平分割 mod+n ++ mod+enter;竖指分割 聚焦到父窗口 mod+a 进入工作区 mod+1,2,3... 移动窗口到其他工作区 mod+shift+1,2,3 全屏模式： mod+f 三种模式： splith/splitv: mod + e mod+h tacking: mod + s modhift+q 重启i3 mod+shift+r 退出i3 mod+shift+e 浮动i3 mod+shift+space 打开应用 mod+d ","date":"2020-04-23","objectID":"/i3wm-shortkey/:0:0","tags":["linux","i3wm"],"title":"i3wm-基础快捷键","uri":"/i3wm-shortkey/"},{"categories":["c++","code"],"content":"gdb root@ecs-test:/data/linux_dev_blog# gdb --help This is the GNU debugger. Usage: gdb [options] [executable-file [core-file or process-id]] gdb [options] --args executable-file [inferior-arguments ...] Selection of debuggee and its files: --args Arguments after executable-file are passed to inferior --core=COREFILE Analyze the core dump COREFILE. --exec=EXECFILE Use EXECFILE as the executable. --pid=PID Attach to running process PID. --directory=DIR Search for source files in DIR. --se=FILE Use FILE as symbol file and executable file. --symbols=SYMFILE Read symbols from SYMFILE. --readnow Fully read symbol files on first access. --readnever Do not read symbol files. --write Set writing into executable and core files. Initial commands and command files: --command=FILE, -x Execute GDB commands from FILE. --init-command=FILE, -ix Like -x but execute commands before loading inferior. --eval-command=COMMAND, -ex Execute a single GDB command. May be used multiple times and in conjunction with --command. --init-eval-command=COMMAND, -iex Like -ex but before loading inferior. --nh Do not read ~/.gdbinit. --nx Do not read any .gdbinit files in any directory. Output and user interface control: --fullname Output information used by emacs-GDB interface. --interpreter=INTERP Select a specific interpreter / user interface --tty=TTY Use TTY for input/output by the program being debugged. -w Use the GUI interface. --nw Do not use the GUI interface. --tui Use a terminal user interface. --dbx DBX compatibility mode. -q, --quiet, --silent Do not print version number on startup. Operating modes: --batch Exit after processing options. --batch-silent Like --batch, but suppress all gdb stdout output. --return-child-result GDB exit code will be the child's exit code. --configuration Print details about GDB configuration and then exit. --help Print this message and then exit. ","date":"2020-01-30","objectID":"/gdb/:0:0","tags":["gdb","c++"],"title":"gdb","uri":"/gdb/"},{"categories":["c++","code"],"content":"添加调试信息-g 命令名称 命令缩写 命令说明 run r 运行一个待调试的程序 continue c 让暂停的程序继续运行 next n 运行到下一行 step s 单步执行，遇到函数会进入 until u 运行到指定行停下来 finish fi 结束当前调用函数，回到上一层调用函数处 return return 结束当前调用函数并返回指定值，到上一层函数调用处 jump j 将当前程序执行流跳转到指定行或地址 print p 打印变量或寄存器值 backtrace bt 查看当前线程的调用堆栈 frame f 切换到当前调用线程的指定堆栈 thread thread 切换到指定线程 break b 添加断点 tbreak tb 添加临时断点 delete d 删除断点 enable enable 启用某个断点 disable disable 禁用某个断点 watch watch 监视某一个变量或内存地址的值是否发生变化 list l 显示源码 info i 查看断点 / 线程等信息 ptype ptype 查看变量类型 disassemble dis 查看汇编代码 set args set args 设置程序启动命令行参数 show args show args 查看设置的命令行参数 ","date":"2020-01-30","objectID":"/gdb/:1:0","tags":["gdb","c++"],"title":"gdb","uri":"/gdb/"},{"categories":["c++","code"],"content":"设置断点 在gdb启动程序后可以使用b + 文件绝对路径+文件名:行号来设置断点 b /data/code/test.cpp:66 ","date":"2020-01-30","objectID":"/gdb/:1:1","tags":["gdb","c++"],"title":"gdb","uri":"/gdb/"},{"categories":["c++","code"],"content":"gdb调试core文件 gcc -c /tmp/core.server ./server ","date":"2020-01-30","objectID":"/gdb/:1:2","tags":["gdb","c++"],"title":"gdb","uri":"/gdb/"},{"categories":["c++","code"],"content":"更多gdb调试技巧 https://www.yanbinghu.com/2019/04/20/41283.html gdb调试1000招 ","date":"2020-01-30","objectID":"/gdb/:2:0","tags":["gdb","c++"],"title":"gdb","uri":"/gdb/"},{"categories":["c++"],"content":"c++ 容易crash的点 ","date":"2018-05-20","objectID":"/cpp_crash_summary/:0:0","tags":["c++"],"title":"c++ 容易crash的点","uri":"/cpp_crash_summary/"},{"categories":["c++"],"content":"一点感想 c++ 是一门让人又爱又不安的语言，爱的是它的运行高效，兼顾面向对象的特性。不安的是用不好的情况下很容易就crash了。这里收集一些比较典型的容易crash的点。 ","date":"2018-05-20","objectID":"/cpp_crash_summary/:1:0","tags":["c++"],"title":"c++ 容易crash的点","uri":"/cpp_crash_summary/"},{"categories":["c++"],"content":"容易crash得点 ","date":"2018-05-20","objectID":"/cpp_crash_summary/:2:0","tags":["c++"],"title":"c++ 容易crash的点","uri":"/cpp_crash_summary/"},{"categories":["c++"],"content":"数组越界 ","date":"2018-05-20","objectID":"/cpp_crash_summary/:2:1","tags":["c++"],"title":"c++ 容易crash的点","uri":"/cpp_crash_summary/"},{"categories":["c++"],"content":"replace引起的crash 在做replcae操作前，需要先确定这个元素是存在的。 例如 string a = \"abc\"; a.replace(a.find(\"_\"),1,\",\"); 安全写法 string a = \"abc\"; if (a.find(\"_\") != string::npos) { a.replace(a.find(\"_\"),1,\",\"); } ","date":"2018-05-20","objectID":"/cpp_crash_summary/:2:2","tags":["c++"],"title":"c++ 容易crash的点","uri":"/cpp_crash_summary/"},{"categories":["c++"],"content":"char* 转string 引起的crash char* 为0或null赋值给string,或通过函数参数转为string都会引起crash. char* a = 0; string b = a; ","date":"2018-05-20","objectID":"/cpp_crash_summary/:2:3","tags":["c++"],"title":"c++ 容易crash的点","uri":"/cpp_crash_summary/"}]